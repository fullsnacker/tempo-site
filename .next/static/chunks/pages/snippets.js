/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/snippets"],{

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fopt%2Fprojects%2Fblog%2Fpages%2Fsnippets%2Findex.tsx&page=%2Fsnippets!":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fopt%2Fprojects%2Fblog%2Fpages%2Fsnippets%2Findex.tsx&page=%2Fsnippets! ***!
  \*****************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/snippets\",\n      function () {\n        return __webpack_require__(/*! ./pages/snippets/index.tsx */ \"./pages/snippets/index.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/snippets\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD0lMkZvcHQlMkZwcm9qZWN0cyUyRmJsb2clMkZwYWdlcyUyRnNuaXBwZXRzJTJGaW5kZXgudHN4JnBhZ2U9JTJGc25pcHBldHMhLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsOERBQTRCO0FBQ25EO0FBQ0E7QUFDQSxPQUFPLElBQVU7QUFDakIsTUFBTSxVQUFVO0FBQ2hCO0FBQ0EsT0FBTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9jMDQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgICh3aW5kb3cuX19ORVhUX1AgPSB3aW5kb3cuX19ORVhUX1AgfHwgW10pLnB1c2goW1xuICAgICAgXCIvc25pcHBldHNcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3BhZ2VzL3NuaXBwZXRzL2luZGV4LnRzeFwiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXCIvc25pcHBldHNcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fopt%2Fprojects%2Fblog%2Fpages%2Fsnippets%2Findex.tsx&page=%2Fsnippets!\n"));

/***/ }),

/***/ "./components/Banner.tsx":
/*!*******************************!*\
  !*** ./components/Banner.tsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Banner; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction Banner(param) {\n    let { title , description , illustration =\"default\"  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        className: \"bg-gray-800 w-full rounded-2xl h-36 flex items-center gap-10 px-4\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-40 h-full relative\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                    src: \"/avatar-torso.png\",\n                    className: \"absolute bottom-0 left-1\",\n                    alt: \"\"\n                }, void 0, false, {\n                    fileName: \"/opt/projects/blog/components/Banner.tsx\",\n                    lineNumber: 11,\n                    columnNumber: 5\n                }, this)\n            }, void 0, false, {\n                fileName: \"/opt/projects/blog/components/Banner.tsx\",\n                lineNumber: 10,\n                columnNumber: 4\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-col gap-1 text-white\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-3xl font-bold\",\n                        children: title\n                    }, void 0, false, {\n                        fileName: \"/opt/projects/blog/components/Banner.tsx\",\n                        lineNumber: 14,\n                        columnNumber: 5\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-gray-300 font-medium \",\n                        children: description\n                    }, void 0, false, {\n                        fileName: \"/opt/projects/blog/components/Banner.tsx\",\n                        lineNumber: 15,\n                        columnNumber: 5\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/opt/projects/blog/components/Banner.tsx\",\n                lineNumber: 13,\n                columnNumber: 4\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/opt/projects/blog/components/Banner.tsx\",\n        lineNumber: 9,\n        columnNumber: 3\n    }, this);\n}\n_c = Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0Jhbm5lci50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1lLFNBQVNBLE9BQU8sS0FBdUQsRUFBRTtRQUF6RCxFQUFFQyxNQUFLLEVBQUVDLFlBQVcsRUFBRUMsY0FBZSxVQUFTLEVBQVMsR0FBdkQ7SUFDOUIscUJBQ0MsOERBQUNDO1FBQVFDLFdBQVU7OzBCQUNsQiw4REFBQ0M7Z0JBQUlELFdBQVU7MEJBQ2QsNEVBQUNFO29CQUFJQyxLQUFJO29CQUFvQkgsV0FBVTtvQkFBMkJJLEtBQUk7Ozs7Ozs7Ozs7OzBCQUV2RSw4REFBQ0g7Z0JBQUlELFdBQVU7O2tDQUNkLDhEQUFDSzt3QkFBR0wsV0FBVTtrQ0FBc0JKOzs7Ozs7a0NBQ3BDLDhEQUFDVTt3QkFBRU4sV0FBVTtrQ0FBOEJIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJL0MsQ0FBQztLQVp1QkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9CYW5uZXIudHN4P2FjNzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIFByb3BzIHtcblx0dGl0bGU6IHN0cmluZ1xuXHRkZXNjcmlwdGlvbjogc3RyaW5nXG5cdGlsbHVzdHJhdGlvbj86ICdkZWZhdWx0JyB8ICdnbGFzc2VzJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYW5uZXIoeyB0aXRsZSwgZGVzY3JpcHRpb24sIGlsbHVzdHJhdGlvbiA9ICdkZWZhdWx0JyB9OiBQcm9wcykge1xuXHRyZXR1cm4gKFxuXHRcdDxzZWN0aW9uIGNsYXNzTmFtZT0nYmctZ3JheS04MDAgdy1mdWxsIHJvdW5kZWQtMnhsIGgtMzYgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTEwIHB4LTQnPlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9J3ctNDAgaC1mdWxsIHJlbGF0aXZlJz5cblx0XHRcdFx0PGltZyBzcmM9Jy9hdmF0YXItdG9yc28ucG5nJyBjbGFzc05hbWU9J2Fic29sdXRlIGJvdHRvbS0wIGxlZnQtMScgYWx0PScnIC8+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPSdmbGV4IGZsZXgtY29sIGdhcC0xIHRleHQtd2hpdGUnPlxuXHRcdFx0XHQ8aDIgY2xhc3NOYW1lPSd0ZXh0LTN4bCBmb250LWJvbGQnPnt0aXRsZX08L2gyPlxuXHRcdFx0XHQ8cCBjbGFzc05hbWU9J3RleHQtZ3JheS0zMDAgZm9udC1tZWRpdW0gJz57ZGVzY3JpcHRpb259PC9wPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9zZWN0aW9uPlxuXHQpXG59XG4iXSwibmFtZXMiOlsiQmFubmVyIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImlsbHVzdHJhdGlvbiIsInNlY3Rpb24iLCJjbGFzc05hbWUiLCJkaXYiLCJpbWciLCJzcmMiLCJhbHQiLCJoMiIsInAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Banner.tsx\n"));

/***/ }),

/***/ "./components/Collapsable.tsx":
/*!************************************!*\
  !*** ./components/Collapsable.tsx ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Collapsable; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction Collapsable(param) {\n    let { children , label , tag , open  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"details\", {\n        className: \"group\",\n        open: open,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"summary\", {\n                className: \"py-2.5 px-4 cursor-pointer rounded-md flex items-center justify-between hover:bg-gray-100 transition-all active:scale-[0.98] focus-visible:outline-none focus-visible:ring focus-visible:ring-blue-500 group-open:bg-gray-50 hover:group-open:bg-gray-100 hover:text-gray-900 group-open:text-gray-900\",\n                children: [\n                    label,\n                    tag && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"bg-gray-200 capitalize text-black font-medium text-xs rounded-full px-2.5 py-1\",\n                        children: tag\n                    }, void 0, false, {\n                        fileName: \"/opt/projects/blog/components/Collapsable.tsx\",\n                        lineNumber: 14,\n                        columnNumber: 6\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/opt/projects/blog/components/Collapsable.tsx\",\n                lineNumber: 11,\n                columnNumber: 4\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"px-4 -mt-2 rounded-md  group-open:mb-4\",\n                children: children\n            }, void 0, false, {\n                fileName: \"/opt/projects/blog/components/Collapsable.tsx\",\n                lineNumber: 17,\n                columnNumber: 4\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/opt/projects/blog/components/Collapsable.tsx\",\n        lineNumber: 10,\n        columnNumber: 3\n    }, this);\n}\n_c = Collapsable;\nvar _c;\n$RefreshReg$(_c, \"Collapsable\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0NvbGxhcHNhYmxlLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT2UsU0FBU0EsWUFBWSxLQUFxQyxFQUFFO1FBQXZDLEVBQUVDLFNBQVEsRUFBRUMsTUFBSyxFQUFFQyxJQUFHLEVBQUVDLEtBQUksRUFBUyxHQUFyQztJQUNuQyxxQkFDQyw4REFBQ0M7UUFBUUMsV0FBVTtRQUFRRixNQUFNQTs7MEJBQ2hDLDhEQUFDRztnQkFBUUQsV0FBVTs7b0JBQ2pCSjtvQkFDQUMscUJBQ0EsOERBQUNLO3dCQUFLRixXQUFVO2tDQUFrRkg7Ozs7Ozs7Ozs7OzswQkFHcEcsOERBQUNNO2dCQUFJSCxXQUFVOzBCQUEwQ0w7Ozs7Ozs7Ozs7OztBQUc1RCxDQUFDO0tBWnVCRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL0NvbGxhcHNhYmxlLnRzeD85N2I5Il0sInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBQcm9wcyB7XG5cdGxhYmVsOiBzdHJpbmdcblx0Y2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuXHR0YWc/OiBzdHJpbmdcblx0b3Blbj86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29sbGFwc2FibGUoeyBjaGlsZHJlbiwgbGFiZWwsIHRhZywgb3BlbiB9OiBQcm9wcykge1xuXHRyZXR1cm4gKFxuXHRcdDxkZXRhaWxzIGNsYXNzTmFtZT0nZ3JvdXAnIG9wZW49e29wZW59PlxuXHRcdFx0PHN1bW1hcnkgY2xhc3NOYW1lPSdweS0yLjUgcHgtNCBjdXJzb3ItcG9pbnRlciByb3VuZGVkLW1kIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBob3ZlcjpiZy1ncmF5LTEwMCB0cmFuc2l0aW9uLWFsbCBhY3RpdmU6c2NhbGUtWzAuOThdIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZyBmb2N1cy12aXNpYmxlOnJpbmctYmx1ZS01MDAgZ3JvdXAtb3BlbjpiZy1ncmF5LTUwIGhvdmVyOmdyb3VwLW9wZW46YmctZ3JheS0xMDAgaG92ZXI6dGV4dC1ncmF5LTkwMCBncm91cC1vcGVuOnRleHQtZ3JheS05MDAnPlxuXHRcdFx0XHR7bGFiZWx9XG5cdFx0XHRcdHt0YWcgJiYgKFxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT0nYmctZ3JheS0yMDAgY2FwaXRhbGl6ZSB0ZXh0LWJsYWNrIGZvbnQtbWVkaXVtIHRleHQteHMgcm91bmRlZC1mdWxsIHB4LTIuNSBweS0xJz57dGFnfTwvc3Bhbj5cblx0XHRcdFx0KX1cblx0XHRcdDwvc3VtbWFyeT5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPSdweC00IC1tdC0yIHJvdW5kZWQtbWQgIGdyb3VwLW9wZW46bWItNCc+e2NoaWxkcmVufTwvZGl2PlxuXHRcdDwvZGV0YWlscz5cblx0KVxufVxuIl0sIm5hbWVzIjpbIkNvbGxhcHNhYmxlIiwiY2hpbGRyZW4iLCJsYWJlbCIsInRhZyIsIm9wZW4iLCJkZXRhaWxzIiwiY2xhc3NOYW1lIiwic3VtbWFyeSIsInNwYW4iLCJkaXYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Collapsable.tsx\n"));

/***/ }),

/***/ "./components/Header.tsx":
/*!*******************************!*\
  !*** ./components/Header.tsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Header; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @utils/config */ \"./utils/config.ts\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);\n\nvar _s = $RefreshSig$();\n\n\n\nfunction Header() {\n    _s();\n    const { pathname  } = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const isInPath = (path)=>pathname === path;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n        className: \"flex justify-between items-center gap-4 py-4 bg-white bg-opacity-60 backdrop-blur-md  \",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_3___default()), {\n                href: \"/about\",\n                className: \"rounded-md bg-white text-gray-800 py-2 px-3 font-semibold active:scale-95 transition-all whitespace-nowrap\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                    src: \"/avatar.png\",\n                    alt: \"icon\",\n                    className: \"w-10 h-10\"\n                }, void 0, false, {\n                    fileName: \"/opt/projects/blog/components/Header.tsx\",\n                    lineNumber: 17,\n                    columnNumber: 4\n                }, this)\n            }, void 0, false, {\n                fileName: \"/opt/projects/blog/components/Header.tsx\",\n                lineNumber: 13,\n                columnNumber: 4\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"nav\", {\n                className: \" flex gap-4\",\n                children: _utils_config__WEBPACK_IMPORTED_MODULE_1__.HEADER_LINKS.map((link, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_3___default()), {\n                        href: link.path,\n                        className: \"px-3 py-2 capitalize font-medium hover:bg-gray-100 rounded-lg hover:text-black transition-all active:scale-95 \".concat(isInPath(link.path) ? \"bg-gray-100 text-gray-900\" : \"text-gray-500\"),\n                        children: link.name\n                    }, link.name + index, false, {\n                        fileName: \"/opt/projects/blog/components/Header.tsx\",\n                        lineNumber: 21,\n                        columnNumber: 6\n                    }, this))\n            }, void 0, false, {\n                fileName: \"/opt/projects/blog/components/Header.tsx\",\n                lineNumber: 19,\n                columnNumber: 4\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex gap-1\"\n            }, void 0, false, {\n                fileName: \"/opt/projects/blog/components/Header.tsx\",\n                lineNumber: 39,\n                columnNumber: 4\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/opt/projects/blog/components/Header.tsx\",\n        lineNumber: 12,\n        columnNumber: 3\n    }, this);\n}\n_s(Header, \"QpP2vYJstxsDz0K+Qwttl8PPVoY=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0hlYWRlci50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUE0QztBQUNMO0FBQ1g7QUFJYixTQUFTRyxTQUFTOztJQUNoQyxNQUFNLEVBQUVDLFNBQVEsRUFBRSxHQUFHSCxzREFBU0E7SUFDOUIsTUFBTUksV0FBVyxDQUFDQyxPQUFpQkYsYUFBYUU7SUFFaEQscUJBQ0MsOERBQUNDO1FBQU9DLFdBQVU7OzBCQUNqQiw4REFBQ04sa0RBQUlBO2dCQUNKTyxNQUFLO2dCQUNMRCxXQUFVOzBCQUVYLDRFQUFDRTtvQkFBSUMsS0FBSTtvQkFBY0MsS0FBSTtvQkFBT0osV0FBVTs7Ozs7Ozs7Ozs7MEJBRTVDLDhEQUFDSztnQkFBSUwsV0FBVTswQkFDYlIsMkRBQWdCLENBQUMsQ0FBQ2UsTUFBTUMsc0JBQ3hCLDhEQUFDZCxrREFBSUE7d0JBRUpPLE1BQU1NLEtBQUtULElBQUk7d0JBQ2ZFLFdBQVcsaUhBRVYsT0FEQUgsU0FBU1UsS0FBS1QsSUFBSSxJQUFJLDhCQUE4QixlQUFlO2tDQUduRVMsS0FBS0UsSUFBSTt1QkFOTEYsS0FBS0UsSUFBSSxHQUFHRDs7Ozs7Ozs7OzswQkFpQnBCLDhEQUFDRTtnQkFBSVYsV0FBVTs7Ozs7Ozs7Ozs7O0FBR2xCLENBQUM7R0FuQ3VCTDs7UUFDRkYsa0RBQVNBOzs7S0FEUEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9IZWFkZXIudHN4PzAzNjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSEVBREVSX0xJTktTIH0gZnJvbSAnQHV0aWxzL2NvbmZpZydcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJ1xuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xuaW1wb3J0IHsgRmFGb2xkZXIsIEZhR2l0aHViLCBGYUxpbmsgfSBmcm9tIFwicmVhY3QtaWNvbnMvZmFcIjtcbmltcG9ydCB7IEljb25Db250ZXh0IH0gZnJvbSBcInJlYWN0LWljb25zXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhlYWRlcigpIHtcblx0Y29uc3QgeyBwYXRobmFtZSB9ID0gdXNlUm91dGVyKClcblx0Y29uc3QgaXNJblBhdGggPSAocGF0aDogc3RyaW5nKSA9PiBwYXRobmFtZSA9PT0gcGF0aFxuXG5cdHJldHVybiAoXG5cdFx0PGhlYWRlciBjbGFzc05hbWU9J2ZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlciBnYXAtNCBweS00IGJnLXdoaXRlIGJnLW9wYWNpdHktNjAgYmFja2Ryb3AtYmx1ci1tZCAgJz5cblx0XHRcdDxMaW5rXG5cdFx0XHRcdGhyZWY9Jy9hYm91dCdcblx0XHRcdFx0Y2xhc3NOYW1lPSdyb3VuZGVkLW1kIGJnLXdoaXRlIHRleHQtZ3JheS04MDAgcHktMiBweC0zIGZvbnQtc2VtaWJvbGQgYWN0aXZlOnNjYWxlLTk1IHRyYW5zaXRpb24tYWxsIHdoaXRlc3BhY2Utbm93cmFwJ1xuXHRcdFx0PlxuXHRcdFx0PGltZyBzcmM9Jy9hdmF0YXIucG5nJyBhbHQ9J2ljb24nIGNsYXNzTmFtZT0ndy0xMCBoLTEwJyAvPlxuXHRcdFx0PC9MaW5rPlxuXHRcdFx0PG5hdiBjbGFzc05hbWU9JyBmbGV4IGdhcC00Jz5cblx0XHRcdFx0e0hFQURFUl9MSU5LUy5tYXAoKGxpbmssIGluZGV4KSA9PiAoXG5cdFx0XHRcdFx0PExpbmtcblx0XHRcdFx0XHRcdGtleT17bGluay5uYW1lICsgaW5kZXh9XG5cdFx0XHRcdFx0XHRocmVmPXtsaW5rLnBhdGh9XG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e2BweC0zIHB5LTIgY2FwaXRhbGl6ZSBmb250LW1lZGl1bSBob3ZlcjpiZy1ncmF5LTEwMCByb3VuZGVkLWxnIGhvdmVyOnRleHQtYmxhY2sgdHJhbnNpdGlvbi1hbGwgYWN0aXZlOnNjYWxlLTk1ICR7XG5cdFx0XHRcdFx0XHRcdGlzSW5QYXRoKGxpbmsucGF0aCkgPyAnYmctZ3JheS0xMDAgdGV4dC1ncmF5LTkwMCcgOiAndGV4dC1ncmF5LTUwMCdcblx0XHRcdFx0XHRcdH1gfVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdHtsaW5rLm5hbWV9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHsvKiA8SWNvbkNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgc2l6ZTogXCIxLjVlbVwifX0+XG5cdFx0XHRcdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdFx0XHRcdDxGYUdpdGh1YiAvPlxuXHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHRcdDwvSWNvbkNvbnRleHQuUHJvdmlkZXI+ICovfVxuXHRcdFx0XHRcdDwvTGluaz5cblx0XHRcdFx0KSl9XG5cdFx0XHQ8L25hdj5cblxuXHRcdFx0PGRpdiBjbGFzc05hbWU9J2ZsZXggZ2FwLTEnPjwvZGl2PlxuXHRcdDwvaGVhZGVyPlxuXHQpXG59XG4iXSwibmFtZXMiOlsiSEVBREVSX0xJTktTIiwidXNlUm91dGVyIiwiTGluayIsIkhlYWRlciIsInBhdGhuYW1lIiwiaXNJblBhdGgiLCJwYXRoIiwiaGVhZGVyIiwiY2xhc3NOYW1lIiwiaHJlZiIsImltZyIsInNyYyIsImFsdCIsIm5hdiIsIm1hcCIsImxpbmsiLCJpbmRleCIsIm5hbWUiLCJkaXYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Header.tsx\n"));

/***/ }),

/***/ "./layouts/Page.tsx":
/*!**************************!*\
  !*** ./layouts/Page.tsx ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Page; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @components/Header */ \"./components/Header.tsx\");\n\n\nfunction Page(param) {\n    let { title , description , children , footer , hideHeader  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"max-w-screen-lg mx-auto grid gap-4 pb-32 px-14\",\n        children: [\n            !hideHeader && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Header__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {}, void 0, false, {\n                fileName: \"/opt/projects/blog/layouts/Page.tsx\",\n                lineNumber: 15,\n                columnNumber: 20\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: \"pt-10 grid gap-4\",\n                children: children\n            }, void 0, false, {\n                fileName: \"/opt/projects/blog/layouts/Page.tsx\",\n                lineNumber: 16,\n                columnNumber: 4\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/opt/projects/blog/layouts/Page.tsx\",\n        lineNumber: 14,\n        columnNumber: 3\n    }, this);\n}\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9sYXlvdXRzL1BhZ2UudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQ3VDO0FBVXhCLFNBQVNDLEtBQUssS0FBMkQsRUFBRTtRQUE3RCxFQUFFQyxNQUFLLEVBQUVDLFlBQVcsRUFBRUMsU0FBUSxFQUFFQyxPQUFNLEVBQUVDLFdBQVUsRUFBUyxHQUEzRDtJQUM1QixxQkFDQyw4REFBQ0M7UUFBSUMsV0FBVTs7WUFDYixDQUFDRiw0QkFBYyw4REFBQ04sMERBQU1BOzs7OzswQkFDdkIsOERBQUNTO2dCQUFLRCxXQUFVOzBCQUFvQko7Ozs7Ozs7Ozs7OztBQUd2QyxDQUFDO0tBUHVCSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9sYXlvdXRzL1BhZ2UudHN4PzEzYTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuaW1wb3J0IEhlYWRlciBmcm9tICdAY29tcG9uZW50cy9IZWFkZXInXG5cbmludGVyZmFjZSBQcm9wcyB7XG5cdHRpdGxlOiBzdHJpbmdcblx0ZGVzY3JpcHRpb246IHN0cmluZ1xuXHRjaGlsZHJlbjogSlNYLkVsZW1lbnQgfCBKU1guRWxlbWVudFtdXG5cdGZvb3Rlcj86IGJvb2xlYW5cblx0aGlkZUhlYWRlcj86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnZSh7IHRpdGxlLCBkZXNjcmlwdGlvbiwgY2hpbGRyZW4sIGZvb3RlciwgaGlkZUhlYWRlciB9OiBQcm9wcykge1xuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPSdtYXgtdy1zY3JlZW4tbGcgbXgtYXV0byBncmlkIGdhcC00IHBiLTMyIHB4LTE0Jz5cblx0XHRcdHshaGlkZUhlYWRlciAmJiA8SGVhZGVyIC8+fVxuXHRcdFx0PG1haW4gY2xhc3NOYW1lPSdwdC0xMCBncmlkIGdhcC00Jz57Y2hpbGRyZW59PC9tYWluPlxuXHRcdDwvZGl2PlxuXHQpXG59XG4iXSwibmFtZXMiOlsiSGVhZGVyIiwiUGFnZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJjaGlsZHJlbiIsImZvb3RlciIsImhpZGVIZWFkZXIiLCJkaXYiLCJjbGFzc05hbWUiLCJtYWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./layouts/Page.tsx\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/get-domain-locale.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/client/get-domain-locale.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return getDomainLocale;\n    }\n}));\nconst basePath =  false || \"\";\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) {} else {\n        return false;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=get-domain-locale.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU8sSUFBSTtBQUNmLENBQUMsRUFBQztBQUNGSCxtREFBa0Q7SUFDOUNJLFlBQVksSUFBSTtJQUNoQkMsS0FBSyxXQUFXO1FBQ1osT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFdBQVdDLE1BQWtDLElBQUk7QUFDdkQsU0FBU0YsZ0JBQWdCSyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxhQUFhLEVBQUU7SUFDM0QsSUFBSU4sS0FBK0IsRUFBRSxFQVdwQyxNQUFNO1FBQ0gsT0FBTyxLQUFLO0lBQ2hCLENBQUM7QUFDTDtBQUVBLElBQUksQ0FBQyxPQUFPTixRQUFReUIsT0FBTyxLQUFLLGNBQWUsT0FBT3pCLFFBQVF5QixPQUFPLEtBQUssWUFBWXpCLFFBQVF5QixPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU96QixRQUFReUIsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNySzVCLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUXlCLE9BQU8sRUFBRSxjQUFjO1FBQUV4QixPQUFPLElBQUk7SUFBQztJQUNuRUgsT0FBTzZCLE1BQU0sQ0FBQzNCLFFBQVF5QixPQUFPLEVBQUV6QjtJQUMvQjRCLE9BQU81QixPQUFPLEdBQUdBLFFBQVF5QixPQUFPO0FBQ2xDLENBQUMsQ0FFRCw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZ2V0LWRvbWFpbi1sb2NhbGUuanM/NWMyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldERvbWFpbkxvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0RG9tYWluTG9jYWxlO1xuICAgIH1cbn0pO1xuY29uc3QgYmFzZVBhdGggPSBwcm9jZXNzLmVudi5fX05FWFRfUk9VVEVSX0JBU0VQQVRIIHx8ICcnO1xuZnVuY3Rpb24gZ2V0RG9tYWluTG9jYWxlKHBhdGgsIGxvY2FsZSwgbG9jYWxlcywgZG9tYWluTG9jYWxlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZUxvY2FsZVBhdGggPSByZXF1aXJlKCcuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aCcpLm5vcm1hbGl6ZUxvY2FsZVBhdGg7XG4gICAgICAgIGNvbnN0IGRldGVjdERvbWFpbkxvY2FsZSA9IHJlcXVpcmUoJy4vZGV0ZWN0LWRvbWFpbi1sb2NhbGUnKS5kZXRlY3REb21haW5Mb2NhbGU7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGxvY2FsZSB8fCBub3JtYWxpemVMb2NhbGVQYXRoKHBhdGgsIGxvY2FsZXMpLmRldGVjdGVkTG9jYWxlO1xuICAgICAgICBjb25zdCBkb21haW4gPSBkZXRlY3REb21haW5Mb2NhbGUoZG9tYWluTG9jYWxlcywgdW5kZWZpbmVkLCB0YXJnZXQpO1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICBjb25zdCBwcm90byA9IGBodHRwJHtkb21haW4uaHR0cCA/ICcnIDogJ3MnfTovL2A7XG4gICAgICAgICAgICBjb25zdCBmaW5hbExvY2FsZSA9IHRhcmdldCA9PT0gZG9tYWluLmRlZmF1bHRMb2NhbGUgPyAnJyA6IGAvJHt0YXJnZXR9YDtcbiAgICAgICAgICAgIHJldHVybiBgJHtwcm90b30ke2RvbWFpbi5kb21haW59JHtiYXNlUGF0aH0ke2ZpbmFsTG9jYWxlfSR7cGF0aH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtZG9tYWluLWxvY2FsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2V0RG9tYWluTG9jYWxlIiwiYmFzZVBhdGgiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1JPVVRFUl9CQVNFUEFUSCIsInBhdGgiLCJsb2NhbGUiLCJsb2NhbGVzIiwiZG9tYWluTG9jYWxlcyIsIl9fTkVYVF9JMThOX1NVUFBPUlQiLCJub3JtYWxpemVMb2NhbGVQYXRoIiwicmVxdWlyZSIsImRldGVjdERvbWFpbkxvY2FsZSIsInRhcmdldCIsImRldGVjdGVkTG9jYWxlIiwiZG9tYWluIiwidW5kZWZpbmVkIiwicHJvdG8iLCJodHRwIiwiZmluYWxMb2NhbGUiLCJkZWZhdWx0TG9jYWxlIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/get-domain-locale.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$();\n\"use client\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nconst _extends = __webpack_require__(/*! @swc/helpers/_/_extends */ \"./node_modules/@swc/helpers/esm/_extends.js\");\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _object_without_properties_loose = __webpack_require__(/*! @swc/helpers/_/_object_without_properties_loose */ \"./node_modules/@swc/helpers/esm/_object_without_properties_loose.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nconst _resolvehref = __webpack_require__(/*! ../shared/lib/router/utils/resolve-href */ \"./node_modules/next/dist/shared/lib/router/utils/resolve-href.js\");\nconst _islocalurl = __webpack_require__(/*! ../shared/lib/router/utils/is-local-url */ \"./node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\nconst _formaturl = __webpack_require__(/*! ../shared/lib/router/utils/format-url */ \"./node_modules/next/dist/shared/lib/router/utils/format-url.js\");\nconst _utils = __webpack_require__(/*! ../shared/lib/utils */ \"./node_modules/next/dist/shared/lib/utils.js\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\nconst _routercontext = __webpack_require__(/*! ../shared/lib/router-context */ \"./node_modules/next/dist/shared/lib/router-context.js\");\nconst _approutercontext = __webpack_require__(/*! ../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\nconst _useintersection = __webpack_require__(/*! ./use-intersection */ \"./node_modules/next/dist/client/use-intersection.js\");\nconst _getdomainlocale = __webpack_require__(/*! ./get-domain-locale */ \"./node_modules/next/dist/client/get-domain-locale.js\");\nconst _addbasepath = __webpack_require__(/*! ./add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\nconst prefetched = new Set();\nfunction prefetch(router, href, as, options, isAppRouter) {\n    if (false) {}\n    // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    if (!isAppRouter && !(0, _islocalurl.isLocalURL)(href)) {\n        return;\n    }\n    // We should only dedupe requests when experimental.optimisticClientCache is\n    // disabled.\n    if (!options.bypassPrefetchedCheck) {\n        const locale = typeof options.locale !== \"undefined\" ? options.locale : \"locale\" in router ? router.locale : undefined;\n        const prefetchedKey = href + \"%\" + as + \"%\" + locale;\n        // If we've already fetched the key, then don't prefetch it again!\n        if (prefetched.has(prefetchedKey)) {\n            return;\n        }\n        // Mark this URL as prefetched.\n        prefetched.add(prefetchedKey);\n    }\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    Promise.resolve(router.prefetch(href, as, options)).catch((err)=>{\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n}\nfunction isModifiedEvent(event) {\n    const eventTarget = event.currentTarget;\n    const target = eventTarget.getAttribute(\"target\");\n    return target && target !== \"_self\" || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download\n    event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter, prefetchEnabled) {\n    const { nodeName  } = e.currentTarget;\n    // anchors inside an svg have a lowercase nodeName\n    const isAnchorNodeName = nodeName.toUpperCase() === \"A\";\n    if (isAnchorNodeName && (isModifiedEvent(e) || // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    !isAppRouter && !(0, _islocalurl.isLocalURL)(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    const navigate = ()=>{\n        // If the router is an NextRouter instance it will have `beforePopState`\n        if (\"beforePopState\" in router) {\n            router[replace ? \"replace\" : \"push\"](href, as, {\n                shallow,\n                locale,\n                scroll\n            });\n        } else {\n            router[replace ? \"replace\" : \"push\"](as || href, {\n                forceOptimisticNavigation: !prefetchEnabled\n            });\n        }\n    };\n    if (isAppRouter) {\n        _react.default.startTransition(navigate);\n    } else {\n        navigate();\n    }\n}\nfunction formatStringOrUrl(urlObjOrString) {\n    if (typeof urlObjOrString === \"string\") {\n        return urlObjOrString;\n    }\n    return (0, _formaturl.formatUrl)(urlObjOrString);\n}\n/**\n * React Component that enables client-side transitions between routes.\n */ const Link = /*#__PURE__*/ _s(_react.default.forwardRef(_c = _s(function LinkComponent(props, forwardedRef) {\n    _s();\n    if (true) {\n        function createPropError(args) {\n            return new Error(\"Failed prop type: The prop `\".concat(args.key, \"` expects a \").concat(args.expected, \" in `<Link>`, but got `\").concat(args.actual, \"` instead.\") + ( true ? \"\\nOpen your browser's console to view the Component stack trace.\" : 0));\n        }\n        // TypeScript trick for type-guarding:\n        const requiredPropsGuard = {\n            href: true\n        };\n        const requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach((key)=>{\n            if (key === \"href\") {\n                if (props[key] == null || typeof props[key] !== \"string\" && typeof props[key] !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: props[key] === null ? \"null\" : typeof props[key]\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        const optionalPropsGuard = {\n            as: true,\n            replace: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true,\n            onClick: true,\n            onMouseEnter: true,\n            onTouchStart: true,\n            legacyBehavior: true\n        };\n        const optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach((key)=>{\n            const valType = typeof props[key];\n            if (key === \"as\") {\n                if (props[key] && valType !== \"string\" && valType !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"locale\") {\n                if (props[key] && valType !== \"string\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"onClick\" || key === \"onMouseEnter\" || key === \"onTouchStart\") {\n                if (props[key] && valType !== \"function\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`function`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"replace\" || key === \"scroll\" || key === \"shallow\" || key === \"passHref\" || key === \"prefetch\" || key === \"legacyBehavior\") {\n                if (props[key] != null && valType !== \"boolean\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`boolean`\",\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current) {\n            hasWarned.current = true;\n            console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\");\n        }\n    }\n    let children;\n    const { href: hrefProp , as: asProp , children: childrenProp , prefetch: prefetchProp , passHref , replace , shallow , scroll , locale , onClick , onMouseEnter: onMouseEnterProp , onTouchStart: onTouchStartProp , legacyBehavior =true === false  } = props, restProps = _object_without_properties_loose._(props, [\n        \"href\",\n        \"as\",\n        \"children\",\n        \"prefetch\",\n        \"passHref\",\n        \"replace\",\n        \"shallow\",\n        \"scroll\",\n        \"locale\",\n        \"onClick\",\n        \"onMouseEnter\",\n        \"onTouchStart\",\n        \"legacyBehavior\"\n    ]);\n    children = childrenProp;\n    if (legacyBehavior && (typeof children === \"string\" || typeof children === \"number\")) {\n        children = /*#__PURE__*/ _react.default.createElement(\"a\", null, children);\n    }\n    const prefetchEnabled = prefetchProp !== false;\n    const pagesRouter = _react.default.useContext(_routercontext.RouterContext);\n    const appRouter = _react.default.useContext(_approutercontext.AppRouterContext);\n    const router = pagesRouter != null ? pagesRouter : appRouter;\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter;\n    if (true) {\n        if (isAppRouter && !asProp) {\n            let href;\n            if (typeof hrefProp === \"string\") {\n                href = hrefProp;\n            } else if (typeof hrefProp === \"object\" && typeof hrefProp.pathname === \"string\") {\n                href = hrefProp.pathname;\n            }\n            if (href) {\n                const hasDynamicSegment = href.split(\"/\").some((segment)=>segment.startsWith(\"[\") && segment.endsWith(\"]\"));\n                if (hasDynamicSegment) {\n                    throw new Error(\"Dynamic href `\".concat(href, \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\"));\n                }\n            }\n        }\n    }\n    const { href , as  } = _react.default.useMemo(()=>{\n        if (!pagesRouter) {\n            const resolvedHref = formatStringOrUrl(hrefProp);\n            return {\n                href: resolvedHref,\n                as: asProp ? formatStringOrUrl(asProp) : resolvedHref\n            };\n        }\n        const [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(pagesRouter, hrefProp, true);\n        return {\n            href: resolvedHref,\n            as: asProp ? (0, _resolvehref.resolveHref)(pagesRouter, asProp) : resolvedAs || resolvedHref\n        };\n    }, [\n        pagesRouter,\n        hrefProp,\n        asProp\n    ]);\n    const previousHref = _react.default.useRef(href);\n    const previousAs = _react.default.useRef(as);\n    // This will return the first child, if multiple are provided it will throw an error\n    let child;\n    if (legacyBehavior) {\n        if (true) {\n            if (onClick) {\n                console.warn('\"onClick\" was passed to <Link> with `href` of `'.concat(hrefProp, '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link'));\n            }\n            if (onMouseEnterProp) {\n                console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `'.concat(hrefProp, '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link'));\n            }\n            try {\n                child = _react.default.Children.only(children);\n            } catch (err) {\n                if (!children) {\n                    throw new Error(\"No children were passed to <Link> with `href` of `\".concat(hrefProp, \"` but one child is required https://nextjs.org/docs/messages/link-no-children\"));\n                }\n                throw new Error(\"Multiple children were passed to <Link> with `href` of `\".concat(hrefProp, \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\") + ( true ? \" \\nOpen your browser's console to view the Component stack trace.\" : 0));\n            }\n        } else {}\n    } else {\n        if (true) {\n            if ((children == null ? void 0 : children.type) === \"a\") {\n                throw new Error(\"Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor\");\n            }\n        }\n    }\n    const childRef = legacyBehavior ? child && typeof child === \"object\" && child.ref : forwardedRef;\n    const [setIntersectionRef, isVisible, resetVisible] = (0, _useintersection.useIntersection)({\n        rootMargin: \"200px\"\n    });\n    const setRef = _react.default.useCallback((el)=>{\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n            resetVisible();\n            previousAs.current = as;\n            previousHref.current = href;\n        }\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === \"function\") childRef(el);\n            else if (typeof childRef === \"object\") {\n                childRef.current = el;\n            }\n        }\n    }, [\n        as,\n        childRef,\n        href,\n        resetVisible,\n        setIntersectionRef\n    ]);\n    // Prefetch the URL if we haven't already and it's visible.\n    _react.default.useEffect(()=>{\n        // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n        if (true) {\n            return;\n        }\n        if (!router) {\n            return;\n        }\n        // If we don't need to prefetch the URL, don't do prefetch.\n        if (!isVisible || !prefetchEnabled) {\n            return;\n        }\n        // Prefetch the URL.\n        prefetch(router, href, as, {\n            locale\n        }, isAppRouter);\n    }, [\n        as,\n        href,\n        isVisible,\n        locale,\n        prefetchEnabled,\n        pagesRouter == null ? void 0 : pagesRouter.locale,\n        router,\n        isAppRouter\n    ]);\n    const childProps = {\n        ref: setRef,\n        onClick (e) {\n            if (true) {\n                if (!e) {\n                    throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n                }\n            }\n            if (!legacyBehavior && typeof onClick === \"function\") {\n                onClick(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onClick === \"function\") {\n                child.props.onClick(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (e.defaultPrevented) {\n                return;\n            }\n            linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter, prefetchEnabled);\n        },\n        onMouseEnter (e) {\n            if (!legacyBehavior && typeof onMouseEnterProp === \"function\") {\n                onMouseEnterProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === \"function\") {\n                child.props.onMouseEnter(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, isAppRouter);\n        },\n        onTouchStart (e) {\n            if (!legacyBehavior && typeof onTouchStartProp === \"function\") {\n                onTouchStartProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onTouchStart === \"function\") {\n                child.props.onTouchStart(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, isAppRouter);\n        }\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user.\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if ((0, _utils.isAbsoluteUrl)(as)) {\n        childProps.href = as;\n    } else if (!legacyBehavior || passHref || child.type === \"a\" && !(\"href\" in child.props)) {\n        const curLocale = typeof locale !== \"undefined\" ? locale : pagesRouter == null ? void 0 : pagesRouter.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getdomainlocale.getDomainLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);\n        childProps.href = localeDomain || (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));\n    }\n    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ _react.default.createElement(\"a\", _extends._({}, restProps, childProps), children);\n}, \"iGdYZW22TllPihoUFJYL0qIKigo=\")), \"iGdYZW22TllPihoUFJYL0qIKigo=\");\n_c1 = Link;\nconst _default = Link;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=link.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Link$_react.default.forwardRef\");\n$RefreshReg$(_c1, \"Link\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/link.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useIntersection\", ({\n    enumerable: true,\n    get: function() {\n        return useIntersection;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nconst _requestidlecallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\nconst hasIntersectionObserver = typeof IntersectionObserver === \"function\";\nconst observers = new Map();\nconst idList = [];\nfunction createObserver(options) {\n    const id = {\n        root: options.root || null,\n        margin: options.rootMargin || \"\"\n    };\n    const existing = idList.find((obj)=>obj.root === id.root && obj.margin === id.margin);\n    let instance;\n    if (existing) {\n        instance = observers.get(existing);\n        if (instance) {\n            return instance;\n        }\n    }\n    const elements = new Map();\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            const callback = elements.get(entry.target);\n            const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n            if (callback && isVisible) {\n                callback(isVisible);\n            }\n        });\n    }, options);\n    instance = {\n        id,\n        observer,\n        elements\n    };\n    idList.push(id);\n    observers.set(id, instance);\n    return instance;\n}\nfunction observe(element, callback, options) {\n    const { id , observer , elements  } = createObserver(options);\n    elements.set(element, callback);\n    observer.observe(element);\n    return function unobserve() {\n        elements.delete(element);\n        observer.unobserve(element);\n        // Destroy observer when there's nothing left to watch:\n        if (elements.size === 0) {\n            observer.disconnect();\n            observers.delete(id);\n            const index = idList.findIndex((obj)=>obj.root === id.root && obj.margin === id.margin);\n            if (index > -1) {\n                idList.splice(index, 1);\n            }\n        }\n    };\n}\nfunction useIntersection(param) {\n    let { rootRef , rootMargin , disabled  } = param;\n    const isDisabled = disabled || !hasIntersectionObserver;\n    const [visible, setVisible] = (0, _react.useState)(false);\n    const elementRef = (0, _react.useRef)(null);\n    const setElement = (0, _react.useCallback)((element)=>{\n        elementRef.current = element;\n    }, []);\n    (0, _react.useEffect)(()=>{\n        if (hasIntersectionObserver) {\n            if (isDisabled || visible) return;\n            const element = elementRef.current;\n            if (element && element.tagName) {\n                const unobserve = observe(element, (isVisible)=>isVisible && setVisible(isVisible), {\n                    root: rootRef == null ? void 0 : rootRef.current,\n                    rootMargin\n                });\n                return unobserve;\n            }\n        } else {\n            if (!visible) {\n                const idleCallback = (0, _requestidlecallback.requestIdleCallback)(()=>setVisible(true));\n                return ()=>(0, _requestidlecallback.cancelIdleCallback)(idleCallback);\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isDisabled,\n        rootMargin,\n        rootRef,\n        visible,\n        elementRef.current\n    ]);\n    const resetVisible = (0, _react.useCallback)(()=>{\n        setVisible(false);\n    }, []);\n    return [\n        setElement,\n        visible,\n        resetVisible\n    ];\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-intersection.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC91c2UtaW50ZXJzZWN0aW9uLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZILG1EQUFrRDtJQUM5Q0ksWUFBWSxJQUFJO0lBQ2hCQyxLQUFLLFdBQVc7UUFDWixPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUMsNENBQU87QUFDOUIsTUFBTUMsdUJBQXVCRCxtQkFBT0EsQ0FBQyx5RkFBeUI7QUFDOUQsTUFBTUUsMEJBQTBCLE9BQU9DLHlCQUF5QjtBQUNoRSxNQUFNQyxZQUFZLElBQUlDO0FBQ3RCLE1BQU1DLFNBQVMsRUFBRTtBQUNqQixTQUFTQyxlQUFlQyxPQUFPLEVBQUU7SUFDN0IsTUFBTUMsS0FBSztRQUNQQyxNQUFNRixRQUFRRSxJQUFJLElBQUksSUFBSTtRQUMxQkMsUUFBUUgsUUFBUUksVUFBVSxJQUFJO0lBQ2xDO0lBQ0EsTUFBTUMsV0FBV1AsT0FBT1EsSUFBSSxDQUFDLENBQUNDLE1BQU1BLElBQUlMLElBQUksS0FBS0QsR0FBR0MsSUFBSSxJQUFJSyxJQUFJSixNQUFNLEtBQUtGLEdBQUdFLE1BQU07SUFDcEYsSUFBSUs7SUFDSixJQUFJSCxVQUFVO1FBQ1ZHLFdBQVdaLFVBQVVQLEdBQUcsQ0FBQ2dCO1FBQ3pCLElBQUlHLFVBQVU7WUFDVixPQUFPQTtRQUNYLENBQUM7SUFDTCxDQUFDO0lBQ0QsTUFBTUMsV0FBVyxJQUFJWjtJQUNyQixNQUFNYSxXQUFXLElBQUlmLHFCQUFxQixDQUFDZ0IsVUFBVTtRQUNqREEsUUFBUUMsT0FBTyxDQUFDLENBQUNDLFFBQVE7WUFDckIsTUFBTUMsV0FBV0wsU0FBU3BCLEdBQUcsQ0FBQ3dCLE1BQU1FLE1BQU07WUFDMUMsTUFBTUMsWUFBWUgsTUFBTUksY0FBYyxJQUFJSixNQUFNSyxpQkFBaUIsR0FBRztZQUNwRSxJQUFJSixZQUFZRSxXQUFXO2dCQUN2QkYsU0FBU0U7WUFDYixDQUFDO1FBQ0w7SUFDSixHQUFHaEI7SUFDSFEsV0FBVztRQUNQUDtRQUNBUztRQUNBRDtJQUNKO0lBQ0FYLE9BQU9xQixJQUFJLENBQUNsQjtJQUNaTCxVQUFVd0IsR0FBRyxDQUFDbkIsSUFBSU87SUFDbEIsT0FBT0E7QUFDWDtBQUNBLFNBQVNhLFFBQVFDLE9BQU8sRUFBRVIsUUFBUSxFQUFFZCxPQUFPLEVBQUU7SUFDekMsTUFBTSxFQUFFQyxHQUFFLEVBQUdTLFNBQVEsRUFBR0QsU0FBUSxFQUFHLEdBQUdWLGVBQWVDO0lBQ3JEUyxTQUFTVyxHQUFHLENBQUNFLFNBQVNSO0lBQ3RCSixTQUFTVyxPQUFPLENBQUNDO0lBQ2pCLE9BQU8sU0FBU0MsWUFBWTtRQUN4QmQsU0FBU2UsTUFBTSxDQUFDRjtRQUNoQlosU0FBU2EsU0FBUyxDQUFDRDtRQUNuQix1REFBdUQ7UUFDdkQsSUFBSWIsU0FBU2dCLElBQUksS0FBSyxHQUFHO1lBQ3JCZixTQUFTZ0IsVUFBVTtZQUNuQjlCLFVBQVU0QixNQUFNLENBQUN2QjtZQUNqQixNQUFNMEIsUUFBUTdCLE9BQU84QixTQUFTLENBQUMsQ0FBQ3JCLE1BQU1BLElBQUlMLElBQUksS0FBS0QsR0FBR0MsSUFBSSxJQUFJSyxJQUFJSixNQUFNLEtBQUtGLEdBQUdFLE1BQU07WUFDdEYsSUFBSXdCLFFBQVEsQ0FBQyxHQUFHO2dCQUNaN0IsT0FBTytCLE1BQU0sQ0FBQ0YsT0FBTztZQUN6QixDQUFDO1FBQ0wsQ0FBQztJQUNMO0FBQ0o7QUFDQSxTQUFTckMsZ0JBQWdCLEtBQW9DLEVBQUU7UUFBdEMsRUFBRXdDLFFBQU8sRUFBRzFCLFdBQVUsRUFBRzJCLFNBQVEsRUFBRyxHQUFwQztJQUNyQixNQUFNQyxhQUFhRCxZQUFZLENBQUNyQztJQUNoQyxNQUFNLENBQUN1QyxTQUFTQyxXQUFXLEdBQUcsQ0FBQyxHQUFHM0MsT0FBTzRDLFFBQVEsRUFBRSxLQUFLO0lBQ3hELE1BQU1DLGFBQWEsQ0FBQyxHQUFHN0MsT0FBTzhDLE1BQU0sRUFBRSxJQUFJO0lBQzFDLE1BQU1DLGFBQWEsQ0FBQyxHQUFHL0MsT0FBT2dELFdBQVcsRUFBRSxDQUFDakIsVUFBVTtRQUNsRGMsV0FBV0ksT0FBTyxHQUFHbEI7SUFDekIsR0FBRyxFQUFFO0lBQ0osSUFBRy9CLE9BQU9rRCxTQUFTLEVBQUUsSUFBSTtRQUN0QixJQUFJL0MseUJBQXlCO1lBQ3pCLElBQUlzQyxjQUFjQyxTQUFTO1lBQzNCLE1BQU1YLFVBQVVjLFdBQVdJLE9BQU87WUFDbEMsSUFBSWxCLFdBQVdBLFFBQVFvQixPQUFPLEVBQUU7Z0JBQzVCLE1BQU1uQixZQUFZRixRQUFRQyxTQUFTLENBQUNOLFlBQVlBLGFBQWFrQixXQUFXbEIsWUFBWTtvQkFDaEZkLE1BQU00QixXQUFXLElBQUksR0FBRyxLQUFLLElBQUlBLFFBQVFVLE9BQU87b0JBQ2hEcEM7Z0JBQ0o7Z0JBQ0EsT0FBT21CO1lBQ1gsQ0FBQztRQUNMLE9BQU87WUFDSCxJQUFJLENBQUNVLFNBQVM7Z0JBQ1YsTUFBTVUsZUFBZSxDQUFDLEdBQUdsRCxxQkFBcUJtRCxtQkFBbUIsRUFBRSxJQUFJVixXQUFXLElBQUk7Z0JBQ3RGLE9BQU8sSUFBSSxDQUFDLEdBQUd6QyxxQkFBcUJvRCxrQkFBa0IsRUFBRUY7WUFDNUQsQ0FBQztRQUNMLENBQUM7SUFDTCx1REFBdUQ7SUFDdkQsR0FBRztRQUNDWDtRQUNBNUI7UUFDQTBCO1FBQ0FHO1FBQ0FHLFdBQVdJLE9BQU87S0FDckI7SUFDRCxNQUFNTSxlQUFlLENBQUMsR0FBR3ZELE9BQU9nRCxXQUFXLEVBQUUsSUFBSTtRQUM3Q0wsV0FBVyxLQUFLO0lBQ3BCLEdBQUcsRUFBRTtJQUNMLE9BQU87UUFDSEk7UUFDQUw7UUFDQWE7S0FDSDtBQUNMO0FBRUEsSUFBSSxDQUFDLE9BQU81RCxRQUFRNkQsT0FBTyxLQUFLLGNBQWUsT0FBTzdELFFBQVE2RCxPQUFPLEtBQUssWUFBWTdELFFBQVE2RCxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU83RCxRQUFRNkQsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS2hFLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUTZELE9BQU8sRUFBRSxjQUFjO1FBQUU1RCxPQUFPLElBQUk7SUFBQztJQUNuRUgsT0FBT2lFLE1BQU0sQ0FBQy9ELFFBQVE2RCxPQUFPLEVBQUU3RDtJQUMvQmdFLE9BQU9oRSxPQUFPLEdBQUdBLFFBQVE2RCxPQUFPO0FBQ2xDLENBQUMsQ0FFRCw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvdXNlLWludGVyc2VjdGlvbi5qcz9mZDk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidXNlSW50ZXJzZWN0aW9uXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB1c2VJbnRlcnNlY3Rpb247XG4gICAgfVxufSk7XG5jb25zdCBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCBfcmVxdWVzdGlkbGVjYWxsYmFjayA9IHJlcXVpcmUoXCIuL3JlcXVlc3QtaWRsZS1jYWxsYmFja1wiKTtcbmNvbnN0IGhhc0ludGVyc2VjdGlvbk9ic2VydmVyID0gdHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgb2JzZXJ2ZXJzID0gbmV3IE1hcCgpO1xuY29uc3QgaWRMaXN0ID0gW107XG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZlcihvcHRpb25zKSB7XG4gICAgY29uc3QgaWQgPSB7XG4gICAgICAgIHJvb3Q6IG9wdGlvbnMucm9vdCB8fCBudWxsLFxuICAgICAgICBtYXJnaW46IG9wdGlvbnMucm9vdE1hcmdpbiB8fCAnJ1xuICAgIH07XG4gICAgY29uc3QgZXhpc3RpbmcgPSBpZExpc3QuZmluZCgob2JqKT0+b2JqLnJvb3QgPT09IGlkLnJvb3QgJiYgb2JqLm1hcmdpbiA9PT0gaWQubWFyZ2luKTtcbiAgICBsZXQgaW5zdGFuY2U7XG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgIGluc3RhbmNlID0gb2JzZXJ2ZXJzLmdldChleGlzdGluZyk7XG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnRzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KT0+e1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBlbGVtZW50cy5nZXQoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IGVudHJ5LmlzSW50ZXJzZWN0aW5nIHx8IGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMDtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiBpc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpc1Zpc2libGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCBvcHRpb25zKTtcbiAgICBpbnN0YW5jZSA9IHtcbiAgICAgICAgaWQsXG4gICAgICAgIG9ic2VydmVyLFxuICAgICAgICBlbGVtZW50c1xuICAgIH07XG4gICAgaWRMaXN0LnB1c2goaWQpO1xuICAgIG9ic2VydmVycy5zZXQoaWQsIGluc3RhbmNlKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG59XG5mdW5jdGlvbiBvYnNlcnZlKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBpZCAsIG9ic2VydmVyICwgZWxlbWVudHMgIH0gPSBjcmVhdGVPYnNlcnZlcihvcHRpb25zKTtcbiAgICBlbGVtZW50cy5zZXQoZWxlbWVudCwgY2FsbGJhY2spO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVub2JzZXJ2ZSgpIHtcbiAgICAgICAgZWxlbWVudHMuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgIC8vIERlc3Ryb3kgb2JzZXJ2ZXIgd2hlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byB3YXRjaDpcbiAgICAgICAgaWYgKGVsZW1lbnRzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIG9ic2VydmVycy5kZWxldGUoaWQpO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpZExpc3QuZmluZEluZGV4KChvYmopPT5vYmoucm9vdCA9PT0gaWQucm9vdCAmJiBvYmoubWFyZ2luID09PSBpZC5tYXJnaW4pO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICBpZExpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiB1c2VJbnRlcnNlY3Rpb24oeyByb290UmVmICwgcm9vdE1hcmdpbiAsIGRpc2FibGVkICB9KSB7XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IGRpc2FibGVkIHx8ICFoYXNJbnRlcnNlY3Rpb25PYnNlcnZlcjtcbiAgICBjb25zdCBbdmlzaWJsZSwgc2V0VmlzaWJsZV0gPSAoMCwgX3JlYWN0LnVzZVN0YXRlKShmYWxzZSk7XG4gICAgY29uc3QgZWxlbWVudFJlZiA9ICgwLCBfcmVhY3QudXNlUmVmKShudWxsKTtcbiAgICBjb25zdCBzZXRFbGVtZW50ID0gKDAsIF9yZWFjdC51c2VDYWxsYmFjaykoKGVsZW1lbnQpPT57XG4gICAgICAgIGVsZW1lbnRSZWYuY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgfSwgW10pO1xuICAgICgwLCBfcmVhY3QudXNlRWZmZWN0KSgoKT0+e1xuICAgICAgICBpZiAoaGFzSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIGlmIChpc0Rpc2FibGVkIHx8IHZpc2libGUpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50UmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1bm9ic2VydmUgPSBvYnNlcnZlKGVsZW1lbnQsIChpc1Zpc2libGUpPT5pc1Zpc2libGUgJiYgc2V0VmlzaWJsZShpc1Zpc2libGUpLCB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3RSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3RSZWYuY3VycmVudCxcbiAgICAgICAgICAgICAgICAgICAgcm9vdE1hcmdpblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bm9ic2VydmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZGxlQ2FsbGJhY2sgPSAoMCwgX3JlcXVlc3RpZGxlY2FsbGJhY2sucmVxdWVzdElkbGVDYWxsYmFjaykoKCk9PnNldFZpc2libGUodHJ1ZSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKT0+KDAsIF9yZXF1ZXN0aWRsZWNhbGxiYWNrLmNhbmNlbElkbGVDYWxsYmFjaykoaWRsZUNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbXG4gICAgICAgIGlzRGlzYWJsZWQsXG4gICAgICAgIHJvb3RNYXJnaW4sXG4gICAgICAgIHJvb3RSZWYsXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIGVsZW1lbnRSZWYuY3VycmVudFxuICAgIF0pO1xuICAgIGNvbnN0IHJlc2V0VmlzaWJsZSA9ICgwLCBfcmVhY3QudXNlQ2FsbGJhY2spKCgpPT57XG4gICAgICAgIHNldFZpc2libGUoZmFsc2UpO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gW1xuICAgICAgICBzZXRFbGVtZW50LFxuICAgICAgICB2aXNpYmxlLFxuICAgICAgICByZXNldFZpc2libGVcbiAgICBdO1xufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtaW50ZXJzZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJ1c2VJbnRlcnNlY3Rpb24iLCJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlcXVlc3RpZGxlY2FsbGJhY2siLCJoYXNJbnRlcnNlY3Rpb25PYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiTWFwIiwiaWRMaXN0IiwiY3JlYXRlT2JzZXJ2ZXIiLCJvcHRpb25zIiwiaWQiLCJyb290IiwibWFyZ2luIiwicm9vdE1hcmdpbiIsImV4aXN0aW5nIiwiZmluZCIsIm9iaiIsImluc3RhbmNlIiwiZWxlbWVudHMiLCJvYnNlcnZlciIsImVudHJpZXMiLCJmb3JFYWNoIiwiZW50cnkiLCJjYWxsYmFjayIsInRhcmdldCIsImlzVmlzaWJsZSIsImlzSW50ZXJzZWN0aW5nIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJwdXNoIiwic2V0Iiwib2JzZXJ2ZSIsImVsZW1lbnQiLCJ1bm9ic2VydmUiLCJkZWxldGUiLCJzaXplIiwiZGlzY29ubmVjdCIsImluZGV4IiwiZmluZEluZGV4Iiwic3BsaWNlIiwicm9vdFJlZiIsImRpc2FibGVkIiwiaXNEaXNhYmxlZCIsInZpc2libGUiLCJzZXRWaXNpYmxlIiwidXNlU3RhdGUiLCJlbGVtZW50UmVmIiwidXNlUmVmIiwic2V0RWxlbWVudCIsInVzZUNhbGxiYWNrIiwiY3VycmVudCIsInVzZUVmZmVjdCIsInRhZ05hbWUiLCJpZGxlQ2FsbGJhY2siLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwicmVzZXRWaXNpYmxlIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/use-intersection.js\n"));

/***/ }),

/***/ "./pages/snippets/index.tsx":
/*!**********************************!*\
  !*** ./pages/snippets/index.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSG\": function() { return /* binding */ __N_SSG; },\n/* harmony export */   \"default\": function() { return /* binding */ Snippets; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _layouts_Page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @layouts/Page */ \"./layouts/Page.tsx\");\n/* harmony import */ var _components_Banner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/Banner */ \"./components/Banner.tsx\");\n/* harmony import */ var _components_Collapsable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/Collapsable */ \"./components/Collapsable.tsx\");\n/* harmony import */ var next_mdx_remote__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next-mdx-remote */ \"./node_modules/next-mdx-remote/index.js\");\n/* harmony import */ var _code_hike_mdx_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @code-hike/mdx/components */ \"./node_modules/@code-hike/mdx/dist/components.esm.mjs\");\n\n\n\n\n\n\nvar __N_SSG = true;\nfunction Snippets(param) {\n    let { snippets  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_layouts_Page__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n        description: \"\",\n        title: \"Rodrigo's Blog | Snippets\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Banner__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                title: \"What I've used\",\n                description: \"A collection with \".concat(snippets.length, \" JavaScript snippets that I used most\")\n            }, void 0, false, {\n                fileName: \"/opt/projects/blog/pages/snippets/index.tsx\",\n                lineNumber: 16,\n                columnNumber: 4\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                className: \"pt-4 grid gap-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                        className: \"text-xl font-medium pl-4\",\n                        children: \"One line utilities\"\n                    }, void 0, false, {\n                        fileName: \"/opt/projects/blog/pages/snippets/index.tsx\",\n                        lineNumber: 21,\n                        columnNumber: 5\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"grid gap-0.5 text-gray-600 hover:text-gray-400 font-medium first-letter:capitalize\",\n                        children: snippets.map((snippet, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Collapsable__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                label: snippet.title,\n                                tag: snippet.topic,\n                                open: true,\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_mdx_remote__WEBPACK_IMPORTED_MODULE_4__.MDXRemote, {\n                                    components: {\n                                        CH: _code_hike_mdx_components__WEBPACK_IMPORTED_MODULE_5__.CH\n                                    },\n                                    ...snippet.content\n                                }, void 0, false, {\n                                    fileName: \"/opt/projects/blog/pages/snippets/index.tsx\",\n                                    lineNumber: 25,\n                                    columnNumber: 8\n                                }, this)\n                            }, snippet.title, false, {\n                                fileName: \"/opt/projects/blog/pages/snippets/index.tsx\",\n                                lineNumber: 24,\n                                columnNumber: 7\n                            }, this))\n                    }, void 0, false, {\n                        fileName: \"/opt/projects/blog/pages/snippets/index.tsx\",\n                        lineNumber: 22,\n                        columnNumber: 5\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/opt/projects/blog/pages/snippets/index.tsx\",\n                lineNumber: 20,\n                columnNumber: 4\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/opt/projects/blog/pages/snippets/index.tsx\",\n        lineNumber: 15,\n        columnNumber: 3\n    }, this);\n}\n_c = Snippets;\nvar _c;\n$RefreshReg$(_c, \"Snippets\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9zbmlwcGV0cy9pbmRleC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFnQztBQUNPO0FBQ1U7QUFFTjtBQUNHOztBQU8vQixTQUFTSyxTQUFTLEtBQW1CLEVBQUU7UUFBckIsRUFBRUMsU0FBUSxFQUFTLEdBQW5CO0lBQ2hDLHFCQUNDLDhEQUFDTixxREFBSUE7UUFBQ08sYUFBWTtRQUFHQyxPQUFNOzswQkFDMUIsOERBQUNQLDBEQUFNQTtnQkFDTk8sT0FBTTtnQkFDTkQsYUFBYSxxQkFBcUMsT0FBaEJELFNBQVNHLE1BQU0sRUFBQzs7Ozs7OzBCQUVuRCw4REFBQ0M7Z0JBQVFDLFdBQVU7O2tDQUNsQiw4REFBQ0M7d0JBQUdELFdBQVU7a0NBQTJCOzs7Ozs7a0NBQ3pDLDhEQUFDRTt3QkFBSUYsV0FBVTtrQ0FDYkwsU0FBU1EsR0FBRyxDQUFDLENBQUNDLFNBQVNDLHNCQUN2Qiw4REFBQ2QsK0RBQVdBO2dDQUFxQmUsT0FBT0YsUUFBUVAsS0FBSztnQ0FBRVUsS0FBS0gsUUFBUUksS0FBSztnQ0FBRUMsSUFBSTswQ0FDOUUsNEVBQUNqQixzREFBU0E7b0NBQUNrQixZQUFZO3dDQUFFakIsRUFBRUEsMkRBQUFBO29DQUFDO29DQUFJLEdBQUdXLFFBQVFPLE9BQU87Ozs7OzsrQkFEakNQLFFBQVFQLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRckMsQ0FBQztLQW5CdUJIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3BhZ2VzL3NuaXBwZXRzL2luZGV4LnRzeD80MTY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYWdlIGZyb20gJ0BsYXlvdXRzL1BhZ2UnXG5pbXBvcnQgQmFubmVyIGZyb20gJ0Bjb21wb25lbnRzL0Jhbm5lcidcbmltcG9ydCBDb2xsYXBzYWJsZSBmcm9tICdAY29tcG9uZW50cy9Db2xsYXBzYWJsZSdcbmltcG9ydCB7IGdldEZ1bGxDb250ZW50IH0gZnJvbSAnQHV0aWxzL2NvbnRlbnQnXG5pbXBvcnQgeyBNRFhSZW1vdGUgfSBmcm9tICduZXh0LW1keC1yZW1vdGUnXG5pbXBvcnQgeyBDSCB9IGZyb20gJ0Bjb2RlLWhpa2UvbWR4L2NvbXBvbmVudHMnXG5pbXBvcnQgeyBGdWxsQ29udGVudCB9IGZyb20gJ0Bjb250ZW50L3R5cGVzJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRzbmlwcGV0czogRnVsbENvbnRlbnRbXVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTbmlwcGV0cyh7IHNuaXBwZXRzIH06IFByb3BzKSB7XG5cdHJldHVybiAoXG5cdFx0PFBhZ2UgZGVzY3JpcHRpb249JycgdGl0bGU9XCJSb2RyaWdvJ3MgQmxvZyB8IFNuaXBwZXRzXCI+XG5cdFx0XHQ8QmFubmVyXG5cdFx0XHRcdHRpdGxlPSdXaGF0IEkmIzM5O3ZlIHVzZWQnXG5cdFx0XHRcdGRlc2NyaXB0aW9uPXtgQSBjb2xsZWN0aW9uIHdpdGggJHtzbmlwcGV0cy5sZW5ndGh9IEphdmFTY3JpcHQgc25pcHBldHMgdGhhdCBJIHVzZWQgbW9zdGB9XG5cdFx0XHQvPlxuXHRcdFx0PHNlY3Rpb24gY2xhc3NOYW1lPSdwdC00IGdyaWQgZ2FwLTQnPlxuXHRcdFx0XHQ8aDEgY2xhc3NOYW1lPSd0ZXh0LXhsIGZvbnQtbWVkaXVtIHBsLTQnPk9uZSBsaW5lIHV0aWxpdGllczwvaDE+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPSdncmlkIGdhcC0wLjUgdGV4dC1ncmF5LTYwMCBob3Zlcjp0ZXh0LWdyYXktNDAwIGZvbnQtbWVkaXVtIGZpcnN0LWxldHRlcjpjYXBpdGFsaXplJz5cblx0XHRcdFx0XHR7c25pcHBldHMubWFwKChzbmlwcGV0LCBpbmRleDogbnVtYmVyKSA9PiAoXG5cdFx0XHRcdFx0XHQ8Q29sbGFwc2FibGUga2V5PXtzbmlwcGV0LnRpdGxlfSBsYWJlbD17c25pcHBldC50aXRsZX0gdGFnPXtzbmlwcGV0LnRvcGljfSBvcGVuPlxuXHRcdFx0XHRcdFx0XHQ8TURYUmVtb3RlIGNvbXBvbmVudHM9e3sgQ0ggfX0gey4uLnNuaXBwZXQuY29udGVudH0gLz5cblx0XHRcdFx0XHRcdDwvQ29sbGFwc2FibGU+XG5cdFx0XHRcdFx0KSl9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9zZWN0aW9uPlxuXHRcdDwvUGFnZT5cblx0KVxufVxuXG5leHBvcnQgY29uc3QgZ2V0U3RhdGljUHJvcHMgPSBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IHNuaXBwZXRzID0gYXdhaXQgZ2V0RnVsbENvbnRlbnQoeyB0eXBlOiAnc25pcHBldHMnIH0pXG5cblx0cmV0dXJuIHtcblx0XHRwcm9wczoge1xuXHRcdFx0c25pcHBldHMsXG5cdFx0fSxcblx0fVxufVxuIl0sIm5hbWVzIjpbIlBhZ2UiLCJCYW5uZXIiLCJDb2xsYXBzYWJsZSIsIk1EWFJlbW90ZSIsIkNIIiwiU25pcHBldHMiLCJzbmlwcGV0cyIsImRlc2NyaXB0aW9uIiwidGl0bGUiLCJsZW5ndGgiLCJzZWN0aW9uIiwiY2xhc3NOYW1lIiwiaDEiLCJkaXYiLCJtYXAiLCJzbmlwcGV0IiwiaW5kZXgiLCJsYWJlbCIsInRhZyIsInRvcGljIiwib3BlbiIsImNvbXBvbmVudHMiLCJjb250ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./pages/snippets/index.tsx\n"));

/***/ }),

/***/ "./utils/config.ts":
/*!*************************!*\
  !*** ./utils/config.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CONTENT_TYPE_MAP\": function() { return /* binding */ CONTENT_TYPE_MAP; },\n/* harmony export */   \"HEADER_LINKS\": function() { return /* binding */ HEADER_LINKS; }\n/* harmony export */ });\nconst HEADER_LINKS = [\n    {\n        path: \"/\",\n        name: \"Home\"\n    },\n    {\n        path: \"/about\",\n        name: \"About\"\n    },\n    {\n        path: \"/articles\",\n        name: \"Articles\"\n    },\n    {\n        path: \"https://github.com/fullsnacker\",\n        name: \"Github\"\n    },\n    {\n        path: \"https://linktr.ee/fullsnacker\",\n        name: \"Links\"\n    }\n];\nconst CONTENT_TYPE_MAP = {\n    news: \"News \\uD83D\\uDDDE️\",\n    nerd: \"Nerding out \\uD83E\\uDD13\",\n    tip: \"Tip \\uD83D\\uDCA1\"\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9jb25maWcudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNQSxlQUFlO0lBQzNCO1FBQUVDLE1BQU07UUFBS0MsTUFBTTtJQUFPO0lBQzFCO1FBQUVELE1BQU07UUFBVUMsTUFBTTtJQUFRO0lBQ2hDO1FBQUVELE1BQU07UUFBYUMsTUFBTTtJQUFXO0lBQ3RDO1FBQUVELE1BQU07UUFBa0NDLE1BQU07SUFBUztJQUN6RDtRQUFFRCxNQUFNO1FBQWlDQyxNQUFNO0lBQVE7Q0FDdkQ7QUFFTSxNQUFNQyxtQkFBbUI7SUFDL0JDLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxLQUFLO0FBQ04sRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9jb25maWcudHM/MGIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSEVBREVSX0xJTktTID0gW1xuXHR7IHBhdGg6ICcvJywgbmFtZTogJ0hvbWUnIH0sXG5cdHsgcGF0aDogJy9hYm91dCcsIG5hbWU6ICdBYm91dCcgfSxcblx0eyBwYXRoOiAnL2FydGljbGVzJywgbmFtZTogJ0FydGljbGVzJyB9LFxuXHR7IHBhdGg6ICdodHRwczovL2dpdGh1Yi5jb20vZnVsbHNuYWNrZXInLCBuYW1lOiAnR2l0aHViJyB9LFxuXHR7IHBhdGg6ICdodHRwczovL2xpbmt0ci5lZS9mdWxsc25hY2tlcicsIG5hbWU6ICdMaW5rcycgfSxcbl1cblxuZXhwb3J0IGNvbnN0IENPTlRFTlRfVFlQRV9NQVAgPSB7XG5cdG5ld3M6ICdOZXdzIPCfl57vuI8nLFxuXHRuZXJkOiAnTmVyZGluZyBvdXQg8J+kkycsXG5cdHRpcDogJ1RpcCDwn5KhJyxcbn1cbiJdLCJuYW1lcyI6WyJIRUFERVJfTElOS1MiLCJwYXRoIiwibmFtZSIsIkNPTlRFTlRfVFlQRV9NQVAiLCJuZXdzIiwibmVyZCIsInRpcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./utils/config.ts\n"));

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlHQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzPzc1YjMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2xpZW50L2xpbmsnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/link.js\n"));

/***/ }),

/***/ "./node_modules/next/router.js":
/*!*************************************!*\
  !*** ./node_modules/next/router.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/router */ \"./node_modules/next/dist/client/router.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9yb3V0ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkdBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L3JvdXRlci5qcz8xYmI2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9yb3V0ZXInKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/router.js\n"));

/***/ }),

/***/ "./node_modules/next-mdx-remote/dist/jsx-runtime.cjs":
/*!***********************************************************!*\
  !*** ./node_modules/next-mdx-remote/dist/jsx-runtime.cjs ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\n/**\n * Allow jsx-runtime to be successfully imported from either React 17 or React 18.\n *\n * Inspired by the approach here: https://github.com/contentlayerdev/contentlayer/blob/main/packages/next-contentlayer/src/hooks/jsx-runtime.cjs\n */\nif (true) {\n  module.exports.jsxRuntime = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\")\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC1tZHgtcmVtb3RlL2Rpc3QvanN4LXJ1bnRpbWUuY2pzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQXNDO0FBQzFDLEVBQUUsdUhBQTREO0FBQzlELEVBQUUsS0FBSyxFQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0LW1keC1yZW1vdGUvZGlzdC9qc3gtcnVudGltZS5janM/OWFiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuICovXG5cbi8qKlxuICogQWxsb3cganN4LXJ1bnRpbWUgdG8gYmUgc3VjY2Vzc2Z1bGx5IGltcG9ydGVkIGZyb20gZWl0aGVyIFJlYWN0IDE3IG9yIFJlYWN0IDE4LlxuICpcbiAqIEluc3BpcmVkIGJ5IHRoZSBhcHByb2FjaCBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vY29udGVudGxheWVyZGV2L2NvbnRlbnRsYXllci9ibG9iL21haW4vcGFja2FnZXMvbmV4dC1jb250ZW50bGF5ZXIvc3JjL2hvb2tzL2pzeC1ydW50aW1lLmNqc1xuICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMuanN4UnVudGltZSA9IHJlcXVpcmUoJ3JlYWN0L2pzeC1kZXYtcnVudGltZScpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cy5qc3hSdW50aW1lID0gcmVxdWlyZSgncmVhY3QvanN4LXJ1bnRpbWUnKVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next-mdx-remote/dist/jsx-runtime.cjs\n"));

/***/ }),

/***/ "./node_modules/@code-hike/mdx/dist/components.esm.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@code-hike/mdx/dist/components.esm.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Annotation\": function() { return /* binding */ Annotation; },\n/* harmony export */   \"CH\": function() { return /* binding */ CH; },\n/* harmony export */   \"Code\": function() { return /* binding */ Code; },\n/* harmony export */   \"CodeSlot\": function() { return /* binding */ CodeSlot; },\n/* harmony export */   \"InlineCode\": function() { return /* binding */ InlineCode; },\n/* harmony export */   \"Preview\": function() { return /* binding */ Preview; },\n/* harmony export */   \"PreviewSlot\": function() { return /* binding */ PreviewSlot; },\n/* harmony export */   \"Scrollycoding\": function() { return /* binding */ Scrollycoding; },\n/* harmony export */   \"Section\": function() { return /* binding */ Section; },\n/* harmony export */   \"SectionCode\": function() { return /* binding */ SectionCode; },\n/* harmony export */   \"SectionLink\": function() { return /* binding */ SectionLink; },\n/* harmony export */   \"Slideshow\": function() { return /* binding */ Slideshow; },\n/* harmony export */   \"Spotlight\": function() { return /* binding */ Spotlight; },\n/* harmony export */   \"annotations\": function() { return /* binding */ annotationsMap; },\n/* harmony export */   \"internal\": function() { return /* binding */ internal; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n\"use client\";\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\n// from https://stackoverflow.com/a/53936623/1325646\r\nconst isValidHex = (hex) => /^#([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);\r\nconst getChunksFromString = (st, chunkSize) => st.match(new RegExp(`.{${chunkSize}}`, \"g\"));\r\nconst convertHexUnitTo256 = (hex) => parseInt(hex.repeat(2 / hex.length), 16);\r\nfunction getAlphaFloat(a, alpha) {\r\n    if (typeof a !== \"undefined\") {\r\n        return a / 255;\r\n    }\r\n    if (typeof alpha != \"number\" || alpha < 0 || alpha > 1) {\r\n        return 1;\r\n    }\r\n    return alpha;\r\n}\r\nfunction hexToObject(hex) {\r\n    if (!hex) {\r\n        return undefined;\r\n    }\r\n    if (!isValidHex(hex)) {\r\n        throw new Error(\"Invalid color string, must be a valid hex color\");\r\n    }\r\n    const chunkSize = Math.floor((hex.length - 1) / 3);\r\n    const hexArr = getChunksFromString(hex.slice(1), chunkSize);\r\n    const [r, g, b, a] = hexArr.map(convertHexUnitTo256);\r\n    return {\r\n        r,\r\n        g,\r\n        b,\r\n        a: getAlphaFloat(a, 1),\r\n    };\r\n}\r\nfunction objectToHex(object) {\r\n    if (!object) {\r\n        return undefined;\r\n    }\r\n    const { r, g, b, a } = object;\r\n    const alpha = Math.round(a * 255);\r\n    return `#${r.toString(16).padStart(2, \"0\")}${g\r\n        .toString(16)\r\n        .padStart(2, \"0\")}${b\r\n        .toString(16)\r\n        .padStart(2, \"0\")}${alpha\r\n        .toString(16)\r\n        .padStart(2, \"0\")}`;\r\n}\r\nfunction transparent(color, opacity) {\r\n    if (!color) {\r\n        return color;\r\n    }\r\n    const { r, g, b, a } = hexToObject(color);\r\n    return objectToHex({ r, g, b, a: a * opacity });\r\n}\n\nfunction map(tween, fn) {\r\n    return {\r\n        prev: fn(tween.prev, \"prev\"),\r\n        next: fn(tween.next, \"next\"),\r\n    };\r\n}\r\nfunction withDefault(t, deft) {\r\n    return {\r\n        prev: (t === null || t === void 0 ? void 0 : t.prev) === undefined ? deft : t.prev,\r\n        next: (t === null || t === void 0 ? void 0 : t.next) === undefined ? deft : t.next,\r\n    };\r\n}\r\nfunction mapWithDefault(tween, deft, fn) {\r\n    return map(withDefault(tween, deft), fn);\r\n}\r\nfunction anyValue(tween, fn) {\r\n    return fn(tween.prev) || fn(tween.next);\r\n}\n\nfunction codeToText(code) {\r\n    return code.lines\r\n        .map(line => line.tokens.map(token => token.content).join(\"\"))\r\n        .join(\"\\n\");\r\n}\n\nfunction mapFocusToLineNumbers(focus, lines) {\r\n    if (!focus) {\r\n        // focus all lines\r\n        return mergeToObject([...lines.keys()].map(lineIndex => ({\r\n            [lineIndex + 1]: true,\r\n        })));\r\n    }\r\n    else {\r\n        return mergeToObject(splitParts(focus).map(parsePartToObject));\r\n    }\r\n}\r\nfunction splitParts(focus) {\r\n    return focus.split(/,(?![^\\[]*\\])/g);\r\n}\r\nfunction mergeToObject(entries) {\r\n    return entries.reduce((acc, obj) => Object.assign(acc, obj), {});\r\n}\r\nfunction hasColumns(part) {\r\n    return !!part.match(/(\\d+)\\[(.+)\\]/);\r\n}\r\nfunction parsePartToObject(part) {\r\n    // a part could be\r\n    // - a line number: \"2\"\r\n    // - a line range: \"5:9\"\r\n    // - a line number with a column selector: \"2[1,3:5,9]\"\r\n    const columnsMatch = part.match(/(\\d+)\\[(.+)\\]/);\r\n    if (columnsMatch) {\r\n        const [, line, columns] = columnsMatch;\r\n        const columnsList = columns\r\n            .split(\",\")\r\n            .map(parseExtremes);\r\n        const lineNumber = Number(line);\r\n        return { [lineNumber]: columnsList };\r\n    }\r\n    else {\r\n        return mergeToObject(expandString(part).map(lineNumber => ({\r\n            [lineNumber]: true,\r\n        })));\r\n    }\r\n}\r\nfunction parseExtremes(part) {\r\n    // Transforms something like\r\n    // - \"1:3\" to {start:1, end: 3}\r\n    // - \"4\" to {start:4, end:4}\r\n    const [start, end] = part.split(\":\");\r\n    if (!isNaturalNumber(start)) {\r\n        throw new FocusNumberError(start);\r\n    }\r\n    const startNumber = Number(start);\r\n    if (startNumber < 1) {\r\n        throw new LineOrColumnNumberError();\r\n    }\r\n    if (!end) {\r\n        return { start: startNumber, end: startNumber };\r\n    }\r\n    else {\r\n        if (!isNaturalNumber(end)) {\r\n            throw new FocusNumberError(end);\r\n        }\r\n        return { start: startNumber, end: +end };\r\n    }\r\n}\r\n/**\r\n * Return the first and last indexes to focus, both included\r\n */\r\nfunction getFocusExtremes(focus, lines) {\r\n    if (!focus) {\r\n        return [0, lines.length - 1];\r\n    }\r\n    else {\r\n        const parsed = parseFocus(focus);\r\n        const focusedIndexes = Object.keys(parsed).map(i => parseInt(i, 10));\r\n        return [\r\n            Math.min(...focusedIndexes),\r\n            Math.max(...focusedIndexes),\r\n        ];\r\n    }\r\n}\r\nfunction getFocusIndexes(focus, lines) {\r\n    if (!focus) {\r\n        return [...lines.keys()];\r\n    }\r\n    else {\r\n        const parsed = parseFocus(focus);\r\n        const focusedIndexes = Object.keys(parsed).map(i => parseInt(i, 10));\r\n        return focusedIndexes;\r\n    }\r\n}\r\nfunction parseFocus(focus) {\r\n    if (!focus) {\r\n        throw new Error(\"Focus cannot be empty\");\r\n    }\r\n    try {\r\n        const parts = focus\r\n            .split(/,(?![^\\[]*\\])/g)\r\n            .map(parsePart);\r\n        return fromEntries(parts.flat());\r\n    }\r\n    catch (error) {\r\n        // TODO enhance error\r\n        throw error;\r\n    }\r\n}\r\nfunction parsePart(part) {\r\n    // a part could be\r\n    // - a line number: \"2\"\r\n    // - a line range: \"5:9\"\r\n    // - a line number with a column selector: \"2[1,3:5,9]\"\r\n    const columnsMatch = part.match(/(\\d+)\\[(.+)\\]/);\r\n    if (columnsMatch) {\r\n        const [, line, columns] = columnsMatch;\r\n        const columnsList = columns.split(\",\").map(expandString);\r\n        const lineIndex = Number(line) - 1;\r\n        const columnIndexes = columnsList.flat().map(c => c - 1);\r\n        return [[lineIndex, columnIndexes]];\r\n    }\r\n    else {\r\n        return expandString(part).map(lineNumber => [\r\n            lineNumber - 1,\r\n            true,\r\n        ]);\r\n    }\r\n}\r\nfunction expandString(part) {\r\n    // Transforms something like\r\n    // - \"1:3\" to [1,2,3]\r\n    // - \"4\" to [4]\r\n    const [start, end] = part.split(\":\");\r\n    if (!isNaturalNumber(start)) {\r\n        throw new FocusNumberError(start);\r\n    }\r\n    const startNumber = Number(start);\r\n    if (startNumber < 1) {\r\n        throw new LineOrColumnNumberError();\r\n    }\r\n    if (!end) {\r\n        return [startNumber];\r\n    }\r\n    else {\r\n        if (!isNaturalNumber(end)) {\r\n            throw new FocusNumberError(end);\r\n        }\r\n        const list = [];\r\n        for (let i = startNumber; i <= +end; i++) {\r\n            list.push(i);\r\n        }\r\n        return list;\r\n    }\r\n}\r\nfunction isNaturalNumber(n) {\r\n    n = n.toString(); // force the value in case it is not\r\n    var n1 = Math.abs(n), n2 = parseInt(n, 10);\r\n    return !isNaN(n1) && n2 === n1 && n1.toString() === n;\r\n}\r\nclass LineOrColumnNumberError extends Error {\r\n    constructor() {\r\n        super(`Invalid line or column number in focus string`);\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n    }\r\n}\r\nclass FocusNumberError extends Error {\r\n    constructor(number) {\r\n        super(`Invalid number \"${number}\" in focus string`);\r\n        this.number = number;\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n    }\r\n}\r\nfunction fromEntries(pairs) {\r\n    const result = {};\r\n    let index = -1, length = pairs == null ? 0 : pairs.length;\r\n    while (++index < length) {\r\n        var pair = pairs[index];\r\n        result[pair[0]] = pair[1];\r\n    }\r\n    return result;\r\n}\n\nconst useLayoutEffect$4 = typeof window !== \"undefined\"\r\n    ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect\r\n    : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\n// for debugging:\r\n// export const useLayoutEffect = (\r\n//   effect: any,\r\n//   deps?: any\r\n// ) => {}\r\n// from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = react__WEBPACK_IMPORTED_MODULE_0__.useRef(callback);\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        if (!delay && delay !== 0) {\r\n            return undefined;\r\n        }\r\n        const id = setInterval(() => savedCallback.current(), delay);\r\n        return () => clearInterval(id);\r\n    }, [delay]);\r\n}\n\nfunction clamp$2(x, min, max) {\r\n    return Math.min(Math.max(x, min), max);\r\n}\n\nconst DEFAULT_WIDTH = 200;\r\n// type DimensionsResult = {\r\n//   width: number\r\n//   height: number\r\n//   lineWidths: { prev: number; next: number }\r\n//   lineHeight: number\r\n//   colWidth: number\r\n// }\r\nfunction useDimensions(code, focus, minColumns, lineNumbers, rows, deps) {\r\n    const [dimensions, setDimensions] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\r\n    // in case the element starts hidden https://github.com/code-hike/codehike/issues/372\r\n    const [visibility, markAsVisible] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\r\n    const windowWidth = useWindowWidth();\r\n    const prevLineRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n    // the element to render before dimensions are calculated\r\n    const { prevLongestLine, nextLongestLine, element } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        const prevLongestLine = getLongestLine(code.prev, focus.prev);\r\n        const nextLongestLine = getLongestLine(code.next, focus.next);\r\n        const lines = (code.prev || code.next)\r\n            .trimEnd()\r\n            .split(newlineRe);\r\n        const largestLineNumber = Math.max(lines.length, 10);\r\n        if (rows) {\r\n            // make the lines match the requested number of rows\r\n            const heightInLines = rows === \"focus\"\r\n                ? focusHeightInLines(focus, lines)\r\n                : rows;\r\n            let i = lines.length;\r\n            while (i < heightInLines) {\r\n                lines.push(\"\");\r\n                i++;\r\n            }\r\n            // remove extra lines to match the requested rows\r\n            while (i > heightInLines) {\r\n                lines.pop();\r\n                i--;\r\n            }\r\n            // if we removed prevLongestLine, add it back\r\n            if (prevLongestLine &&\r\n                !lines.includes(prevLongestLine)) {\r\n                lines[lines.length - 1] = prevLongestLine;\r\n            }\r\n        }\r\n        // avod setting the ref more than once https://github.com/code-hike/codehike/issues/232\r\n        let prevLineRefSet = false;\r\n        const element = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", { className: \"ch-code-scroll-parent\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null),\r\n            lines.map((line, i) => {\r\n                const ref = !prevLineRefSet && line === prevLongestLine\r\n                    ? prevLineRef\r\n                    : undefined;\r\n                prevLineRefSet = prevLineRefSet || ref != null;\r\n                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: ref, key: i },\r\n                    lineNumbers ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"ch-code-line-number\" },\r\n                        \"_\",\r\n                        largestLineNumber)) : undefined,\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\r\n                            display: \"inline-block\",\r\n                            // leftPad\r\n                            marginLeft: 16,\r\n                        } },\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, line))));\r\n            }),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null)));\r\n        return { prevLongestLine, nextLongestLine, element };\r\n    }, [code]);\r\n    const allDeps = [\r\n        ...deps,\r\n        windowWidth,\r\n        prevLongestLine,\r\n        nextLongestLine,\r\n        minColumns,\r\n        visibility,\r\n    ];\r\n    useLayoutEffect$4(() => {\r\n        var _a;\r\n        if (prevLineRef.current) {\r\n            const pll = prevLineRef.current;\r\n            const contentElement = pll === null || pll === void 0 ? void 0 : pll.parentElement;\r\n            const codeElement = contentElement.parentElement;\r\n            const { width } = codeElement.getBoundingClientRect();\r\n            if (!width && visibility === 0) {\r\n                const resizeObserver = new ResizeObserver(([entry]) => {\r\n                    const { width } = entry.contentRect;\r\n                    if (width) {\r\n                        resizeObserver.disconnect();\r\n                        markAsVisible(1);\r\n                    }\r\n                });\r\n                resizeObserver.observe(codeElement);\r\n                return () => resizeObserver.disconnect();\r\n            }\r\n            // TODO is it clientWidth or clientRect?\r\n            const lineContentDiv = pll === null || pll === void 0 ? void 0 : pll.querySelector(\":scope > div\");\r\n            const lineNumberSpan = pll === null || pll === void 0 ? void 0 : pll.querySelector(\":scope > span\");\r\n            const lnw = lineNumberSpan\r\n                ? getWidthWithPadding(lineNumberSpan)\r\n                : 0;\r\n            const plw = getWidthWithoutPadding(lineContentDiv);\r\n            const colWidth = plw / prevLongestLine.length || 1;\r\n            const nlw = nextLongestLine.length * colWidth;\r\n            const lineHeight = (_a = getHeightWithoutPadding(lineContentDiv)) !== null && _a !== void 0 ? _a : 20;\r\n            const d = {\r\n                containerWidth: getWidthWithoutPadding(codeElement.parentElement),\r\n                containerHeight: getHeightWithoutPadding(codeElement.parentElement),\r\n                contentWidth: getWidthWithoutPadding(contentElement.parentElement),\r\n                contentHeight: getHeightWithoutPadding(contentElement.parentElement),\r\n                lineWidths: [\r\n                    plw || nlw || DEFAULT_WIDTH,\r\n                    nlw || plw || DEFAULT_WIDTH,\r\n                ],\r\n                lineWidth: [\r\n                    Math.max(plw || nlw || DEFAULT_WIDTH, colWidth * minColumns),\r\n                    Math.max(nlw || plw || DEFAULT_WIDTH, colWidth * minColumns),\r\n                ],\r\n                lineHeight,\r\n                colWidth,\r\n                lineNumberWidth: lnw,\r\n                deps: allDeps,\r\n            };\r\n            setDimensions(d);\r\n        }\r\n        return () => { };\r\n    }, allDeps);\r\n    if (!dimensions ||\r\n        depsChanged(dimensions.deps, allDeps)) {\r\n        return { element, dimensions: null };\r\n    }\r\n    else {\r\n        return { element, dimensions };\r\n    }\r\n}\r\nconst newlineRe = /\\r\\n|\\r|\\n/;\r\nfunction getLongestLine(code, focus) {\r\n    const lines = code ? code.split(newlineRe) : [\"\"];\r\n    const focusIndexes = getFocusIndexes(focus, lines);\r\n    let longestLine = \"\";\r\n    lines.forEach((line, index) => {\r\n        if (focusIndexes.includes(index) &&\r\n            line.length > longestLine.length) {\r\n            longestLine = line;\r\n        }\r\n    });\r\n    return longestLine;\r\n}\r\nfunction getWidthWithoutPadding(element) {\r\n    const computedStyle = getComputedStyle(element);\r\n    return (parseFloat(computedStyle.width) -\r\n        parseFloat(computedStyle.paddingLeft) -\r\n        parseFloat(computedStyle.paddingRight));\r\n}\r\nfunction getWidthWithPadding(element) {\r\n    const computedStyle = getComputedStyle(element);\r\n    return parseFloat(computedStyle.width);\r\n}\r\nfunction getHeightWithoutPadding(element) {\r\n    if (!element)\r\n        return null;\r\n    const computedStyle = getComputedStyle(element);\r\n    return (parseFloat(computedStyle.height) -\r\n        parseFloat(computedStyle.paddingTop) -\r\n        parseFloat(computedStyle.paddingBottom));\r\n}\r\nfunction depsChanged(oldDeps, newDeps) {\r\n    for (let i = 0; i < oldDeps.length; i++) {\r\n        if (oldDeps[i] !== newDeps[i])\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\nfunction useWindowWidth() {\r\n    const [width, setWidth] = react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined);\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        function handleResize() {\r\n            setWidth(window.innerWidth);\r\n        }\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n    return width;\r\n}\r\nfunction focusHeightInLines(focus, lines) {\r\n    const [start, end] = getFocusExtremes(focus.prev, lines);\r\n    return end - start + 1;\r\n}\n\nfunction Diff() {}\nDiff.prototype = {\n  diff: function diff(oldString, newString) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = options.callback;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    this.options = options;\n    var self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function () {\n          callback(undefined, value);\n        }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    } // Allow subclasses to massage the input prior to running\n\n\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n    var newLen = newString.length,\n        oldLen = oldString.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n    var bestPath = [{\n      newPos: -1,\n      components: []\n    }]; // Seed editLength = 0, i.e. the content starts with the same values\n\n    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n      // Identity per the equality and tokenizer\n      return done([{\n        value: this.join(newString),\n        count: newString.length\n      }]);\n    } // Main worker method. checks all permutations of a given edit length for acceptance.\n\n\n    function execEditLength() {\n      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n        var basePath = void 0;\n\n        var addPath = bestPath[diagonalPath - 1],\n            removePath = bestPath[diagonalPath + 1],\n            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n        if (addPath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        var canAdd = addPath && addPath.newPos + 1 < newLen,\n            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        } // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the new string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n\n\n        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n          basePath = clonePath(removePath);\n          self.pushComponent(basePath.components, undefined, true);\n        } else {\n          basePath = addPath; // No need to clone, we've pulled it from the list\n\n          basePath.newPos++;\n          self.pushComponent(basePath.components, true, undefined);\n        }\n\n        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done\n\n        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n        } else {\n          // Otherwise track this path as a potential candidate and continue.\n          bestPath[diagonalPath] = basePath;\n        }\n      }\n\n      editLength++;\n    } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced.\n\n\n    if (callback) {\n      (function exec() {\n        setTimeout(function () {\n          // This should not happen, but we want to be safe.\n\n          /* istanbul ignore next */\n          if (editLength > maxEditLength) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      })();\n    } else {\n      while (editLength <= maxEditLength) {\n        var ret = execEditLength();\n\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n  pushComponent: function pushComponent(components, added, removed) {\n    var last = components[components.length - 1];\n\n    if (last && last.added === added && last.removed === removed) {\n      // We need to clone here as the component clone operation is just\n      // as shallow array clone\n      components[components.length - 1] = {\n        count: last.count + 1,\n        added: added,\n        removed: removed\n      };\n    } else {\n      components.push({\n        count: 1,\n        added: added,\n        removed: removed\n      });\n    }\n  },\n  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n    var newLen = newString.length,\n        oldLen = oldString.length,\n        newPos = basePath.newPos,\n        oldPos = newPos - diagonalPath,\n        commonCount = 0;\n\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.components.push({\n        count: commonCount\n      });\n    }\n\n    basePath.newPos = newPos;\n    return oldPos;\n  },\n  equals: function equals(left, right) {\n    if (this.options.comparator) {\n      return this.options.comparator(left, right);\n    } else {\n      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n    }\n  },\n  removeEmpty: function removeEmpty(array) {\n    var ret = [];\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n\n    return ret;\n  },\n  castInput: function castInput(value) {\n    return value;\n  },\n  tokenize: function tokenize(value) {\n    return value.split('');\n  },\n  join: function join(chars) {\n    return chars.join('');\n  }\n};\n\nfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n  var componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        var value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function (value, i) {\n          var oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n        component.value = diff.join(value);\n      } else {\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n      }\n\n      newPos += component.count; // Common case\n\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n\n      if (componentPos && components[componentPos - 1].added) {\n        var tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  } // Special case handle for when one terminal is ignored (i.e. whitespace).\n  // For this case we merge the terminal into the prior string and drop the change.\n  // This is only available for string mode.\n\n\n  var lastComponent = components[componentLen - 1];\n\n  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n    components[componentLen - 2].value += lastComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return {\n    newPos: path.newPos,\n    components: path.components.slice(0)\n  };\n}\n\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\n\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new Diff();\n\nwordDiff.equals = function (left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\n\nwordDiff.tokenize = function (value) {\n  var tokens = value.split(/(\\s+|[()[\\]{}'\"]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nvar lineDiff = new Diff();\n\nlineDiff.tokenize = function (value) {\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  } // Merge the content and line separators into single tokens\n\n\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\n\nvar sentenceDiff = new Diff();\n\nsentenceDiff.tokenize = function (value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nvar cssDiff = new Diff();\n\ncssDiff.tokenize = function (value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar objectPrototypeToString = Object.prototype.toString;\nvar jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\njsonDiff.useLongestToken = true;\njsonDiff.tokenize = lineDiff.tokenize;\n\njsonDiff.castInput = function (value) {\n  var _this$options = this.options,\n      undefinedReplacement = _this$options.undefinedReplacement,\n      _this$options$stringi = _this$options.stringifyReplacer,\n      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\n    return typeof v === 'undefined' ? undefinedReplacement : v;\n  } : _this$options$stringi;\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n};\n\njsonDiff.equals = function (left, right) {\n  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n};\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  if (replacer) {\n    obj = replacer(key, obj);\n  }\n\n  var i;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  var canonicalizedObj;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if (_typeof(obj) === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n\n    var sortedKeys = [],\n        _key;\n\n    for (_key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(_key)) {\n        sortedKeys.push(_key);\n      }\n    }\n\n    sortedKeys.sort();\n\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      _key = sortedKeys[i];\n      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n\n  return canonicalizedObj;\n}\n\nvar arrayDiff = new Diff();\n\narrayDiff.tokenize = function (value) {\n  return value.slice();\n};\n\narrayDiff.join = arrayDiff.removeEmpty = function (value) {\n  return value;\n};\n\nfunction mergeLines(code, lines) {\r\n    let enterIndex = 0;\r\n    let exitIndex = 0;\r\n    const indexes = diff(code);\r\n    const newLines = indexes.map(index => {\r\n        if (index.next === undefined) {\r\n            return Object.assign(Object.assign({}, lines.prev[index.prev]), { lineNumber: {\r\n                    prev: index.prev + 1,\r\n                }, move: \"exit\", enterIndex: null, exitIndex: exitIndex++ });\r\n        }\r\n        if (index.prev === undefined) {\r\n            return Object.assign(Object.assign({}, lines.next[index.next]), { lineNumber: {\r\n                    next: index.next + 1,\r\n                }, move: \"enter\", enterIndex: enterIndex++, exitIndex: null });\r\n        }\r\n        return Object.assign(Object.assign({}, lines.prev[index.prev]), { lineNumber: {\r\n                prev: index.prev + 1,\r\n                next: index.next + 1,\r\n            }, move: \"stay\", enterIndex: null, exitIndex: null });\r\n    });\r\n    return {\r\n        lines: newLines,\r\n        enterCount: enterIndex,\r\n        exitCount: exitIndex,\r\n    };\r\n}\r\n/**\r\n * Returns a list of pairs of line indexes:\r\n *\r\n * For example if lines 2 and 3 were removed\r\n * and two lines where added at the end:\r\n *  0 0\r\n *  1 -\r\n *  2 -\r\n *  3 1\r\n *  - 2\r\n *  - 3\r\n */\r\nfunction diff(code) {\r\n    const changes = diffLines(code.prev, code.next);\r\n    let indexes = [];\r\n    let prevIndex = 0;\r\n    let nextIndex = 0;\r\n    changes.forEach(change => {\r\n        if (change.added) {\r\n            for (let i = 0; i < change.count; i++) {\r\n                indexes.push({ next: nextIndex++ });\r\n            }\r\n        }\r\n        else if (change.removed) {\r\n            for (let i = 0; i < change.count; i++) {\r\n                indexes.push({ prev: prevIndex++ });\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < change.count; i++) {\r\n                indexes.push({\r\n                    prev: prevIndex++,\r\n                    next: nextIndex++,\r\n                });\r\n            }\r\n        }\r\n    });\r\n    return indexes;\r\n}\n\nfunction splitByFocus(mergedCode, focus, annotations) {\r\n    const { lines } = mergedCode, mergedCodeRest = __rest(mergedCode, [\"lines\"]);\r\n    const focusByLineNumber = map(focus, (focus, key) => {\r\n        // we need to filter the lines that don't belong to the step\r\n        // for the case where focus == \"\"\r\n        const stepLines = key === \"prev\"\r\n            ? lines.filter(l => l.move !== \"enter\")\r\n            : lines.filter(l => l.move !== \"exit\");\r\n        return mapFocusToLineNumbers(focus, stepLines);\r\n    });\r\n    const splittedLines = lines.map(line => {\r\n        const { tokens } = line, rest = __rest(line, [\"tokens\"]);\r\n        const lineFocus = {\r\n            prev: line.lineNumber.prev\r\n                ? focusByLineNumber.prev[line.lineNumber.prev]\r\n                : false,\r\n            next: line.lineNumber.next\r\n                ? focusByLineNumber.next[line.lineNumber.next]\r\n                : false,\r\n        };\r\n        const lineAnnotations = {\r\n            prev: line.lineNumber.prev\r\n                ? annotations.prev[line.lineNumber.prev] || []\r\n                : [],\r\n            next: line.lineNumber.next\r\n                ? annotations.next[line.lineNumber.next] || []\r\n                : [],\r\n        };\r\n        return Object.assign({ focused: map(lineFocus, focus => !!focus), groups: getTokenGroups(tokens, lineFocus, lineAnnotations) }, rest);\r\n    });\r\n    const focusedLineNumbers = map(focusByLineNumber, focusByLineNumber => Object.keys(focusByLineNumber).map(k => Number(k)));\r\n    const firstFocusedLineNumber = map(focusedLineNumbers, focusedLineNumbers => Math.min(...focusedLineNumbers));\r\n    const lastFocusedLineNumber = map(focusedLineNumbers, focusedLineNumbers => Math.max(...focusedLineNumbers));\r\n    return Object.assign({ lines: splittedLines, firstFocusedLineNumber,\r\n        lastFocusedLineNumber }, mergedCodeRest);\r\n}\r\n/**\r\n * Get the least amount of groups where no consecutive groups have\r\n * the same combination of prevFocus, nextFocus, prevAnnotation, nextAnnotation.\r\n */\r\nfunction getTokenGroups(tokens, focus, annotations) {\r\n    const focusExtremes = map(focus, focus => Array.isArray(focus) ? focus : []);\r\n    const annotationExtremes = map(annotations, annotations => annotations.map(({ columnNumbers }) => columnNumbers));\r\n    const allExtremes = [\r\n        ...focusExtremes.prev,\r\n        ...focusExtremes.next,\r\n        ...annotationExtremes.prev,\r\n        ...annotationExtremes.next,\r\n    ];\r\n    const splittedTokens = splitTokens(tokens, allExtremes);\r\n    let startIndex = 0;\r\n    let currentGroup = null;\r\n    const groups = [];\r\n    splittedTokens.forEach(token => {\r\n        const newPrevFocus = isIn(startIndex, focus.prev);\r\n        const newNextFocus = isIn(startIndex, focus.next);\r\n        const newPrevAnnotation = getAnnotation(startIndex, annotations.prev);\r\n        const newNextAnnotation = getAnnotation(startIndex, annotations.next);\r\n        if (!currentGroup ||\r\n            currentGroup.focused.prev !== newPrevFocus ||\r\n            currentGroup.focused.next !== newNextFocus ||\r\n            currentGroup.annotation.prev !== newPrevAnnotation ||\r\n            currentGroup.annotation.next !== newNextAnnotation) {\r\n            currentGroup = {\r\n                focused: {\r\n                    prev: newPrevFocus,\r\n                    next: newNextFocus,\r\n                },\r\n                tokens: [],\r\n                annotation: {\r\n                    prev: newPrevAnnotation,\r\n                    next: newNextAnnotation,\r\n                },\r\n            };\r\n            groups.push(currentGroup);\r\n        }\r\n        currentGroup === null || currentGroup === void 0 ? void 0 : currentGroup.tokens.push(token);\r\n        startIndex += token.content.length;\r\n    });\r\n    return groups.map(group => ({\r\n        focused: group.focused,\r\n        tokens: group.tokens,\r\n        element: getGroupElement(group),\r\n    }));\r\n}\r\nfunction getGroupElement(group) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, group.tokens.map(({ content, props }, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", Object.assign({}, props, { key: i + 1 }), content)))));\r\n}\r\n/**\r\n * Split a list of tokens into a more fine-graned list of tokens\r\n *\r\n * tokens: [abc][defg]\r\n * extremes: [1:2,2:5]\r\n * result tokens: [ab][c][de][fg]\r\n *\r\n */\r\nfunction splitTokens(tokens, extremes) {\r\n    const splitIndexes = [\r\n        ...extremes.map(e => e.start - 1),\r\n        ...extremes.map(e => e.end),\r\n    ];\r\n    let oldTokens = tokens;\r\n    splitIndexes.forEach(splitIndex => {\r\n        const newTokens = [];\r\n        let i = 0;\r\n        oldTokens.forEach(token => {\r\n            const startIndex = i;\r\n            const endIndex = i + token.content.length;\r\n            const shouldSplit = startIndex < splitIndex && splitIndex < endIndex;\r\n            if (shouldSplit) {\r\n                const sliceIndex = splitIndex - startIndex;\r\n                const content0 = token.content.slice(0, sliceIndex);\r\n                const content1 = token.content.slice(sliceIndex);\r\n                newTokens.push(Object.assign(Object.assign({}, token), { content: content0 }));\r\n                newTokens.push(Object.assign(Object.assign({}, token), { content: content1 }));\r\n            }\r\n            else {\r\n                newTokens.push(token);\r\n            }\r\n            i = endIndex;\r\n        });\r\n        oldTokens = newTokens;\r\n    });\r\n    return oldTokens;\r\n}\r\nfunction isIn(index, intervals) {\r\n    if (!Array.isArray(intervals)) {\r\n        return intervals;\r\n    }\r\n    return intervals.some(({ start, end }) => start - 1 <= index && index < end);\r\n}\r\nfunction getAnnotation(index, annotations) {\r\n    return annotations.find(({ columnNumbers }) => columnNumbers.start - 1 <= index &&\r\n        index < columnNumbers.end);\r\n}\n\nfunction tween$1(params, t) {\r\n    // needs === true for typescript...\r\n    if (params.fixed === true) {\r\n        return params.value;\r\n    }\r\n    else {\r\n        const [start, end] = params.interval;\r\n        const [from, to] = params.extremes;\r\n        if (t < start)\r\n            return from;\r\n        if (t > end)\r\n            return to;\r\n        const x = (t - start) / (end - start);\r\n        const ease = params.ease || easing.linear;\r\n        return from + ease(x) * (to - from);\r\n    }\r\n}\r\nfunction stagger([start, end], index, count) {\r\n    if (count <= 1)\r\n        return [start, end];\r\n    const totalDuration = end - start;\r\n    const stepDuration = totalDuration / Math.pow(count, 1 / 8);\r\n    const tick = (totalDuration - stepDuration) / (count - 1);\r\n    const stepStart = start + tick * index;\r\n    const stepEnd = stepStart + stepDuration;\r\n    return [stepStart, stepEnd];\r\n}\r\nconst easing = {\r\n    linear: function (t) {\r\n        return t;\r\n    },\r\n    easeInQuad: function (t) {\r\n        return t * t;\r\n    },\r\n    easeOutQuad: function (t) {\r\n        return t * (2 - t);\r\n    },\r\n    easeInOutCubic: function (t) {\r\n        return t < 0.5\r\n            ? 4 * t * t * t\r\n            : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\r\n    },\r\n};\n\nfunction getLinesWithElements(lines, verticalInterval, enterCount, exitCount) {\r\n    // startY is the progress when we start moving vertically\r\n    // endY is when we stop\r\n    const [startY, endY] = verticalInterval;\r\n    return lines.map(line => {\r\n        const lineIndex = map(line.lineNumber, ln => ln && ln - 1);\r\n        const { enterIndex, exitIndex } = line;\r\n        const tweenY = line.move === \"exit\"\r\n            ? { fixed: true, value: lineIndex.prev }\r\n            : line.move === \"enter\"\r\n                ? { fixed: true, value: lineIndex.next }\r\n                : {\r\n                    fixed: false,\r\n                    extremes: [lineIndex.prev, lineIndex.next],\r\n                    interval: [startY, endY],\r\n                    ease: easing.easeInOutCubic,\r\n                };\r\n        const tweenX = line.move === \"exit\"\r\n            ? {\r\n                fixed: false,\r\n                extremes: [0, -1],\r\n                ease: easing.easeInQuad,\r\n                interval: stagger([0, startY], exitIndex, exitCount),\r\n            }\r\n            : line.move === \"enter\"\r\n                ? {\r\n                    fixed: false,\r\n                    extremes: [1, 0],\r\n                    ease: easing.easeOutQuad,\r\n                    interval: stagger([endY, 1], enterIndex, enterCount),\r\n                }\r\n                : { fixed: true, value: 0 };\r\n        return Object.assign(Object.assign({}, line), { tweenX,\r\n            tweenY });\r\n    });\r\n}\n\nfunction parseAnnotations(annotations) {\r\n    // split annotations with multiple parts in the focus string\r\n    // \"1:2,3[4:5]\" becomes  two annotations \"1:2\" and \"3[4:5]\"\r\n    const expandedAnnotations = mapWithDefault(annotations, [], annotations => annotations.flatMap(annotation => splitParts(annotation.focus).map(part => (Object.assign(Object.assign({}, annotation), { focus: part })))));\r\n    const inlineCodeAnnotations = mapWithDefault(expandedAnnotations, [], annotations => annotations.filter(isInline));\r\n    const multilineCodeAnnotations = mapWithDefault(expandedAnnotations, [], annotations => annotations.filter(a => !isInline(a)));\r\n    return {\r\n        inlineAnnotations: map(inlineCodeAnnotations, annotations => parseInlineAnnotations(annotations)),\r\n        multilineAnnotations: map(multilineCodeAnnotations, annotations => parseMultilineAnnotations(annotations)),\r\n    };\r\n}\r\nfunction isInline(annotation) {\r\n    return hasColumns(annotation.focus);\r\n}\r\nfunction parseInlineAnnotations(annotations) {\r\n    const annotationMap = {};\r\n    annotations.forEach(annotation => {\r\n        const focusMap = parsePartToObject(annotation.focus);\r\n        const lineNumber = +Object.keys(focusMap)[0];\r\n        const columnNumbersList = focusMap[lineNumber];\r\n        const lineAnnotations = annotationMap[lineNumber] || [];\r\n        lineAnnotations.push({\r\n            columnNumbers: columnNumbersList[0],\r\n            data: annotation.data,\r\n            Component: annotation.Component,\r\n        });\r\n        annotationMap[lineNumber] = lineAnnotations;\r\n    });\r\n    return annotationMap;\r\n}\r\nfunction parseMultilineAnnotations(annotations) {\r\n    return annotations.map(annotation => {\r\n        return {\r\n            lineNumbers: parseExtremes(annotation.focus),\r\n            data: annotation.data,\r\n            Component: annotation.Component,\r\n        };\r\n    });\r\n}\r\n// --- multiline\r\nfunction annotateMultiline(lines, annotations) {\r\n    return {\r\n        prev: annotateMultilineSide(lines, annotations.prev, line => line.lineNumber.prev),\r\n        next: annotateMultilineSide(lines, annotations.next, line => line.lineNumber.next),\r\n    };\r\n}\r\nfunction annotateMultilineSide(lines, ogAnnotations, getLineNumber) {\r\n    const annotations = [...ogAnnotations];\r\n    annotations.sort((a, b) => a.lineNumbers.start - b.lineNumbers.start);\r\n    let lineIndex = 0;\r\n    const groups = [];\r\n    while (lineIndex < lines.length) {\r\n        const annotation = annotations[0];\r\n        let line = lines[lineIndex];\r\n        if (annotation &&\r\n            getLineNumber(line) > annotation.lineNumbers.start) {\r\n            throw \"Code Hike can't handle two annotations for the same line\";\r\n        }\r\n        if (annotation &&\r\n            getLineNumber(line) === annotation.lineNumbers.start) {\r\n            // create annotation group\r\n            const group = {\r\n                lines: [],\r\n                annotation,\r\n            };\r\n            while (line &&\r\n                (!getLineNumber(line) ||\r\n                    getLineNumber(line) <=\r\n                        annotation.lineNumbers.end)) {\r\n                group.lines.push(line);\r\n                line = lines[++lineIndex];\r\n            }\r\n            groups.push(group);\r\n            annotations.shift();\r\n        }\r\n        else if (!annotation) {\r\n            // create unannotated group until the end\r\n            groups.push({ lines: lines.slice(lineIndex) });\r\n            lineIndex = lines.length;\r\n        }\r\n        else {\r\n            // create unannotated group until next annotation\r\n            const group = {\r\n                lines: [],\r\n            };\r\n            while (line &&\r\n                (!getLineNumber(line) ||\r\n                    getLineNumber(line) <\r\n                        annotation.lineNumbers.start)) {\r\n                group.lines.push(line);\r\n                line = lines[++lineIndex];\r\n            }\r\n            groups.push(group);\r\n        }\r\n    }\r\n    return groups;\r\n}\r\n// --- inline\r\nfunction annotateInline(lines, inlineAnnotations) {\r\n    return lines.map((_a) => {\r\n        var { groups } = _a, line = __rest(_a, [\"groups\"]);\r\n        const { lineNumber } = line;\r\n        const annotations = {\r\n            prev: lineNumber.prev\r\n                ? inlineAnnotations.prev[lineNumber.prev] || []\r\n                : [],\r\n            next: lineNumber.next\r\n                ? inlineAnnotations.next[lineNumber.next] || []\r\n                : [],\r\n        };\r\n        return Object.assign(Object.assign({}, line), { annotatedGroups: annotateLineTokenGroups(groups, annotations) });\r\n    });\r\n}\r\n/**\r\n * Generate a list of annotated groups tweens\r\n * each annotated group contains a list of token groups and maybe an annotation.\r\n * The two annotated groups in a tween doesn't need to have the same token groups.\r\n */\r\nfunction annotateLineTokenGroups(tokenGroups, annotations) {\r\n    let prevTokenGroups = [...tokenGroups];\r\n    let nextTokenGroups = [...tokenGroups];\r\n    const prevAnnotations = [...annotations.prev];\r\n    const nextAnnotations = [...annotations.next];\r\n    const annotatedGroups = [];\r\n    let prevColumn = 1;\r\n    let nextColumn = 1;\r\n    // iterate until we consume both lists of token groups\r\n    while (prevTokenGroups.length > 0 ||\r\n        nextTokenGroups.length > 0) {\r\n        const prevAnnotation = prevAnnotations[0];\r\n        const nextAnnotation = nextAnnotations[0];\r\n        const isPrevAnnotationStarting = prevAnnotation &&\r\n            prevAnnotation.columnNumbers.start === prevColumn;\r\n        const isNextAnnotationStarting = nextAnnotation &&\r\n            nextAnnotation.columnNumbers.start === nextColumn;\r\n        if (prevColumn < nextColumn) {\r\n            // if the prev list is behind we consume from prevTokenGroups\r\n            if (isPrevAnnotationStarting) {\r\n                // if there is an annotation starting at this point we consume until the annotation ends\r\n                const end = prevAnnotation.columnNumbers.end + 1;\r\n                annotatedGroups.push({\r\n                    prev: {\r\n                        annotation: prevAnnotation,\r\n                        groups: shiftGroups(prevTokenGroups, prevColumn, end),\r\n                    },\r\n                });\r\n                prevColumn = end;\r\n                prevAnnotations.shift();\r\n            }\r\n            else {\r\n                // if there isn't we consume until we sync with the next list or an annotation starts\r\n                const end = Math.min(nextColumn, (prevAnnotation === null || prevAnnotation === void 0 ? void 0 : prevAnnotation.columnNumbers.start) || nextColumn);\r\n                annotatedGroups.push({\r\n                    prev: {\r\n                        groups: shiftGroups(prevTokenGroups, prevColumn, end),\r\n                    },\r\n                });\r\n                prevColumn = end;\r\n            }\r\n        }\r\n        else if (prevColumn > nextColumn) {\r\n            // if the next list is behind we consume from nextTokenGroups\r\n            if (isNextAnnotationStarting) {\r\n                // if there is an annotation starting at this point we consume until the annotation ends\r\n                const end = nextAnnotation.columnNumbers.end + 1;\r\n                annotatedGroups.push({\r\n                    next: {\r\n                        annotation: nextAnnotation,\r\n                        groups: shiftGroups(nextTokenGroups, nextColumn, end),\r\n                    },\r\n                });\r\n                nextColumn = end;\r\n                nextAnnotations.shift();\r\n            }\r\n            else {\r\n                // if there isn't we consume until we sync with the prev list or an annotation starts\r\n                const end = Math.min(prevColumn, (nextAnnotation === null || nextAnnotation === void 0 ? void 0 : nextAnnotation.columnNumbers.start) || prevColumn);\r\n                annotatedGroups.push({\r\n                    next: {\r\n                        groups: shiftGroups(nextTokenGroups, nextColumn, end),\r\n                    },\r\n                });\r\n                nextColumn = end;\r\n            }\r\n        }\r\n        else if (prevColumn == nextColumn) {\r\n            // if we are at the same column in both lists we have 5 different cases\r\n            if (isPrevAnnotationStarting &&\r\n                isNextAnnotationStarting &&\r\n                prevAnnotation.columnNumbers.end ===\r\n                    nextAnnotation.columnNumbers.end) {\r\n                // both annotations starts here and end at the same place, so we puth both in one tween annotated group\r\n                const end = nextAnnotation.columnNumbers.end + 1;\r\n                annotatedGroups.push({\r\n                    prev: {\r\n                        annotation: prevAnnotation,\r\n                        groups: shiftGroups(prevTokenGroups, prevColumn, end),\r\n                    },\r\n                    next: {\r\n                        annotation: nextAnnotation,\r\n                        groups: shiftGroups(nextTokenGroups, nextColumn, end),\r\n                    },\r\n                });\r\n                prevColumn = end;\r\n                nextColumn = end;\r\n                prevAnnotations.shift();\r\n                nextAnnotations.shift();\r\n            }\r\n            else if (isPrevAnnotationStarting) {\r\n                // if only the prev annotation starting at this point we consume until the annotation ends\r\n                const end = prevAnnotation.columnNumbers.end + 1;\r\n                annotatedGroups.push({\r\n                    prev: {\r\n                        annotation: prevAnnotation,\r\n                        groups: shiftGroups(prevTokenGroups, prevColumn, end),\r\n                    },\r\n                });\r\n                prevColumn = end;\r\n                prevAnnotations.shift();\r\n            }\r\n            else if (isNextAnnotationStarting) {\r\n                // same for the next annotation\r\n                const end = nextAnnotation.columnNumbers.end + 1;\r\n                annotatedGroups.push({\r\n                    next: {\r\n                        annotation: nextAnnotation,\r\n                        groups: shiftGroups(nextTokenGroups, nextColumn, end),\r\n                    },\r\n                });\r\n                nextColumn = end;\r\n                nextAnnotations.shift();\r\n            }\r\n            else if (!prevAnnotation && !nextAnnotation) {\r\n                // if there aren't any remaining annotation we add a last group\r\n                annotatedGroups.push({\r\n                    prev: { groups: prevTokenGroups },\r\n                    next: { groups: nextTokenGroups },\r\n                });\r\n                // this is the last iteration\r\n                prevTokenGroups = [];\r\n                nextTokenGroups = [];\r\n            }\r\n            else {\r\n                // if we still have annotations left we consume until the next one\r\n                const end = Math.min((prevAnnotation === null || prevAnnotation === void 0 ? void 0 : prevAnnotation.columnNumbers.start) ||\r\n                    Number.MAX_VALUE, (nextAnnotation === null || nextAnnotation === void 0 ? void 0 : nextAnnotation.columnNumbers.start) ||\r\n                    Number.MAX_VALUE);\r\n                annotatedGroups.push({\r\n                    prev: {\r\n                        groups: shiftGroups(prevTokenGroups, prevColumn, end),\r\n                    },\r\n                    next: {\r\n                        groups: shiftGroups(nextTokenGroups, nextColumn, end),\r\n                    },\r\n                });\r\n                prevColumn = end;\r\n                nextColumn = end;\r\n            }\r\n        }\r\n    }\r\n    return annotatedGroups;\r\n}\r\n/**\r\n * Remove and return some groups from the beggining of the array\r\n * startColumn is the column at which the array is starting\r\n * (because other groups has been already removed)\r\n * newStartColumn is the first column that should stay in the array\r\n */\r\nfunction shiftGroups(tokenGroups, startColumn, newStartColumn) {\r\n    const removedGroups = [];\r\n    let currentStartColumn = startColumn;\r\n    while (currentStartColumn < newStartColumn &&\r\n        tokenGroups.length > 0) {\r\n        const currentTokenGroup = tokenGroups.shift();\r\n        removedGroups.push(currentTokenGroup);\r\n        const length = currentTokenGroup.tokens.reduce((a, t) => a + t.content.length, 0);\r\n        currentStartColumn += length;\r\n    }\r\n    return removedGroups;\r\n}\n\nfunction useStepParser(input) {\r\n    const { highlightedLines, focus } = input;\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => parse$1(input), [\r\n        highlightedLines.prev,\r\n        highlightedLines.next,\r\n        focus.prev,\r\n        focus.next,\r\n    ]);\r\n}\r\nfunction parse$1({ focus, annotations, highlightedLines, lang, }) {\r\n    const normalCode = getCode(highlightedLines);\r\n    const mergedCode = merge(normalCode, highlightedLines);\r\n    const { inlineAnnotations, multilineAnnotations } = parseAllAnnotations(annotations);\r\n    const focusedCode = splitLinesByFocus(mergedCode, withDefault(focus, null), inlineAnnotations);\r\n    const annotatedCode = addAnnotations(focusedCode, inlineAnnotations, multilineAnnotations);\r\n    const codeStep = addExtraStuff(annotatedCode, normalCode, lang);\r\n    // console.log({ codeStep })\r\n    return codeStep;\r\n}\r\n// 0 - normalize\r\nfunction getCode(highlightedLines) {\r\n    return map(highlightedLines, lines => lines\r\n        .map(line => line.tokens.map(t => t.content).join(\"\"))\r\n        .join(\"\\n\")\r\n        .trimEnd()\r\n        .concat(\"\\n\"));\r\n}\r\nfunction merge(code, highlightedLines) {\r\n    return mergeLines(code, highlightedLines);\r\n}\r\nfunction parseAllAnnotations(annotations) {\r\n    return parseAnnotations(annotations);\r\n}\r\nfunction splitLinesByFocus(mergedCode, focus, annotations) {\r\n    return splitByFocus(mergedCode, focus, annotations);\r\n}\r\nfunction addAnnotations(_a, inlineAnnotations, annotations) {\r\n    var { lines } = _a, focusedCode = __rest(_a, [\"lines\"]);\r\n    const annotatedLines = annotateInline(lines, inlineAnnotations);\r\n    const lineGroups = annotateMultiline(annotatedLines, annotations);\r\n    return Object.assign(Object.assign({}, focusedCode), { lineGroups: lineGroups, lineCount: {\r\n            prev: lines.filter(l => l.lineNumber.prev != null)\r\n                .length,\r\n            next: lines.filter(l => l.lineNumber.next != null)\r\n                .length,\r\n        } });\r\n}\r\nfunction addExtraStuff(codeStep, code, lang) {\r\n    const vInterval = verticalInterval(codeStep.enterCount, codeStep.exitCount);\r\n    const newGroups = map(codeStep.lineGroups, groups => groups.map(group => (Object.assign(Object.assign({}, group), { lines: getLinesWithElements(group.lines, vInterval, codeStep.enterCount, codeStep.exitCount) }))));\r\n    return Object.assign(Object.assign({}, codeStep), { groups: newGroups, verticalInterval: vInterval, code,\r\n        lang });\r\n}\r\nfunction verticalInterval(enterCount, exitCount) {\r\n    if (enterCount <= 0 && exitCount <= 0)\r\n        return [0, 1];\r\n    if (enterCount <= 0 && exitCount >= 1)\r\n        return [0.33, 1];\r\n    if (enterCount >= 1 && exitCount <= 0)\r\n        return [0, 0.67];\r\n    return [0.25, 0.75];\r\n}\n\nfunction SmoothContainer({ dimensions, codeStep, children, minZoom = 0, maxZoom = 1.2, center = false, progress, }) {\r\n    const { prev, next } = getTweenContentProps({\r\n        codeStep,\r\n        dimensions,\r\n        minZoom,\r\n        maxZoom,\r\n        horizontalCenter: center,\r\n    });\r\n    // all these tweens depends on annotations now (t instead of progress)\r\n    const zoom = tweenProp(prev.zoom, next.zoom, progress);\r\n    const dx = tweenProp(prev.dx, next.dx, progress);\r\n    const dy = tweenProp(prev.dy, next.dy, progress, codeStep.verticalInterval);\r\n    const focusHeight = tweenProp(prev.focusHeight, next.focusHeight, progress);\r\n    const focusWidth = tweenProp(prev.focusWidth, next.focusWidth, progress);\r\n    const lineNumberPad = ((dimensions === null || dimensions === void 0 ? void 0 : dimensions.lineNumberWidth) || 0) * zoom;\r\n    const leftPad = lineNumberPad || 16;\r\n    const width = Math.max(focusWidth + leftPad, dimensions.contentWidth);\r\n    const startX = leftPad / zoom;\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Container, { width: dimensions.containerWidth, height: dimensions.containerHeight, lang: codeStep.lang },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Content$1, { dx: dx, dy: dy, scale: zoom, height: Math.max(focusHeight, dimensions.contentHeight), width: width }, children(focusWidth, startX))));\r\n}\r\nfunction Container({ width, height, children, lang, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", { style: {\r\n            width,\r\n            height,\r\n            position: \"relative\",\r\n            overflow: \"auto\",\r\n        }, className: \"ch-code-scroll-parent\", children: children, \"data-ch-lang\": lang }));\r\n}\r\nfunction Content$1({ dx, dy, scale, height, width, children, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            transformOrigin: \"top left\",\r\n            width: width,\r\n            height: height,\r\n            overflow: \"hidden\",\r\n        }, className: \"ch-code-scroll-content\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\r\n                position: \"absolute\",\r\n                top: 0,\r\n                left: 0,\r\n                transform: `translateX(${dx}px) translateY(${dy}px) scale(${scale})`,\r\n                transformOrigin: \"left top\",\r\n                width: width / scale,\r\n                height: (height - 2 * dy) / scale,\r\n                // outline: \"1px solid yellow\",\r\n            }, children: children })));\r\n}\r\nfunction getTweenContentProps(_a) {\r\n    var { codeStep } = _a, rest = __rest(_a, [\"codeStep\"]);\r\n    const { lineHeight, lineWidth } = rest.dimensions;\r\n    const paramTween = {\r\n        prev: {\r\n            extremes: [\r\n                codeStep.firstFocusedLineNumber.prev - 1,\r\n                codeStep.lastFocusedLineNumber.prev - 1,\r\n            ],\r\n            originalContentHeight: codeStep.lineCount.prev * lineHeight,\r\n            lineWidth: lineWidth[0],\r\n        },\r\n        next: {\r\n            extremes: [\r\n                codeStep.firstFocusedLineNumber.next - 1,\r\n                codeStep.lastFocusedLineNumber.next - 1,\r\n            ],\r\n            originalContentHeight: codeStep.lineCount.next * lineHeight,\r\n            lineWidth: lineWidth[1],\r\n        },\r\n    };\r\n    return map(paramTween, ({ extremes, originalContentHeight, lineWidth }) => getContentProps(Object.assign({ extremes,\r\n        originalContentHeight,\r\n        lineWidth }, rest)));\r\n}\r\nfunction getContentProps({ dimensions, lineWidth, minZoom, maxZoom, extremes, originalContentHeight, horizontalCenter, }) {\r\n    const { lineHeight } = dimensions;\r\n    const containerHeight = dimensions === null || dimensions === void 0 ? void 0 : dimensions.contentHeight;\r\n    const containerWidth = dimensions === null || dimensions === void 0 ? void 0 : dimensions.contentWidth;\r\n    const originalFocusHeight = (extremes[1] - extremes[0] + 3) * lineHeight;\r\n    const leftPadding = (dimensions === null || dimensions === void 0 ? void 0 : dimensions.lineNumberWidth) || 16;\r\n    const rightPadding = 16;\r\n    const zoom = Math.max(Math.min((containerWidth - leftPadding - rightPadding) /\r\n        lineWidth, containerHeight / originalFocusHeight, maxZoom), minZoom);\r\n    const contentHeight = originalContentHeight * zoom;\r\n    const focusStart = (extremes[0] - 1) * lineHeight * zoom;\r\n    const focusEnd = (extremes[1] + 2) * lineHeight * zoom;\r\n    const focusCenter = (focusEnd + focusStart) / 2;\r\n    const focusHeight = focusEnd - focusStart;\r\n    const dy = containerHeight > contentHeight\r\n        ? (containerHeight - contentHeight) / 2\r\n        : clamp$1(containerHeight / 2 - focusCenter, Math.max(containerHeight - contentHeight, -focusStart // to ensure first focus line is shown when focus is bigger than container\r\n        ), 0);\r\n    const dx = horizontalCenter\r\n        ? Math.max(containerWidth / 2 - (lineWidth * zoom) / 2, 0)\r\n        : 0;\r\n    return {\r\n        zoom,\r\n        dx,\r\n        dy,\r\n        focusHeight: focusHeight,\r\n        focusWidth: lineWidth * zoom,\r\n    };\r\n}\r\nfunction clamp$1(num, min, max) {\r\n    return num <= min ? min : num >= max ? max : num;\r\n}\r\nfunction tweenProp(start, end, progress, interval = [0, 1]) {\r\n    return tween$1({\r\n        fixed: false,\r\n        interval,\r\n        extremes: [start, end],\r\n        ease: easing.easeInOutCubic,\r\n    }, progress);\r\n}\n\nfunction SmoothLines(props) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(SmoothContainer, Object.assign({}, props), (focusWidth, startX) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Lines, { codeStep: props.codeStep, focusWidth: focusWidth, lineHeight: props.dimensions.lineHeight, progress: props.progress, startX: startX, lineNumberWidth: props.dimensions.lineNumberWidth }))));\r\n}\r\nfunction Lines({ codeStep, progress, focusWidth, lineHeight, startX, lineNumberWidth, }) {\r\n    const groups = progress < 0.5\r\n        ? codeStep.groups.prev\r\n        : codeStep.groups.next;\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, groups.map((group, i) => {\r\n        if (!group.annotation) {\r\n            return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(LineGroup, { lines: group.lines, t: progress, focusWidth: focusWidth, lineHeight: lineHeight, startX: startX, key: i, lineNumberWidth: lineNumberWidth }));\r\n        }\r\n        const startY = tween$1(group.lines[0].tweenY, progress);\r\n        const lineCount = group.annotation.lineNumbers.end -\r\n            group.annotation.lineNumbers.start +\r\n            1;\r\n        const Component = group.annotation.Component;\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, { style: {\r\n                position: \"absolute\",\r\n                height: lineCount * lineHeight,\r\n                width: \"100%\",\r\n                transform: `translateY(${startY * lineHeight}px)`,\r\n            }, key: i, data: group.annotation.data, isInline: false, lines: group.lines },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(LineGroup, { lines: group.lines, t: progress, focusWidth: focusWidth, lineHeight: lineHeight, startY: startY, startX: startX, lineNumberWidth: lineNumberWidth })));\r\n    })));\r\n}\r\nfunction LineGroup({ lines, focusWidth, lineHeight, t, startX, startY = 0, lineNumberWidth, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, lines.map((line, key) => {\r\n        const { tweenX, tweenY, focused } = line;\r\n        const dx = tween$1(tweenX, t);\r\n        const dy = tween$1(tweenY, t);\r\n        const opacity = getOpacity(focused, t, dx);\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: key },\r\n            lineNumberWidth ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"ch-code-line-number\", style: {\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    left: 0,\r\n                    transform: `translate(${dx * focusWidth}px, ${(dy - startY) * lineHeight}px)`,\r\n                    width: lineNumberWidth,\r\n                    opacity,\r\n                } }, t < 0.5\r\n                ? line.lineNumber.prev\r\n                : line.lineNumber.next)) : undefined,\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(LineContainer, { dx: startX + dx * focusWidth, dy: (dy - startY) * lineHeight, width: focusWidth, opacity: opacity },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(LineContent, { line: line, progress: t, dx: dx }))));\r\n    })));\r\n}\r\nfunction LineContent({ line, progress, dx, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\r\n            display: \"inline-block\",\r\n            width: \"100%\",\r\n        } },\r\n        line.annotatedGroups.map((annotatedGroup, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(AnnotatedTokens, { annotatedGroup: annotatedGroup, progress: progress, dx: dx, key: i }))),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null)));\r\n}\r\nfunction AnnotatedTokens({ annotatedGroup, progress, dx, }) {\r\n    var _a, _b;\r\n    const annotated = progress < 0.5\r\n        ? annotatedGroup.prev\r\n        : annotatedGroup.next;\r\n    const tokenGroups = (annotated === null || annotated === void 0 ? void 0 : annotated.groups) || [];\r\n    const Component = (_a = annotated === null || annotated === void 0 ? void 0 : annotated.annotation) === null || _a === void 0 ? void 0 : _a.Component;\r\n    const children = tokenGroups.map((group, i) => {\r\n        const opacity = getOpacity(group.focused, progress, dx);\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { style: { opacity }, key: i + 1 }, group.element));\r\n    });\r\n    return Component ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, { children: children, data: (_b = annotated === null || annotated === void 0 ? void 0 : annotated.annotation) === null || _b === void 0 ? void 0 : _b.data, isInline: true })) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children));\r\n}\r\nfunction LineContainer({ children, dx, dy, opacity, width, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            transform: `translate(${dx}px, ${dy}px)`,\r\n            width,\r\n            display: opacity <= 0 ? \"none\" : undefined,\r\n        } }, children));\r\n}\r\nconst OFF_OPACITY = 0.33;\r\nfunction getOpacity(focused, progress, dx) {\r\n    return (tween$1({\r\n        fixed: false,\r\n        extremes: [\r\n            focused.prev ? 0.99 : OFF_OPACITY,\r\n            focused.next ? 0.99 : OFF_OPACITY,\r\n        ],\r\n        interval: [0, 1],\r\n    }, progress) -\r\n        Math.abs(dx) * 1);\r\n}\n\nfunction CopyButton({ content, style, className, }) {\r\n    const [copied, setCopied] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { type: \"button\", title: \"Copy code\", className: className, style: style, onClick: () => {\r\n            copyToClipboard(content);\r\n            setCopied(true);\r\n            setTimeout(() => {\r\n                setCopied(false);\r\n            }, 1200);\r\n        } },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", xmlns: \"http://www.w3.org/2000/svg\" }, copied ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M5 13l4 4L19 7\" })) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: \"1.6px\", d: \"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" })))));\r\n}\r\nfunction copyToClipboard(text) {\r\n    if (!navigator.clipboard) {\r\n        fallbackCopyTextToClipboard(text);\r\n        return;\r\n    }\r\n    navigator.clipboard.writeText(text);\r\n}\r\nfunction fallbackCopyTextToClipboard(text) {\r\n    var textArea = document.createElement(\"textarea\");\r\n    textArea.value = text;\r\n    // Avoid scrolling to bottom\r\n    textArea.style.top = \"0\";\r\n    textArea.style.left = \"0\";\r\n    textArea.style.position = \"fixed\";\r\n    document.body.appendChild(textArea);\r\n    textArea.focus();\r\n    textArea.select();\r\n    try {\r\n        var successful = document.execCommand(\"copy\");\r\n        // var msg = successful ? \"successful\" : \"unsuccessful\"\r\n        // console.log(\"Fallback: Copying text command was \" + msg)\r\n    }\r\n    catch (err) {\r\n        // console.error(\"Fallback: Oops, unable to copy\", err)\r\n    }\r\n    document.body.removeChild(textArea);\r\n}\n\nfunction useCodeShift({ tween, }) {\r\n    return useStepParser({\r\n        highlightedLines: map(tween, tween => tween.code.lines),\r\n        focus: map(tween, tween => tween.focus),\r\n        annotations: map(tween, tween => tween.annotations),\r\n        lang: anyValue(tween, tween => { var _a; return (_a = tween === null || tween === void 0 ? void 0 : tween.code) === null || _a === void 0 ? void 0 : _a.lang; }),\r\n    });\r\n}\r\nconst DEFAULT_MIN_COLUMNS = 10;\r\nfunction CodeTween(_a) {\r\n    var { tween, progress, config } = _a, preProps = __rest(_a, [\"tween\", \"progress\", \"config\"]);\r\n    const stepInfo = useCodeShift({ tween });\r\n    const { element, dimensions } = useDimensions(stepInfo.code, map(tween, tween => tween.focus), config.minColumns || DEFAULT_MIN_COLUMNS, config.lineNumbers || false, config.rows, [config.parentHeight]);\r\n    return !dimensions || config.debug ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(BeforeDimensions, { element: element, htmlProps: preProps, debug: config.debug })) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(AfterDimensions, { dimensions: dimensions, stepInfo: stepInfo, config: config, progress: progress, htmlProps: preProps }));\r\n}\r\nfunction BeforeDimensions({ element, htmlProps, debug, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wrapper, { htmlProps: htmlProps, measured: false }, element));\r\n}\r\nfunction AfterDimensions({ config: { minZoom = 1, maxZoom = 1, horizontalCenter = false, }, dimensions, stepInfo, progress, htmlProps, config, }) {\r\n    var _a;\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wrapper, { htmlProps: htmlProps, measured: true },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(SmoothLines, { codeStep: stepInfo, progress: progress, dimensions: dimensions, \r\n            // TODO move to dimensions?\r\n            minZoom: minZoom, maxZoom: maxZoom, center: horizontalCenter }),\r\n        config.showCopyButton ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CopyButton, { className: \"ch-code-button\", content: (_a = stepInfo === null || stepInfo === void 0 ? void 0 : stepInfo.code) === null || _a === void 0 ? void 0 : _a.prev })) : undefined));\r\n}\r\nfunction Wrapper({ htmlProps, children, measured, }) {\r\n    return (\r\n    // not using <pre> because https://github.com/code-hike/codehike/issues/120\r\n    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", Object.assign({}, htmlProps, { className: `ch-code-wrapper ${(htmlProps === null || htmlProps === void 0 ? void 0 : htmlProps.className) || \"\"}`, \"data-ch-measured\": measured, children: children })));\r\n}\n\nfunction currentTime() {\n  if (typeof window !== \"undefined\") {\n    return performance.now();\n  } else {\n    return 0;\n  }\n}\n\nfunction useSpringInstance(target, config) {\n  var ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = {\n      config: getConfigWithDefaults(target, config),\n      state: getInitialState(target, config)\n    };\n  }\n\n  return ref.current;\n}\nfunction getConfigWithDefaults(target, _ref) {\n  var stiffness = _ref.stiffness,\n      damping = _ref.damping,\n      mass = _ref.mass,\n      decimals = _ref.decimals,\n      teleport = _ref.teleport;\n  return {\n    X: target,\n    k: stiffness !== null && stiffness !== void 0 ? stiffness : 170,\n    c: damping !== null && damping !== void 0 ? damping : 26,\n    m: mass !== null && mass !== void 0 ? mass : 1,\n    teleport: teleport !== null && teleport !== void 0 ? teleport : false,\n    decimals: decimals !== null && decimals !== void 0 ? decimals : 2\n  };\n}\n\nfunction getInitialState(target, _ref2) {\n  var from = _ref2.from,\n      initialSpeed = _ref2.initialSpeed;\n  return {\n    x0: from !== null && from !== void 0 ? from : target,\n    v0: initialSpeed !== null && initialSpeed !== void 0 ? initialSpeed : 0,\n    t0: currentTime(),\n    raf: null\n  };\n}\n\nvar sqrt = Math.sqrt,\n    exp = Math.exp,\n    sin = Math.sin,\n    cos = Math.cos;\nfunction spring(_ref) {\n  var x0 = _ref.x0,\n      v0 = _ref.v0,\n      t0 = _ref.t0,\n      t = _ref.t,\n      k = _ref.k,\n      c = _ref.c,\n      m = _ref.m,\n      X = _ref.X;\n  var dx = x0 - X;\n  var dt = (t - t0) / 1000;\n  var radicand = c * c - 4 * k * m;\n\n  if (radicand > 0) {\n    var rp = (-c + sqrt(radicand)) / (2 * m);\n    var rn = (-c - sqrt(radicand)) / (2 * m);\n    var a = (dx * rp - v0) / (rp - rn);\n    var b = (v0 - dx * rn) / (rp - rn);\n    return {\n      x: X + a * exp(rn * dt) + b * exp(rp * dt),\n      v: a * rn * exp(rn * dt) + b * rp * exp(rp * dt)\n    };\n  } else if (radicand < 0) {\n    var r = -c / (2 * m);\n    var s = sqrt(-radicand) / (2 * m);\n    var _a = dx;\n\n    var _b = (v0 - r * dx) / s;\n\n    return {\n      x: X + exp(r * dt) * (_a * cos(s * dt) + _b * sin(s * dt)),\n      v: exp(r * dt) * ((_b * s + _a * r) * cos(s * dt) - (_a * s - _b * r) * sin(s * dt))\n    };\n  } else {\n    var _r = -c / (2 * m);\n\n    var _a2 = dx;\n\n    var _b2 = v0 - _r * dx;\n\n    return {\n      x: X + (_a2 + _b2 * dt) * exp(_r * dt),\n      v: (_b2 + _a2 * _r + _b2 * _r * dt) * exp(_r * dt)\n    };\n  }\n}\n\nvar nextFrameQueue = [];\nvar nextFrameId = null;\nfunction queueAnimationFrame(fn) {\n  var length = nextFrameQueue.push(fn);\n\n  if (length === 1) {\n    nextFrameId = requestAnimationFrame(runQueue);\n  }\n\n  return [nextFrameId, length - 1];\n}\nfunction unqueueAnimationFrame(_ref) {\n  var frameId = _ref[0],\n      index = _ref[1];\n\n  if (frameId === nextFrameId) {\n    delete nextFrameQueue[index];\n  }\n}\n\nfunction runQueue() {\n  var now = currentTime();\n  var queue = nextFrameQueue;\n  nextFrameQueue = [];\n  (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates)(function () {\n    return queue.forEach(function (task) {\n      return task && task(now);\n    });\n  });\n}\n\nvar useLayoutEffect$3 = typeof window !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useSpring(target, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState(),\n      forceUpdate = _React$useState[1];\n\n  var newConfig = getConfigWithDefaults(target, config);\n\n  var _useSpringInstance = useSpringInstance(target, config),\n      state = _useSpringInstance.state,\n      oldConfig = _useSpringInstance.config; // TODO all springs should use the same t in the same frame\n\n\n  var t = currentTime();\n  var x0 = state.x0,\n      v0 = state.v0,\n      t0 = state.t0;\n  var k = oldConfig.k,\n      c = oldConfig.c,\n      m = oldConfig.m,\n      X = oldConfig.X;\n\n  var _ref = newConfig.teleport ? {\n    x: X,\n    v: 0\n  } : spring({\n    x0: x0,\n    v0: v0,\n    t0: t0,\n    t: t,\n    k: k,\n    c: c,\n    m: m,\n    X: X\n  }),\n      x = _ref.x,\n      v = _ref.v;\n\n  var moving = isMoving(x, v, t, newConfig);\n  useLayoutEffect$3(function () {\n    Object.assign(oldConfig, newConfig);\n  }, [newConfig.X, newConfig.k, newConfig.c, newConfig.m, newConfig.teleport]);\n  useLayoutEffect$3(function () {\n    state.x0 = x;\n    state.v0 = v;\n    state.t0 = t;\n  }, [x, v, t]);\n  useLayoutEffect$3(function () {\n    var loop = function loop(now) {\n      var x0 = state.x0,\n          v0 = state.v0,\n          t0 = state.t0;\n      var k = oldConfig.k,\n          c = oldConfig.c,\n          m = oldConfig.m,\n          X = oldConfig.X,\n          decimals = oldConfig.decimals;\n\n      var _spring = spring({\n        x0: x0,\n        v0: v0,\n        t0: t0,\n        t: now,\n        k: k,\n        c: c,\n        m: m,\n        X: X\n      }),\n          nextX = _spring.x;\n\n      if (roundTo(nextX, decimals) !== roundTo(x0, decimals)) {\n        state.raf = null;\n        forceUpdate(now);\n      } else {\n        state.raf = queueAnimationFrame(loop);\n      }\n    };\n\n    if (moving && state.raf == null) {\n      state.raf = queueAnimationFrame(loop);\n    } else if (!moving && state.raf != null) {\n      unqueueAnimationFrame(state.raf);\n      state.raf = null;\n    }\n  });\n  useLayoutEffect$3(function () {\n    return function () {\n      if (state.raf != null) {\n        unqueueAnimationFrame(state.raf);\n      }\n    };\n  }, []);\n  return [roundTo(x, newConfig.decimals), moving];\n}\n\nfunction isMoving(x, v, t, _ref2) {\n  var decimals = _ref2.decimals,\n      X = _ref2.X,\n      k = _ref2.k,\n      c = _ref2.c,\n      m = _ref2.m;\n\n  if (roundTo(x, decimals) !== roundTo(X, decimals)) {\n    return true;\n  }\n\n  var nextT = t + 0.016;\n\n  var _spring2 = spring({\n    x0: x,\n    v0: v,\n    t0: t,\n    t: nextT,\n    k: k,\n    c: c,\n    m: m,\n    X: X\n  }),\n      nextX = _spring2.x;\n\n  return roundTo(nextX, decimals) !== roundTo(X, decimals);\n}\n\nfunction roundTo(x, decimals) {\n  var p = Math.pow(10, decimals);\n  return Math.round(x * p) / p;\n}\n\nconst defaultSpring$1 = {\r\n    stiffness: 120,\r\n    damping: 24,\r\n    mass: 0.2,\r\n    decimals: 3,\r\n};\r\nfunction CodeSpring(_a) {\r\n    var { step, config } = _a, htmlProps = __rest(_a, [\"step\", \"config\"]);\r\n    const { tween, t } = useStepSpring$1(step, config.spring);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTween, Object.assign({ tween: tween, progress: t, config: config }, htmlProps)));\r\n}\r\nfunction useStepSpring$1(step, springConfig = defaultSpring$1) {\r\n    const [{ target, steps, index }, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\r\n        target: 2,\r\n        steps: [step, step, step],\r\n        index: 0,\r\n    });\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        const lastStep = steps[steps.length - 1];\r\n        if (lastStep != step) {\r\n            setState(s => updateStepSpring$1(s, step, progress));\r\n        }\r\n    }, [step]);\r\n    const [progress] = useSpring(target, springConfig);\r\n    const trioProgress = progress - index;\r\n    const result = trioProgress <= 1\r\n        ? {\r\n            tween: { prev: steps[0], next: steps[1] },\r\n            t: trioProgress,\r\n        }\r\n        : {\r\n            tween: { prev: steps[1], next: steps[2] },\r\n            t: trioProgress - 1,\r\n        };\r\n    return result;\r\n}\r\nfunction updateStepSpring$1(state, newStep, progress) {\r\n    const { steps, target, index } = state;\r\n    const stepsClone = steps.slice();\r\n    const trioProgress = progress - index;\r\n    if (trioProgress < 1) {\r\n        stepsClone[2] = newStep;\r\n        return Object.assign(Object.assign({}, state), { steps: stepsClone });\r\n    }\r\n    else {\r\n        stepsClone[0] = steps[1];\r\n        stepsClone[1] = steps[2];\r\n        stepsClone[2] = newStep;\r\n        return Object.assign(Object.assign({}, state), { steps: stepsClone, target: target + 1, index: index + 1 });\r\n    }\r\n}\n\nconst MiniFrame = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (_a, ref) {\r\n    var { title, children, titleBar, zoom = 1, overflow } = _a, props = __rest(_a, [\"title\", \"children\", \"titleBar\", \"zoom\", \"overflow\"]);\r\n    const bar = titleBar || react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTitleBar, { title: title });\r\n    const zoomStyle = {\r\n        \"--ch-frame-zoom\": zoom,\r\n        overflow,\r\n    };\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", Object.assign({}, props, { ref: ref }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-title-bar\" }, bar),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-content\" },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-zoom\", style: zoomStyle }, children)))));\r\n});\r\nreact__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (_a, ref) {\r\n    var { title, children, titleBar, overflow } = _a, props = __rest(_a, [\"title\", \"children\", \"titleBar\", \"overflow\"]);\r\n    const bar = titleBar || react__WEBPACK_IMPORTED_MODULE_0__.createElement(DefaultTitleBar, { title: title });\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", Object.assign({}, props, { ref: ref }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-simple-frame\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-title-bar\" }, bar),\r\n            children)));\r\n});\r\nfunction DefaultTitleBar({ title }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-left-bar\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(FrameButtons, null)),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-middle-bar\" }, title),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-right-bar\" })));\r\n}\r\nfunction FrameButtons() {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-buttons\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-button ch-frame-button-left\" }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-button-space\" }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-button ch-frame-button-middle\" }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-button-space\" }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-button ch-frame-button-right\" })));\r\n}\n\nconst EditorFrame = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function InnerEditorFrame(_a, ref) {\r\n    var _b;\r\n    var { northPanel, southPanel, terminalPanel, style, height, northButton, southButton, className, onTabClick } = _a, rest = __rest(_a, [\"northPanel\", \"southPanel\", \"terminalPanel\", \"style\", \"height\", \"northButton\", \"southButton\", \"className\", \"onTabClick\"]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", Object.assign({ ref: ref }, rest, { className: \"ch-editor-frame\", style: style }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-title-bar\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(TabsContainer, { tabs: northPanel.tabs, showFrameButtons: true, button: northButton, panel: \"north\", onTabClick: onTabClick })),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { \"data-ch-panel\": \"north\", style: northPanel.style, children: northPanel.children }),\r\n        southPanel && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-frame-title-bar\", style: {\r\n                    transform: (_b = southPanel.style) === null || _b === void 0 ? void 0 : _b.transform,\r\n                } },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(TabsContainer, { tabs: southPanel.tabs, showFrameButtons: false, button: southButton, topBorder: true, panel: \"south\", onTabClick: onTabClick })),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { \"data-ch-panel\": \"south\", children: southPanel.children, style: southPanel.style })))));\r\n});\r\nfunction TabsContainer({ tabs, button, showFrameButtons, topBorder, panel, onTabClick, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        topBorder && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-editor-group-border\" })),\r\n        showFrameButtons ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(FrameButtons, null) : react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null),\r\n        tabs.map(({ title, active, style }) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { key: title, title: title, \"data-ch-tab\": panel, \"data-active\": active, className: \"ch-editor-tab\", style: style, onClick: onTabClick && (() => onTabClick(title)) },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(TabTitle, { title: title })))),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { flex: 1, minWidth: \"0.8em\" } }),\r\n        button));\r\n}\r\nfunction TabTitle({ title }) {\r\n    if (!title) {\r\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null);\r\n    }\r\n    const separatorIndex = title.lastIndexOf(\"/\") + 1;\r\n    const filename = title.substring(separatorIndex);\r\n    const folder = title.substring(0, separatorIndex);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { style: { opacity: 0.5 } }, folder),\r\n        filename));\r\n}\n\nfunction getCommands(text) {\r\n    const [, ...lines] = text.split(/^\\$\\s*/gm);\r\n    const commands = lines.map((c) => {\r\n        const [run, ...outputLines] = c.split(/\\r?\\n/);\r\n        return {\r\n            run,\r\n            output: outputLines.length > 0 ? outputLines.join(\"\\n\") : null,\r\n        };\r\n    });\r\n    const lastCommand = commands[commands.length - 1];\r\n    const isRunning = commands.length > 0 && lastCommand.output != null;\r\n    const title = isRunning ? lastCommand.run.split(/(\\s+)/)[0] : \"bash\";\r\n    return {\r\n        title,\r\n        isRunning,\r\n        commands,\r\n    };\r\n}\n\nconst prompt = react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"ch-terminal-prompt\" }, \"$\");\r\nfunction TerminalContent({ text, progress = 1, style, }) {\r\n    const commands = parse(text, progress);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pre\", { style: style, className: \"ch-terminal-content\" }, commands.map(({ run, output }, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null,\r\n            prompt,\r\n            \" \",\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, run)),\r\n        output && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-terminal-output\" }, output)))))));\r\n}\r\nfunction parse(text, progress) {\r\n    if (!text)\r\n        return [];\r\n    const chars = Math.round(text.length * progress);\r\n    const { commands } = getCommands(text.slice(0, chars));\r\n    return commands;\r\n}\n\nfunction InnerTerminalTransition({ prev = \"\", prevKey, next = \"\", nextKey, progress, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-terminal\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\r\n                position: \"relative\",\r\n                transform: `translateY(-${progress * 100}%)`,\r\n            } },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(TerminalContent, { text: prev, progress: 1, key: prevKey }),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(TerminalContent, { style: { position: \"absolute\" }, text: next, progress: progress, key: nextKey }))));\r\n}\n\nfunction InnerTerminalTransitions({ steps, progress, }) {\r\n    const textSteps = steps.map((s) => s.text);\r\n    const stepProgress = progress % 1;\r\n    const prevIndex = clamp(Math.floor(progress), 0, steps.length - 1);\r\n    const nextIndex = prevIndex + 1;\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerTerminalTransition, { prev: textSteps[prevIndex], prevKey: prevIndex, next: textSteps[nextIndex] || \"\", nextKey: nextIndex, progress: stepProgress }));\r\n}\r\nfunction clamp(x, min, max) {\r\n    return Math.min(Math.max(x, min), max);\r\n}\n\nfunction TerminalPanel({ prev, next, t, backward, }) {\r\n    const height = getHeight({ prev, next, t, backward });\r\n    return !height ? null : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-editor-terminal\", style: { height } },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-editor-terminal-tab\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \"Terminal\")),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-editor-terminal-content\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerTerminalTransitions, { steps: [\r\n                    { text: prev || \"\" },\r\n                    { text: next || \"\" },\r\n                ], progress: t }),\r\n            \")\")));\r\n}\r\nfunction getHeight({ prev, next, t, backward, }) {\r\n    if (!prev && !next)\r\n        return 0;\r\n    if (!prev && next)\r\n        return MAX_HEIGHT * Math.min(t * 4, 1);\r\n    if (prev && !next)\r\n        return MAX_HEIGHT * Math.max(1 - t * 4, 0);\r\n    return MAX_HEIGHT;\r\n}\r\nconst MAX_HEIGHT = 150;\n\nfunction northConfig(codeConfig) {\r\n    if (Array.isArray(codeConfig.rows)) {\r\n        return Object.assign(Object.assign({}, codeConfig), { rows: codeConfig.rows[0] });\r\n    }\r\n    return codeConfig;\r\n}\r\nfunction southConfig(codeConfig) {\r\n    if (Array.isArray(codeConfig.rows)) {\r\n        return Object.assign(Object.assign({}, codeConfig), { rows: codeConfig.rows[1] });\r\n    }\r\n    return codeConfig;\r\n}\r\nfunction useTransition(ref, prev, next, t, backward, codeConfig) {\r\n    // prevSnapshot has the dimensions of the editor for t=0\r\n    // nextSnapshot has the dimensions of the editor for t=1\r\n    const { prevSnapshot, nextSnapshot } = useSnapshots(ref, prev, next);\r\n    // we return the default styles for t=0 until we measure the dimensions\r\n    if (!prevSnapshot) {\r\n        return startingPosition(prev, next, codeConfig);\r\n    }\r\n    // and the same for t=1\r\n    if (!nextSnapshot) {\r\n        return endingPosition(prev, next, codeConfig);\r\n    }\r\n    // TODO this should be commented\r\n    // if (t === 0) {\r\n    //   return startingPosition(prev, next, codeConfig)\r\n    // }\r\n    if (t === 1) {\r\n        return endingPosition(prev, next, codeConfig);\r\n    }\r\n    const inputSouthPanel = prev.southPanel || next.southPanel;\r\n    const { prevNorthFile, prevSouthFile, nextNorthFile, nextSouthFile, } = getStepFiles(prev, next, t == 0 || backward);\r\n    const { northStyle, southStyle } = getPanelStyles(prevSnapshot, nextSnapshot, t);\r\n    const { northTabs, southTabs } = getTabs(prevSnapshot, nextSnapshot, prevNorthFile.name, prevSouthFile === null || prevSouthFile === void 0 ? void 0 : prevSouthFile.name, t);\r\n    return {\r\n        northContent: getContentFromFile(nextNorthFile),\r\n        northPanel: {\r\n            tabs: northTabs,\r\n            style: northStyle,\r\n            children: (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTransition, { codeConfig: northConfig(codeConfig), prevFile: prevNorthFile, nextFile: nextNorthFile, t: t, parentHeight: (northStyle.height ||\r\n                    northStyle.minHeight) })),\r\n        },\r\n        southContent: getContentFromFile(nextSouthFile),\r\n        southPanel: inputSouthPanel && {\r\n            tabs: southTabs,\r\n            style: southStyle,\r\n            children: (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTransition, { codeConfig: southConfig(codeConfig), prevFile: prevSouthFile, nextFile: nextSouthFile, t: t, parentHeight: ((southStyle === null || southStyle === void 0 ? void 0 : southStyle.height) ||\r\n                    (southStyle === null || southStyle === void 0 ? void 0 : southStyle.minHeight)) })),\r\n        },\r\n    };\r\n}\r\n// Returns the t=0 state of the transition\r\nfunction startingPosition(prev, next, codeConfig) {\r\n    const inputNorthPanel = prev.northPanel;\r\n    const inputSouthPanel = prev.southPanel;\r\n    const { prevNorthFile, prevSouthFile, nextNorthFile, nextSouthFile, } = getStepFiles(prev, next, true);\r\n    return {\r\n        northContent: getContentFromFile(prevNorthFile),\r\n        northPanel: {\r\n            tabs: inputNorthPanel.tabs.map(title => ({\r\n                title,\r\n                active: title === inputNorthPanel.active,\r\n                style: {},\r\n            })),\r\n            style: {\r\n                flexGrow: 1,\r\n                overflow: \"hidden\",\r\n            },\r\n            children: (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTransition, { codeConfig: northConfig(codeConfig), prevFile: prevNorthFile, nextFile: prevNorthFile, t: 0, parentHeight: \"0\" })),\r\n        },\r\n        southContent: getContentFromFile(prevSouthFile),\r\n        southPanel: inputSouthPanel && {\r\n            tabs: inputSouthPanel.tabs.map(title => ({\r\n                title,\r\n                active: title === inputSouthPanel.active,\r\n                style: {},\r\n            })),\r\n            style: {\r\n                flexGrow: 1,\r\n                overflow: \"hidden\",\r\n            },\r\n            children: (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTransition, { codeConfig: southConfig(codeConfig), prevFile: prevSouthFile, nextFile: prevSouthFile, t: 0, parentHeight: \"0\" })),\r\n        },\r\n    };\r\n}\r\n// Returns the t=1 state of the transition\r\nfunction endingPosition(prev, next, codeConfig) {\r\n    var _a;\r\n    const inputNorthPanel = next.northPanel;\r\n    const inputSouthPanel = next.southPanel;\r\n    let { prevNorthFile, prevSouthFile, nextNorthFile, nextSouthFile, } = getStepFiles(prev, next, false);\r\n    // getStepFiles return the intermediate files, we need to patch the ending state (2to1south)\r\n    const isTwoToOneSouth = !inputSouthPanel &&\r\n        inputNorthPanel.active === ((_a = prev === null || prev === void 0 ? void 0 : prev.southPanel) === null || _a === void 0 ? void 0 : _a.active);\r\n    if (isTwoToOneSouth) {\r\n        nextNorthFile = nextSouthFile;\r\n    }\r\n    return {\r\n        northContent: getContentFromFile(nextNorthFile),\r\n        northPanel: {\r\n            tabs: inputNorthPanel.tabs.map(title => ({\r\n                title,\r\n                active: title === inputNorthPanel.active,\r\n                style: {},\r\n            })),\r\n            style: {\r\n                flexGrow: 1,\r\n                overflow: \"hidden\",\r\n            },\r\n            children: (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTransition, { codeConfig: northConfig(codeConfig), prevFile: nextNorthFile, nextFile: nextNorthFile, t: 1, parentHeight: \"1\" })),\r\n        },\r\n        southContent: getContentFromFile(nextSouthFile),\r\n        southPanel: inputSouthPanel && {\r\n            tabs: inputSouthPanel.tabs.map(title => ({\r\n                title,\r\n                active: title === inputSouthPanel.active,\r\n                style: {},\r\n            })),\r\n            style: {\r\n                flexGrow: 1,\r\n                overflow: \"hidden\",\r\n            },\r\n            children: (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTransition, { codeConfig: southConfig(codeConfig), prevFile: nextSouthFile, nextFile: nextSouthFile, t: 1, parentHeight: \"1\" })),\r\n        },\r\n    };\r\n}\r\nfunction CodeTransition({ prevFile, nextFile, t, codeConfig, parentHeight, }) {\r\n    var _a;\r\n    const htmlProps = Object.assign(Object.assign({}, codeConfig === null || codeConfig === void 0 ? void 0 : codeConfig.htmlProps), { style: Object.assign({ height: \"100%\" }, (_a = codeConfig === null || codeConfig === void 0 ? void 0 : codeConfig.htmlProps) === null || _a === void 0 ? void 0 : _a.style) });\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeTween, Object.assign({ progress: t, tween: { prev: prevFile, next: nextFile }, config: Object.assign(Object.assign({}, codeConfig), { parentHeight }) }, htmlProps)));\r\n}\r\nfunction getContentFromFile(file) {\r\n    return file ? codeToText(file.code) : \"\";\r\n}\r\n/**\r\n * Get the StepFiles for a transition\r\n * in each panel, if the prev and next active files are the same\r\n * we return the prev and next version of that panel\r\n * if the active files are different, we return the same file twice,\r\n * if backward is true we return the prev active file twice,\r\n * or else the next active file twice\r\n */\r\nfunction getStepFiles(prev, next, backward) {\r\n    var _a, _b;\r\n    // The active file in each panel before and after:\r\n    // +----+----+\r\n    // | pn | nn |\r\n    // +----+----+\r\n    // | ps | ns |\r\n    // +----+----+\r\n    //\r\n    const pn = prev.northPanel.active;\r\n    const nn = next.northPanel.active;\r\n    const ps = (_a = prev.southPanel) === null || _a === void 0 ? void 0 : _a.active;\r\n    const ns = (_b = next.southPanel) === null || _b === void 0 ? void 0 : _b.active;\r\n    const pnFile = prev.files.find(f => f.name === pn);\r\n    const nnFile = next.files.find(f => f.name === nn);\r\n    const psFile = ps\r\n        ? prev.files.find(f => f.name === ps)\r\n        : null;\r\n    const nsFile = ns\r\n        ? next.files.find(f => f.name === ns)\r\n        : null;\r\n    const oneToTwoSouth = !ps && pn === ns;\r\n    if (oneToTwoSouth) {\r\n        return {\r\n            prevNorthFile: nnFile,\r\n            nextNorthFile: nnFile,\r\n            prevSouthFile: pnFile,\r\n            nextSouthFile: nsFile,\r\n        };\r\n    }\r\n    const twoToOneSouth = !ns && nn === ps;\r\n    if (twoToOneSouth) {\r\n        return {\r\n            prevNorthFile: pnFile,\r\n            nextNorthFile: pnFile,\r\n            prevSouthFile: psFile,\r\n            nextSouthFile: nnFile,\r\n        };\r\n    }\r\n    const prevNorthFile = pn === nn ? pnFile : backward ? pnFile : nnFile;\r\n    const nextNorthFile = pn === nn ? nnFile : backward ? pnFile : nnFile;\r\n    const prevSouthFile = ps === ns\r\n        ? psFile\r\n        : backward\r\n            ? psFile || nsFile\r\n            : nsFile || psFile;\r\n    const nextSouthFile = ps === ns\r\n        ? nsFile\r\n        : backward\r\n            ? psFile || nsFile\r\n            : nsFile || psFile;\r\n    return {\r\n        prevNorthFile,\r\n        nextNorthFile,\r\n        prevSouthFile,\r\n        nextSouthFile,\r\n    };\r\n}\r\nfunction getPanelStyles(prev, next, t) {\r\n    // +---+---+\r\n    // | x | x |\r\n    // +---+---+\r\n    // |   |   |\r\n    // +---+---+\r\n    if (prev.southHeight === null &&\r\n        next.southHeight === null) {\r\n        return {\r\n            northStyle: {\r\n                minHeight: prev.northHeight,\r\n            },\r\n        };\r\n    }\r\n    // +---+---+\r\n    // | x | x |\r\n    // +---+---+\r\n    // | y |   |\r\n    // +---+---+\r\n    if (prev.southHeight !== null &&\r\n        next.southHeight === null &&\r\n        next.northKey !== prev.southKey) {\r\n        return {\r\n            northStyle: {\r\n                minHeight: tween(prev.northHeight, next.northHeight, t),\r\n            },\r\n            southStyle: {\r\n                minHeight: prev.southHeight,\r\n            },\r\n        };\r\n    }\r\n    // +---+---+\r\n    // | x | y |\r\n    // +---+---+\r\n    // | y |   |\r\n    // +---+---+\r\n    if (prev.southHeight !== null &&\r\n        next.southHeight === null &&\r\n        prev.southKey === next.northKey) {\r\n        return {\r\n            northStyle: {\r\n                minHeight: prev.northHeight,\r\n            },\r\n            southStyle: {\r\n                position: \"relative\",\r\n                minHeight: tween(prev.southHeight, next.northHeight, t),\r\n                transform: `translateY(${tween(0, -(prev.northHeight + prev.titleBarHeight), t)}px)`,\r\n            },\r\n        };\r\n    }\r\n    // +---+---+\r\n    // | x | x |\r\n    // +---+---+\r\n    // |   | y |\r\n    // +---+---+\r\n    if (prev.southHeight === null &&\r\n        next.southHeight !== null &&\r\n        prev.northKey !== next.southKey) {\r\n        return {\r\n            northStyle: {\r\n                minHeight: tween(prev.northHeight, next.northHeight, t),\r\n            },\r\n            southStyle: {\r\n                position: \"relative\",\r\n                minHeight: next.southHeight,\r\n            },\r\n        };\r\n    }\r\n    // +---+---+\r\n    // | y | x |\r\n    // +---+---+\r\n    // |   | y |\r\n    // +---+---+\r\n    if (prev.southHeight === null &&\r\n        next.southHeight !== null &&\r\n        prev.northKey === next.southKey) {\r\n        return {\r\n            northStyle: {\r\n                minHeight: next.northHeight,\r\n            },\r\n            southStyle: {\r\n                position: \"relative\",\r\n                minHeight: tween(prev.northHeight, next.southHeight, t),\r\n                transform: `translateY(${tween(-(next.northHeight + next.titleBarHeight), 0, t)}px)`,\r\n            },\r\n        };\r\n    }\r\n    // +---+---+\r\n    // | x | x |\r\n    // +---+---+\r\n    // | y | y |\r\n    // +---+---+\r\n    return {\r\n        northStyle: {\r\n            minHeight: tween(prev.northHeight, next.northHeight, t),\r\n        },\r\n        southStyle: {\r\n            minHeight: tween(prev.southHeight, next.southHeight, t),\r\n        },\r\n    };\r\n}\r\nfunction tween(a, b, t) {\r\n    return a + (b - a) * t;\r\n}\r\nfunction getTabs(prevSnapshot, nextSnapshot, northActive, southActive, t) {\r\n    // TODO simplify\r\n    if (!prevSnapshot.southTabs &&\r\n        isPresent(southActive, prevSnapshot.northTabs)) {\r\n        /// one to two south\r\n        return {\r\n            northTabs: getPanelTabs(nextSnapshot.northTabs, nextSnapshot.southTabs, prevSnapshot.southTabs, prevSnapshot.northTabs, northActive, t),\r\n            southTabs: getPanelTabs(nextSnapshot.southTabs, nextSnapshot.northTabs, prevSnapshot.northTabs, prevSnapshot.southTabs, southActive, t),\r\n        };\r\n    }\r\n    if (!nextSnapshot.southTabs &&\r\n        isPresent(southActive, nextSnapshot.northTabs)) {\r\n        /// two to one south\r\n        return {\r\n            northTabs: getPanelTabs(nextSnapshot.southTabs, nextSnapshot.northTabs, prevSnapshot.northTabs, prevSnapshot.southTabs, northActive, t),\r\n            southTabs: getPanelTabs(nextSnapshot.northTabs, nextSnapshot.southTabs, prevSnapshot.southTabs, prevSnapshot.northTabs, southActive, t),\r\n        };\r\n    }\r\n    return {\r\n        northTabs: getPanelTabs(nextSnapshot.northTabs, nextSnapshot.southTabs, prevSnapshot.northTabs, prevSnapshot.southTabs, northActive, t),\r\n        southTabs: getPanelTabs(nextSnapshot.southTabs, nextSnapshot.northTabs, prevSnapshot.southTabs, prevSnapshot.northTabs, southActive, t),\r\n    };\r\n}\r\nfunction getPanelTabs(nextSnapshot, otherNextSnapshot, prevSnapshot, otherPrevSnapshot, active, t) {\r\n    // For each tab bar there are four types of tabs\r\n    // - oldTabs: tabs that are present in both prev and next versions of the bar\r\n    // - totallyNewTabs: tabs that are totally new (present in next\r\n    // but not in any prev)\r\n    // - migratingTabs: tabs that are come from the other bar (present\r\n    // in next and in otherPrev)\r\n    // - disappearingTabs: present in prev but not in next or otherNext\r\n    const oldTabs = !nextSnapshot\r\n        ? []\r\n        : Object.keys(nextSnapshot)\r\n            .filter(filename => isPresent(filename, prevSnapshot) ||\r\n            !prevSnapshot)\r\n            .map(filename => {\r\n            const prev = prevSnapshot && prevSnapshot[filename];\r\n            const next = nextSnapshot[filename];\r\n            const dx = prev\r\n                ? prev.left + (next.left - prev.left) * t\r\n                : next.left;\r\n            const width = prev\r\n                ? prev.width + (next.width - prev.width) * t\r\n                : next.width;\r\n            return {\r\n                active: filename === active,\r\n                title: filename,\r\n                style: {\r\n                    position: \"absolute\",\r\n                    transform: `translateX(${dx}px)`,\r\n                    width,\r\n                },\r\n            };\r\n        });\r\n    const totallyNewTabs = !nextSnapshot\r\n        ? []\r\n        : Object.keys(nextSnapshot)\r\n            .filter(filename => prevSnapshot &&\r\n            !isPresent(filename, prevSnapshot)\r\n        // && !isPresent(filename, otherPrevSnapshot)\r\n        )\r\n            .map(filename => {\r\n            const next = nextSnapshot[filename];\r\n            return {\r\n                active: filename === active,\r\n                title: filename,\r\n                style: {\r\n                    position: \"absolute\",\r\n                    transform: `translateX(${next.left}px)`,\r\n                    opacity: t,\r\n                    width: next.width,\r\n                },\r\n            };\r\n        });\r\n    !nextSnapshot\r\n        ? []\r\n        : Object.keys(nextSnapshot)\r\n            .filter(filename => isPresent(filename, otherPrevSnapshot))\r\n            .map(filename => {\r\n            const prev = otherPrevSnapshot[filename];\r\n            const next = nextSnapshot[filename];\r\n            const dx = next.left - prev.left;\r\n            return {\r\n                active: filename === active,\r\n                title: filename,\r\n                style: {\r\n                    position: \"absolute\",\r\n                    transform: `translateX(${dx}px)`,\r\n                },\r\n            };\r\n        });\r\n    const disappearingTabs = !prevSnapshot\r\n        ? []\r\n        : Object.keys(prevSnapshot)\r\n            .filter(filename => !isPresent(filename, nextSnapshot)\r\n        // && !isPresent(filename, otherNextSnapshot)\r\n        )\r\n            .map(filename => {\r\n            const prev = prevSnapshot[filename];\r\n            return {\r\n                active: filename === active,\r\n                title: filename,\r\n                style: {\r\n                    position: \"absolute\",\r\n                    opacity: 1 - t,\r\n                    transform: `translateX(${prev.left}px)`,\r\n                    width: prev.width,\r\n                },\r\n            };\r\n        });\r\n    return [\r\n        ...totallyNewTabs,\r\n        // ...migratingTabs,\r\n        ...oldTabs,\r\n        ...disappearingTabs,\r\n    ];\r\n}\r\nfunction isPresent(filename, snapshot) {\r\n    return snapshot && filename && filename in snapshot;\r\n}\r\n// snapshots\r\nconst useLayoutEffect$2 = typeof window !== \"undefined\"\r\n    ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect\r\n    : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\nfunction useSnapshots(ref, prev, next) {\r\n    const [{ prevSnapshot, nextSnapshot }, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\r\n        prevSnapshot: null,\r\n        nextSnapshot: null,\r\n    });\r\n    useLayoutEffect$2(() => {\r\n        if (prevSnapshot || nextSnapshot) {\r\n            setState({\r\n                prevSnapshot: null,\r\n                nextSnapshot: null,\r\n            });\r\n        }\r\n    }, [prev, next]);\r\n    useLayoutEffect$2(() => {\r\n        if (!prevSnapshot) {\r\n            const parent = ref.current;\r\n            setState(s => (Object.assign(Object.assign({}, s), { prevSnapshot: Object.assign(Object.assign({}, getPanelSnapshot(parent, prev)), getTabsSnapshot(parent, prev)) })));\r\n        }\r\n        else if (!nextSnapshot) {\r\n            const parent = ref.current;\r\n            setState(s => (Object.assign(Object.assign({}, s), { nextSnapshot: Object.assign(Object.assign({}, getPanelSnapshot(parent, next)), getTabsSnapshot(parent, next)) })));\r\n        }\r\n    });\r\n    return { prevSnapshot, nextSnapshot };\r\n}\r\nfunction getPanelSnapshot(parent, step) {\r\n    var _a;\r\n    const northElement = parent.querySelector(\"[data-ch-panel='north']\");\r\n    const southElement = parent.querySelector(\"[data-ch-panel='south']\");\r\n    const bar = parent.querySelector(\".ch-frame-title-bar\");\r\n    return {\r\n        titleBarHeight: bar.getBoundingClientRect().height,\r\n        northHeight: northElement.getBoundingClientRect().height,\r\n        northKey: step.northPanel.active,\r\n        southHeight: (southElement === null || southElement === void 0 ? void 0 : southElement.getBoundingClientRect().height) || null,\r\n        southKey: (_a = step.southPanel) === null || _a === void 0 ? void 0 : _a.active,\r\n    };\r\n}\r\nfunction getTabsSnapshot(parent, step) {\r\n    var _a;\r\n    const northTabs = Array.from(parent.querySelectorAll(\"[data-ch-tab='north']\"));\r\n    const southTabs = Array.from(parent.querySelectorAll(\"[data-ch-tab='south']\"));\r\n    return {\r\n        northTabs: getTabsDimensions(northTabs, step.northPanel.active),\r\n        southTabs: getTabsDimensions(southTabs, (_a = step.southPanel) === null || _a === void 0 ? void 0 : _a.active),\r\n    };\r\n}\r\nfunction getTabsDimensions(tabElements, active) {\r\n    if (!tabElements[0]) {\r\n        return null;\r\n    }\r\n    const parent = tabElements[0].parentElement;\r\n    const parentLeft = parent.getBoundingClientRect().left;\r\n    const dimensions = {};\r\n    tabElements.forEach(child => {\r\n        const filename = child.getAttribute(\"title\");\r\n        const rect = child.getBoundingClientRect();\r\n        dimensions[filename] = {\r\n            left: rect.left - parentLeft,\r\n            width: rect.width,\r\n            active: filename === active,\r\n        };\r\n    });\r\n    return dimensions;\r\n}\n\nfunction CodeBrowser({ files, startingFileName, }) {\r\n    const [activeFile, setActiveFile] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => files.find(f => f.name === startingFileName));\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-code-browser\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Sidebar, { files: files, activeFile: activeFile, setActiveFile: setActiveFile }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Content, { file: activeFile })));\r\n}\r\nfunction Sidebar({ files, activeFile, setActiveFile, }) {\r\n    const tree = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => toFileTree(files), [files]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-code-browser-sidebar\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(SidebarNodes, { tree: tree, activeFile: activeFile, setActiveFile: setActiveFile })));\r\n}\r\nfunction SidebarNodes({ tree, activeFile, setActiveFile, level = 0, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, tree.map(node => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(SidebarNode, { key: node.name, node: node, activeFile: activeFile, setActiveFile: setActiveFile, level: level })))));\r\n}\r\nfunction SidebarNode({ node, activeFile, setActiveFile, level, }) {\r\n    const isFolder = node.children && node.children.length > 0;\r\n    const isSelected = node.codeFile === activeFile;\r\n    if (isFolder) {\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null,\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-code-browser-sidebar-folder\" },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { paddingLeft: level * 1.5 + \"ch\" } }, node.name)),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(SidebarNodes, { tree: node.children, activeFile: activeFile, setActiveFile: setActiveFile, level: level + 1 })));\r\n    }\r\n    else {\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null,\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-code-browser-sidebar-file\", \"data-selected\": isSelected, onClick: () => setActiveFile(node.codeFile) },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: { paddingLeft: level * 1.5 + \"ch\" } }, node.name))));\r\n    }\r\n}\r\nfunction Content({ file }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-code-browser-content\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CopyButton, { className: \"ch-code-browser-button\", content: codeToText(file.code) }),\r\n        file.code.lines.map((line, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { key: i },\r\n            line.tokens.map((token, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", Object.assign({ key: i }, token.props), token.content))),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null))))));\r\n}\r\nfunction toFileTree(files) {\r\n    let tree = [];\r\n    for (const file of files) {\r\n        const parts = file.name.split(\"/\");\r\n        let current = tree;\r\n        for (let i = 0; i < parts.length; i++) {\r\n            const part = parts[i];\r\n            const isLastPart = i === parts.length - 1;\r\n            const index = current.findIndex(f => f.name === part);\r\n            if (index === -1) {\r\n                const sub = {\r\n                    name: part,\r\n                    children: [],\r\n                    codeFile: undefined,\r\n                };\r\n                if (isLastPart) {\r\n                    sub.codeFile = file;\r\n                }\r\n                current.push(sub);\r\n                current = sub.children;\r\n            }\r\n            else {\r\n                current = current[index].children;\r\n            }\r\n        }\r\n    }\r\n    tree = sortTree(tree);\r\n    return tree;\r\n}\r\nfunction sortTree(tree) {\r\n    for (const child of tree) {\r\n        child.children = sortTree(child.children);\r\n    }\r\n    return tree.sort((a, b) => {\r\n        const aIsFolder = a.children && a.children.length > 0;\r\n        const bIsFolder = b.children && b.children.length > 0;\r\n        if ((aIsFolder && bIsFolder) ||\r\n            (!aIsFolder && !bIsFolder)) {\r\n            return a.name.localeCompare(b.name);\r\n        }\r\n        if (aIsFolder) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    });\r\n}\n\nfunction ExpandButton({ style, step, className, }) {\r\n    const [expanded, setExpanded] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\r\n    const [dialogSupported, setDialogSupported] = react__WEBPACK_IMPORTED_MODULE_0__.useState(true);\r\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n    const files = step.files;\r\n    // check if <dialog /> is supported\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        if (ref.current && !ref.current.showModal) {\r\n            setDialogSupported(false);\r\n        }\r\n    }, []);\r\n    if (!dialogSupported) {\r\n        return null;\r\n    }\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(ExpandIcon, { className: className, style: style, onClick: () => {\r\n                ref.current.showModal();\r\n                document.body.classList.add(\"ch-no-scroll\");\r\n                setExpanded(true);\r\n            } }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"dialog\", { ref: ref, className: \"ch-expand-dialog\", onClose: () => {\r\n                setExpanded(false);\r\n            }, onClick: e => {\r\n                if (e.currentTarget === e.target) {\r\n                    ref.current.close();\r\n                    document.body.classList.remove(\"ch-no-scroll\");\r\n                }\r\n            } },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(CloseButton, { onClick: () => {\r\n                    ref.current.close();\r\n                    document.body.classList.remove(\"ch-no-scroll\");\r\n                } }),\r\n            expanded ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-expand-dialog-content\" },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeBrowser, { files: files, startingFileName: step.northPanel.active }))) : undefined)));\r\n}\r\nfunction ExpandIcon({ onClick, style, className, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { type: \"button\", title: \"Expand\", style: style, onClick: onClick, className: className },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", xmlns: \"http://www.w3.org/2000/svg\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4\" }))));\r\n}\r\nfunction CloseButton({ onClick }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { onClick: onClick, className: \"ch-expand-close\", type: \"button\", title: \"Close\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { fill: \"none\", stroke: \"currentColor\", viewBox: \"0 0 24 24\", xmlns: \"http://www.w3.org/2000/svg\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { strokeLinecap: \"round\", strokeLinejoin: \"round\", strokeWidth: 2, d: \"M6 18L18 6M6 6l12 12\" }))));\r\n}\n\nconst DEFAULT_STEP = {\r\n    files: [\r\n        {\r\n            code: { lines: [], lang: \"js\" },\r\n            focus: \"\",\r\n            name: \"\",\r\n        },\r\n    ],\r\n    northPanel: { active: \"\", tabs: [\"\"], heightRatio: 1 },\r\n};\r\nfunction EditorTween(_a) {\r\n    var { prev = DEFAULT_STEP, next, t, backward, codeConfig, frameProps = {} } = _a, divProps = __rest(_a, [\"prev\", \"next\", \"t\", \"backward\", \"codeConfig\", \"frameProps\"]);\r\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\r\n    const { showCopyButton, showExpandButton } = codeConfig, config = __rest(codeConfig, [\"showCopyButton\", \"showExpandButton\"]);\r\n    const { northPanel, southPanel, northContent, southContent, } = useTransition(ref, prev, next || prev, t, backward, config);\r\n    const [frozenHeight, freezeHeight] = react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined);\r\n    useLayoutEffect$4(() => {\r\n        var _a;\r\n        const height = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height;\r\n        freezeHeight(height);\r\n    }, []);\r\n    const framePropsWithHeight = Object.assign(Object.assign(Object.assign({}, frameProps), divProps), { style: Object.assign(Object.assign({}, frameProps === null || frameProps === void 0 ? void 0 : frameProps.style), divProps === null || divProps === void 0 ? void 0 : divProps.style) });\r\n    if (frozenHeight) {\r\n        framePropsWithHeight.style.height = frozenHeight;\r\n        framePropsWithHeight.style.maxHeight = frozenHeight;\r\n    }\r\n    const northButtons = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        showCopyButton ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CopyButton, { className: \"ch-editor-button\", content: northContent })) : undefined,\r\n        showExpandButton ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(ExpandButton, { className: \"ch-editor-button\", step: next || prev })) : undefined));\r\n    const southCopyButton = showCopyButton ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CopyButton, { className: \"ch-editor-button\", content: southContent })) : undefined;\r\n    const terminalPanel = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(TerminalPanel, { prev: prev.terminal, next: (next || prev).terminal, t: t, backward: backward }));\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorFrame, Object.assign({ ref: ref }, framePropsWithHeight, { northPanel: northPanel, southPanel: southPanel, terminalPanel: terminalPanel, northButton: northButtons, southButton: southCopyButton })));\r\n}\n\nconst defaultSpring = {\r\n    stiffness: 120,\r\n    damping: 24,\r\n    mass: 0.2,\r\n    decimals: 3,\r\n};\r\nfunction EditorSpring(_a) {\r\n    var { northPanel, southPanel, files, terminal, springConfig } = _a, props = __rest(_a, [\"northPanel\", \"southPanel\", \"files\", \"terminal\", \"springConfig\"]);\r\n    const step = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        return {\r\n            northPanel,\r\n            southPanel,\r\n            files,\r\n            terminal,\r\n        };\r\n    }, [northPanel, southPanel, files, terminal]);\r\n    const { prev, next, t } = useStepSpring(step, springConfig);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorTween, Object.assign({ t: t, backward: false, prev: prev, next: next }, props)));\r\n}\r\nfunction useStepSpring(step, springConfig = defaultSpring) {\r\n    const [{ target, steps, index }, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\r\n        target: 2,\r\n        steps: [step, step, step],\r\n        index: 0,\r\n    });\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        const lastStep = steps[steps.length - 1];\r\n        if (lastStep != step) {\r\n            setState(s => updateStepSpring(s, step, progress));\r\n        }\r\n    }, [step]);\r\n    const [progress] = useSpring(target, springConfig);\r\n    const trioProgress = progress - index;\r\n    const result = trioProgress <= 1\r\n        ? {\r\n            prev: steps[0],\r\n            next: steps[1],\r\n            t: trioProgress,\r\n        }\r\n        : {\r\n            prev: steps[1],\r\n            next: steps[2],\r\n            t: trioProgress - 1,\r\n        };\r\n    return result;\r\n}\r\nfunction updateStepSpring(state, newStep, progress) {\r\n    const { steps, target, index } = state;\r\n    const stepsClone = steps.slice();\r\n    const trioProgress = progress - index;\r\n    if (trioProgress < 1) {\r\n        stepsClone[2] = newStep;\r\n        return Object.assign(Object.assign({}, state), { steps: stepsClone });\r\n    }\r\n    else {\r\n        stepsClone[0] = steps[1];\r\n        stepsClone[1] = steps[2];\r\n        stepsClone[2] = newStep;\r\n        return Object.assign(Object.assign({}, state), { steps: stepsClone, target: target + 1, index: index + 1 });\r\n    }\r\n}\n\nfunction Code(props) {\r\n    const [step, setStep] = react__WEBPACK_IMPORTED_MODULE_0__.useState(props);\r\n    function onTabClick(filename) {\r\n        const newStep = updateEditorStep(step, filename, null);\r\n        setStep(Object.assign(Object.assign({}, step), newStep));\r\n    }\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerCode, Object.assign({}, step, { onTabClick: onTabClick }));\r\n}\r\n// build the CodeConfig from props and props.codeConfig\r\nfunction mergeCodeConfig(props) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n    const { lineNumbers, showCopyButton, showExpandButton, minZoom, maxZoom } = props, rest = __rest(props, [\"lineNumbers\", \"showCopyButton\", \"showExpandButton\", \"minZoom\", \"maxZoom\"]);\r\n    const codeConfig = Object.assign(Object.assign({}, props.codeConfig), { maxZoom: maxZoom == null ? (_a = props.codeConfig) === null || _a === void 0 ? void 0 : _a.maxZoom : maxZoom, minZoom: minZoom == null ? (_b = props.codeConfig) === null || _b === void 0 ? void 0 : _b.minZoom : minZoom, horizontalCenter: (_d = (_c = props.codeConfig) === null || _c === void 0 ? void 0 : _c.horizontalCenter) !== null && _d !== void 0 ? _d : props.horizontalCenter, lineNumbers: lineNumbers == null\r\n            ? (_e = props.codeConfig) === null || _e === void 0 ? void 0 : _e.lineNumbers\r\n            : lineNumbers, showCopyButton: showCopyButton == null\r\n            ? (_f = props.codeConfig) === null || _f === void 0 ? void 0 : _f.showCopyButton\r\n            : showCopyButton, showExpandButton: showExpandButton == null\r\n            ? (_g = props.codeConfig) === null || _g === void 0 ? void 0 : _g.showExpandButton\r\n            : showExpandButton, rows: props.rows, debug: (_h = props.debug) !== null && _h !== void 0 ? _h : (_j = props.codeConfig) === null || _j === void 0 ? void 0 : _j.debug });\r\n    return Object.assign(Object.assign({}, rest), { codeConfig });\r\n}\r\nfunction InnerCode(_a) {\r\n    var _b, _c;\r\n    var { onTabClick } = _a, props = __rest(_a, [\"onTabClick\"]);\r\n    const _d = mergeCodeConfig(props), { className, style, codeConfig } = _d, editorProps = __rest(_d, [\"className\", \"style\", \"codeConfig\"]);\r\n    if (!props.southPanel &&\r\n        props.files.length === 1 &&\r\n        !props.files[0].name) {\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: `ch-codeblock not-prose ${className || \"\"}`, \"data-ch-theme\": (_b = props.codeConfig) === null || _b === void 0 ? void 0 : _b.themeName, style: style },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(CodeSpring, { className: \"ch-code\", config: codeConfig, step: editorProps.files[0] })));\r\n    }\r\n    else {\r\n        const frameProps = Object.assign(Object.assign({}, editorProps === null || editorProps === void 0 ? void 0 : editorProps.frameProps), { onTabClick });\r\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: `ch-codegroup not-prose ${className || \"\"}`, \"data-ch-theme\": (_c = props.codeConfig) === null || _c === void 0 ? void 0 : _c.themeName, style: style },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorSpring, Object.assign({}, editorProps, { frameProps: frameProps, codeConfig: codeConfig }))));\r\n    }\r\n}\r\nfunction updateEditorStep(step, filename, focus) {\r\n    const name = filename || step.northPanel.active;\r\n    const newFiles = step.files.map((file) => file.name === name\r\n        ? Object.assign(Object.assign({}, file), { focus: focus === null ? file.focus : focus }) : file);\r\n    let northPanel = Object.assign({}, step.northPanel);\r\n    let southPanel = step.southPanel && Object.assign({}, step.southPanel);\r\n    if (step.northPanel.tabs.includes(name)) {\r\n        northPanel.active = name;\r\n    }\r\n    else if (southPanel) {\r\n        southPanel.active = name;\r\n    }\r\n    return { files: newFiles, northPanel, southPanel };\r\n}\n\nconst SectionContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext({\r\n    props: null,\r\n    setFocus: () => { },\r\n});\r\nfunction Section(_a) {\r\n    var { children, className, style } = _a, props = __rest(_a, [\"children\", \"className\", \"style\"]);\r\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(props);\r\n    const resetFocus = () => setState(props);\r\n    const setFocus = ({ fileName, focus, id, }) => {\r\n        const newStep = updateEditorStep(state, fileName, focus);\r\n        setState(Object.assign(Object.assign(Object.assign({}, state), newStep), { selectedId: id }));\r\n    };\r\n    const rest = __rest(state, [\"selectedId\"]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", { className: `ch-section ${className || \"\"}`, style: style },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(SectionContext.Provider, { value: {\r\n                props: rest,\r\n                setFocus,\r\n            } },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(LinkableSection, { onActivation: setFocus, onReset: resetFocus }, children))));\r\n}\r\nfunction SectionCode(innerProps) {\r\n    const { props, setFocus } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SectionContext);\r\n    const onTabClick = (filename) => {\r\n        setFocus({ fileName: filename, focus: null, id: \"\" });\r\n    };\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerCode, Object.assign({}, innerProps, props, { onTabClick: onTabClick })));\r\n}\r\n// ---\r\nfunction SectionLink({ focus, file, children, id, }) {\r\n    const { activate, reset, activatedId } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LinkableContext);\r\n    const isSelected = activatedId === id;\r\n    // const handleClick = isSelected\r\n    //   ? resetFocus\r\n    //   : () => setFocus({ fileName: file, focus, id })\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"ch-section-link\", \"data-active\": isSelected, \r\n        // onClick={handleClick}\r\n        children: children, onMouseOver: () => activate({ fileName: file, focus, id }), onMouseOut: reset }));\r\n}\r\nconst LinkableContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext({\r\n    activatedId: undefined,\r\n    activate: () => { },\r\n    reset: () => { },\r\n});\r\nfunction LinkableSection({ onActivation, onReset, children, }) {\r\n    const [activatedId, setActivatedId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined);\r\n    const activate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(x => {\r\n        setActivatedId(x.id);\r\n        onActivation(x);\r\n    }, [onActivation]);\r\n    const reset = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\r\n        setActivatedId(undefined);\r\n        onReset();\r\n    }, [onReset]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(LinkableContext.Provider, { value: {\r\n            activate,\r\n            reset,\r\n            activatedId,\r\n        } }, children));\r\n}\n\nfunction Back() {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { fill: \"currentColor\", preserveAspectRatio: \"xMidYMid meet\", height: \"1em\", viewBox: \"13 10 14 23\", className: \"ch-browser-button ch-browser-back-button\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", null,\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"m26.5 12.1q0 0.3-0.2 0.6l-8.8 8.7 8.8 8.8q0.2 0.2 0.2 0.5t-0.2 0.5l-1.1 1.1q-0.3 0.3-0.6 0.3t-0.5-0.3l-10.4-10.4q-0.2-0.2-0.2-0.5t0.2-0.5l10.4-10.4q0.3-0.2 0.5-0.2t0.6 0.2l1.1 1.1q0.2 0.2 0.2 0.5z\" }))));\r\n}\r\nfunction Forward() {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { fill: \"currentColor\", preserveAspectRatio: \"xMidYMid meet\", height: \"1em\", viewBox: \"13 10 14 23\", className: \"ch-browser-button ch-browser-forward-button\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", null,\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"m26.3 21.4q0 0.3-0.2 0.5l-10.4 10.4q-0.3 0.3-0.6 0.3t-0.5-0.3l-1.1-1.1q-0.2-0.2-0.2-0.5t0.2-0.5l8.8-8.8-8.8-8.7q-0.2-0.3-0.2-0.6t0.2-0.5l1.1-1.1q0.3-0.2 0.5-0.2t0.6 0.2l10.4 10.4q0.2 0.2 0.2 0.5z\" }))));\r\n}\r\nfunction Open({ href }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", { className: \"ch-browser-button ch-browser-open-button\", title: \"Open in new tab\", href: href, target: \"_blank\", rel: \"noopener noreferrer\" },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", { stroke: \"currentColor\", fill: \"currentColor\", strokeWidth: \"0\", viewBox: \"3 3 18 18\", height: \"1em\", width: \"1em\", className: \"ch-browser-open-icon\", xmlns: \"http://www.w3.org/2000/svg\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", { d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\" }))));\r\n}\n\nfunction TitleBar({ url, linkUrl, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(FrameButtons, null),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Back, null),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Forward, null),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", { value: url || \"\", readOnly: true }),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Open, { href: linkUrl })));\r\n}\n\nfunction useSteps$1(steps) {\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        if (!steps) {\r\n            return [{ zoom: 1 }];\r\n        }\r\n        return steps.map(step => {\r\n            const { displayUrl, loadUrl } = transformUrl(step.url, step.loadUrl, step.prependOrigin);\r\n            return {\r\n                zoom: step.zoom || 1,\r\n                displayUrl,\r\n                loadUrl,\r\n                children: step.children,\r\n            };\r\n        });\r\n    }, [steps]);\r\n}\r\nfunction transformUrl(url, loadUrl, prependOrigin) {\r\n    const currentOrigin = typeof window !== \"undefined\" ? window.origin : \"\";\r\n    const displayUrl = url && prependOrigin === true\r\n        ? currentOrigin + url\r\n        : url;\r\n    return { displayUrl, loadUrl: loadUrl || displayUrl };\r\n}\n\nconst MiniBrowserHike = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(MiniBrowserWithRef);\r\nfunction MiniBrowserWithRef(_a, ref) {\r\n    var { progress = 0, backward = false, steps: ogSteps, transition = \"none\" } = _a, props = __rest(_a, [\"progress\", \"backward\", \"steps\", \"transition\"]);\r\n    const steps = useSteps$1(ogSteps);\r\n    const stepIndex = Math.round(progress);\r\n    const { zoom, displayUrl, loadUrl, children } = steps[stepIndex];\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(MiniFrame, Object.assign({}, props, { zoom: zoom, className: `ch-mini-browser ${props.className || \"\"}`, style: Object.assign(Object.assign({}, transitionStyle({ progress, transition })), props.style), titleBar: react__WEBPACK_IMPORTED_MODULE_0__.createElement(TitleBar, { url: displayUrl, linkUrl: loadUrl }) }), children || react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"iframe\", { ref: ref, src: loadUrl })));\r\n}\r\nfunction transitionStyle({ progress, transition, }) {\r\n    if (transition === \"slide\") {\r\n        const X = 50;\r\n        const t = progress - Math.floor(progress);\r\n        const x = t <= 0.5 ? -X * t : X - X * t;\r\n        const o = Math.abs(t - 0.5) * 2;\r\n        return {\r\n            transform: `translateX(${x}px)`,\r\n            opacity: o * o,\r\n        };\r\n    }\r\n    return {};\r\n}\n\nfunction MiniBrowser(_a) {\r\n    var { url, loadUrl, prependOrigin, children, zoom } = _a, rest = __rest(_a, [\"url\", \"loadUrl\", \"prependOrigin\", \"children\", \"zoom\"]);\r\n    const [steps, progress] = useSteps({\r\n        url,\r\n        loadUrl,\r\n        prependOrigin,\r\n        children,\r\n        zoom,\r\n    });\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(MiniBrowserHike, Object.assign({}, rest, { steps: steps, progress: progress })));\r\n}\r\nfunction useSteps({ url, loadUrl, prependOrigin, children, zoom, }) {\r\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\r\n        target: 0,\r\n        steps: [\r\n            { url, loadUrl, prependOrigin, children, zoom },\r\n        ],\r\n    });\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        const last = state.steps[state.steps.length - 1];\r\n        if (last.url !== url ||\r\n            last.loadUrl !== loadUrl ||\r\n            last.prependOrigin !== prependOrigin ||\r\n            last.children !== children) {\r\n            setState(s => ({\r\n                target: s.target + 1,\r\n                steps: [\r\n                    ...s.steps,\r\n                    { url, loadUrl, prependOrigin, children, zoom },\r\n                ],\r\n            }));\r\n        }\r\n    }, [url, loadUrl, prependOrigin, children, zoom]);\r\n    const [progress] = useSpring(state.target, {\r\n        stiffness: 100,\r\n        decimals: 3,\r\n    });\r\n    return [state.steps, progress];\r\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar templates = {};\n\nObject.defineProperty(templates, \"__esModule\", { value: true });\nfunction getMainFile(template) {\n    if (template === \"vue-cli\") {\n        return \"src/main.js\";\n    }\n    if (template === \"angular-cli\") {\n        return \"src/main.ts\";\n    }\n    if (template === \"create-react-app-typescript\") {\n        return \"src/index.tsx\";\n    }\n    if (template === \"parcel\") {\n        return \"index.html\";\n    }\n    if (template === \"gatsby\") {\n        return \"src/pages/index.js\";\n    }\n    if (template === \"nuxt\") {\n        // Wildcard, because nuxt is not specific on this\n        return \"package.json\";\n    }\n    if (template === \"next\") {\n        // Wildcard, because next is not specific on this\n        return \"package.json\";\n    }\n    if (template === \"apollo\") {\n        // Wildcard, because apollo is not specific on this\n        return \"package.json\";\n    }\n    if (template === \"reason\") {\n        // Wildcard, because reason is not specific on this\n        return \"package.json\";\n    }\n    if (template === \"sapper\") {\n        // Wildcard, because sapper is not specific on this\n        return \"package.json\";\n    }\n    if (template === \"nest\") {\n        return \"src/main.ts\";\n    }\n    if (template === \"static\") {\n        return \"index.html\";\n    }\n    return \"src/index.js\";\n}\ntemplates.getMainFile = getMainFile;\nvar SANDBOX_CONFIG = \"sandbox.config.json\";\nfunction getTemplate(packageJSONPackage, modules) {\n    var sandboxConfig = modules[SANDBOX_CONFIG] || modules[\"/\" + SANDBOX_CONFIG];\n    if (sandboxConfig) {\n        try {\n            var config = JSON.parse(sandboxConfig.content);\n            if (config.template) {\n                return config.template;\n            }\n        }\n        catch (e) { }\n    }\n    var _a = packageJSONPackage.dependencies, dependencies = _a === void 0 ? {} : _a, _b = packageJSONPackage.devDependencies, devDependencies = _b === void 0 ? {} : _b;\n    var totalDependencies = Object.keys(dependencies).concat(Object.keys(devDependencies));\n    var nuxt = [\"nuxt\", \"nuxt-edge\"];\n    if (totalDependencies.some(function (dep) { return nuxt.indexOf(dep) > -1; })) {\n        return \"nuxt\";\n    }\n    if (totalDependencies.indexOf(\"next\") > -1) {\n        return \"next\";\n    }\n    var apollo = [\n        \"apollo-server\",\n        \"apollo-server-express\",\n        \"apollo-server-hapi\",\n        \"apollo-server-koa\",\n        \"apollo-server-lambda\",\n        \"apollo-server-micro\"\n    ];\n    if (totalDependencies.some(function (dep) { return apollo.indexOf(dep) > -1; })) {\n        return \"apollo\";\n    }\n    if (totalDependencies.indexOf(\"ember-cli\") > -1) {\n        return \"ember\";\n    }\n    if (totalDependencies.indexOf(\"sapper\") > -1) {\n        return \"sapper\";\n    }\n    var moduleNames = Object.keys(modules);\n    if (moduleNames.some(function (m) { return m.endsWith(\".vue\"); })) {\n        return \"vue-cli\";\n    }\n    if (moduleNames.some(function (m) { return m.endsWith(\".re\"); })) {\n        return \"reason\";\n    }\n    if (totalDependencies.indexOf(\"gatsby\") > -1) {\n        return \"gatsby\";\n    }\n    if (totalDependencies.indexOf(\"parcel-bundler\") > -1) {\n        return \"parcel\";\n    }\n    if (totalDependencies.indexOf(\"react-scripts\") > -1) {\n        return \"create-react-app\";\n    }\n    if (totalDependencies.indexOf(\"react-scripts-ts\") > -1) {\n        return \"create-react-app-typescript\";\n    }\n    if (totalDependencies.indexOf(\"@angular/core\") > -1) {\n        return \"angular-cli\";\n    }\n    if (totalDependencies.indexOf(\"preact-cli\") > -1) {\n        return \"preact-cli\";\n    }\n    if (totalDependencies.indexOf(\"svelte\") > -1) {\n        return \"svelte\";\n    }\n    if (totalDependencies.indexOf(\"vue\") > -1) {\n        return \"vue-cli\";\n    }\n    var dojo = [\"@dojo/core\", \"@dojo/framework\"];\n    if (totalDependencies.some(function (dep) { return dojo.indexOf(dep) > -1; })) {\n        return \"@dojo/cli-create-app\";\n    }\n    if (totalDependencies.indexOf(\"cx\") > -1) {\n        return \"cxjs\";\n    }\n    if (totalDependencies.indexOf(\"@nestjs/core\") > -1 ||\n        totalDependencies.indexOf(\"@nestjs/common\") > -1) {\n        return \"nest\";\n    }\n    return undefined;\n}\nvar getTemplate_1 = templates.getTemplate = getTemplate;\n\nvar lodash_isequal = {exports: {}};\n\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n(function (module, exports) {\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n}(lodash_isequal, lodash_isequal.exports));\n\nvar isEqual = lodash_isequal.exports;\n\n// src/client.ts\n\n// src/file-resolver-protocol.ts\nvar generateId = () => Math.floor(Math.random() * 1e6 + Math.random() * 1e6);\nvar getConstructorName = (x) => {\n  try {\n    return x.constructor.name;\n  } catch (e) {\n    return \"\";\n  }\n};\nvar Protocol = class {\n  constructor(type, handleMessage, target) {\n    this.type = type;\n    this.handleMessage = handleMessage;\n    this.target = target;\n    this.outgoingMessages = new Set();\n    this._messageListener = async (e) => {\n      var _a;\n      const { data } = e;\n      if (data.$type !== this.getTypeId()) {\n        return;\n      }\n      if (this.outgoingMessages.has(data.$id)) {\n        return;\n      }\n      let returnMessage = {\n        $originId: this.internalId,\n        $type: this.getTypeId(),\n        $id: data.$id\n      };\n      try {\n        const result = await this.handleMessage(data.$data);\n        returnMessage.$data = result;\n      } catch (err) {\n        if (!err.message) {\n          console.error(err);\n        }\n        returnMessage.$error = { message: (_a = err.message) != null ? _a : \"Unknown error\" };\n      }\n      if (e.source) {\n        e.source.postMessage(returnMessage, \"*\");\n      } else {\n        this._postMessage(returnMessage);\n      }\n    };\n    this.createConnection();\n    this.internalId = generateId();\n    this.isWorker = getConstructorName(target) === \"Worker\";\n  }\n  getTypeId() {\n    return `p-${this.type}`;\n  }\n  createConnection() {\n    self.addEventListener(\"message\", this._messageListener);\n  }\n  dispose() {\n    self.removeEventListener(\"message\", this._messageListener);\n  }\n  sendMessage(data) {\n    return new Promise((resolve) => {\n      const messageId = generateId();\n      const message = {\n        $originId: this.internalId,\n        $type: this.getTypeId(),\n        $data: data,\n        $id: messageId\n      };\n      this.outgoingMessages.add(messageId);\n      const listenFunction = (e) => {\n        const { data: data2 } = e;\n        if (data2.$type === this.getTypeId() && data2.$id === messageId && data2.$originId !== this.internalId) {\n          resolve(data2.$data);\n          self.removeEventListener(\"message\", listenFunction);\n        }\n      };\n      self.addEventListener(\"message\", listenFunction);\n      this._postMessage(message);\n    });\n  }\n  _postMessage(m) {\n    if (this.isWorker || typeof DedicatedWorkerGlobalScope !== \"undefined\" && this.target instanceof DedicatedWorkerGlobalScope) {\n      this.target.postMessage(m);\n    } else {\n      this.target.postMessage(m, \"*\");\n    }\n  }\n};\n\n// src/iframe-protocol.ts\nvar IFrameProtocol = class {\n  constructor(iframe, origin) {\n    this.globalListeners = {};\n    this.globalListenersCount = 0;\n    this.channelListeners = {};\n    this.channelListenersCount = 0;\n    this.channelId = Math.floor(Math.random() * 1e6);\n    this.frameWindow = iframe.contentWindow;\n    this.origin = origin;\n    this.globalListeners = [];\n    this.channelListeners = [];\n    this.eventListener = this.eventListener.bind(this);\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"message\", this.eventListener);\n    }\n  }\n  cleanup() {\n    window.removeEventListener(\"message\", this.eventListener);\n    this.globalListeners = {};\n    this.channelListeners = {};\n    this.globalListenersCount = 0;\n    this.channelListenersCount = 0;\n  }\n  register() {\n    if (!this.frameWindow) {\n      return;\n    }\n    this.frameWindow.postMessage({\n      type: \"register-frame\",\n      origin: document.location.origin,\n      id: this.channelId\n    }, this.origin);\n  }\n  dispatch(message) {\n    if (!this.frameWindow) {\n      return;\n    }\n    this.frameWindow.postMessage({\n      $id: this.channelId,\n      codesandbox: true,\n      ...message\n    }, this.origin);\n  }\n  globalListen(listener) {\n    if (typeof listener !== \"function\") {\n      return () => {\n        return;\n      };\n    }\n    const listenerId = this.globalListenersCount;\n    this.globalListeners[listenerId] = listener;\n    this.globalListenersCount++;\n    return () => {\n      delete this.globalListeners[listenerId];\n    };\n  }\n  channelListen(listener) {\n    if (typeof listener !== \"function\") {\n      return () => {\n        return;\n      };\n    }\n    const listenerId = this.channelListenersCount;\n    this.channelListeners[listenerId] = listener;\n    this.channelListenersCount++;\n    return () => {\n      delete this.channelListeners[listenerId];\n    };\n  }\n  eventListener(evt) {\n    if (evt.source !== this.frameWindow) {\n      return;\n    }\n    const message = evt.data;\n    if (!message.codesandbox) {\n      return;\n    }\n    Object.values(this.globalListeners).forEach((listener) => listener(message));\n    if (message.$id !== this.channelId) {\n      return;\n    }\n    Object.values(this.channelListeners).forEach((listener) => listener(message));\n  }\n};\n\n// src/utils.ts\nfunction createPackageJSON(dependencies = {}, devDependencies = {}, entry = \"/index.js\") {\n  return JSON.stringify({\n    name: \"sandpack-project\",\n    main: entry,\n    dependencies,\n    devDependencies\n  }, null, 2);\n}\nfunction addPackageJSONIfNeeded(files, dependencies, devDependencies, entry) {\n  const newFiles = { ...files };\n  if (!newFiles[\"/package.json\"]) {\n    if (!dependencies) {\n      throw new Error(\"No dependencies specified, please specify either a package.json or dependencies.\");\n    }\n    if (!entry) {\n      throw new Error(\"Missing 'entry' parameter. Either specify an entry point, or pass in a package.json with the 'main' field set.\");\n    }\n    newFiles[\"/package.json\"] = {\n      code: createPackageJSON(dependencies, devDependencies, entry)\n    };\n  }\n  return newFiles;\n}\nfunction extractErrorDetails(msg) {\n  if (msg.title === \"SyntaxError\") {\n    const { title, path, message, line, column } = msg;\n    return { title, path, message, line, column };\n  }\n  const relevantStackFrame = getRelevantStackFrame(msg.payload.frames);\n  if (!relevantStackFrame) {\n    return { message: msg.message };\n  }\n  const errorInCode = getErrorInOriginalCode(relevantStackFrame);\n  const errorLocation = getErrorLocation(relevantStackFrame);\n  const errorMessage = formatErrorMessage(relevantStackFrame._originalFileName, msg.message, errorLocation, errorInCode);\n  return {\n    message: errorMessage,\n    title: msg.title,\n    path: relevantStackFrame._originalFileName,\n    line: relevantStackFrame._originalLineNumber,\n    column: relevantStackFrame._originalColumnNumber\n  };\n}\nfunction getRelevantStackFrame(frames) {\n  if (!frames) {\n    return;\n  }\n  return frames.find((frame) => !!frame._originalFileName);\n}\nfunction getErrorLocation(errorFrame) {\n  return errorFrame ? ` (${errorFrame._originalLineNumber}:${errorFrame._originalColumnNumber})` : ``;\n}\nfunction getErrorInOriginalCode(errorFrame) {\n  const lastScriptLine = errorFrame._originalScriptCode[errorFrame._originalScriptCode.length - 1];\n  const numberOfLineNumberCharacters = lastScriptLine.lineNumber.toString().length;\n  const leadingCharacterOffset = 2;\n  const barSeparatorCharacterOffset = 3;\n  const extraLineLeadingSpaces = leadingCharacterOffset + numberOfLineNumberCharacters + barSeparatorCharacterOffset + errorFrame._originalColumnNumber;\n  return errorFrame._originalScriptCode.reduce((result, scriptLine) => {\n    const leadingChar = scriptLine.highlight ? \">\" : \" \";\n    const lineNumber = scriptLine.lineNumber.toString().length === numberOfLineNumberCharacters ? `${scriptLine.lineNumber}` : ` ${scriptLine.lineNumber}`;\n    const extraLine = scriptLine.highlight ? \"\\n\" + \" \".repeat(extraLineLeadingSpaces) + \"^\" : \"\";\n    return result + \"\\n\" + leadingChar + \" \" + lineNumber + \" | \" + scriptLine.content + extraLine;\n  }, \"\");\n}\nfunction formatErrorMessage(filePath, message, location, errorInCode) {\n  return `${filePath}: ${message}${location}\n${errorInCode}`;\n}\n\n// src/client.ts\nvar BUNDLER_URL = `https://${\"0.19.0\".replace(/\\./g, \"-\")}-sandpack.codesandbox.io/`;\nvar SandpackClient = class {\n  constructor(selector, sandboxInfo, options = {}) {\n    this.getTranspilerContext = () => new Promise((resolve) => {\n      const unsubscribe = this.listen((message) => {\n        if (message.type === \"transpiler-context\") {\n          resolve(message.data);\n          unsubscribe();\n        }\n      });\n      this.dispatch({ type: \"get-transpiler-context\" });\n    });\n    var _a;\n    this.options = options;\n    this.sandboxInfo = sandboxInfo;\n    this.bundlerURL = options.bundlerURL || BUNDLER_URL;\n    this.bundlerState = void 0;\n    this.errors = [];\n    this.status = \"initializing\";\n    if (typeof selector === \"string\") {\n      this.selector = selector;\n      const element = document.querySelector(selector);\n      if (!element) {\n        throw new Error(`No element found for selector '${selector}'`);\n      }\n      this.element = element;\n      this.iframe = document.createElement(\"iframe\");\n      this.initializeElement();\n    } else {\n      this.element = selector;\n      this.iframe = selector;\n    }\n    if (!this.iframe.getAttribute(\"sandbox\")) {\n      this.iframe.setAttribute(\"sandbox\", \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\");\n    }\n    const urlSource = options.startRoute ? new URL(options.startRoute, this.bundlerURL).toString() : this.bundlerURL;\n    (_a = this.iframe.contentWindow) == null ? void 0 : _a.location.replace(urlSource);\n    this.iframeProtocol = new IFrameProtocol(this.iframe, this.bundlerURL);\n    this.unsubscribeGlobalListener = this.iframeProtocol.globalListen((mes) => {\n      if (mes.type !== \"initialized\" || !this.iframe.contentWindow) {\n        return;\n      }\n      this.iframeProtocol.register();\n      if (this.options.fileResolver) {\n        this.fileResolverProtocol = new Protocol(\"file-resolver\", async (data) => {\n          if (data.m === \"isFile\") {\n            return this.options.fileResolver.isFile(data.p);\n          }\n          return this.options.fileResolver.readFile(data.p);\n        }, this.iframe.contentWindow);\n      }\n      this.updatePreview(this.sandboxInfo, true);\n    });\n    this.unsubscribeChannelListener = this.iframeProtocol.channelListen((mes) => {\n      switch (mes.type) {\n        case \"start\": {\n          this.errors = [];\n          break;\n        }\n        case \"status\": {\n          this.status = mes.status;\n          break;\n        }\n        case \"action\": {\n          if (mes.action === \"show-error\") {\n            this.errors = [...this.errors, extractErrorDetails(mes)];\n          }\n          break;\n        }\n        case \"state\": {\n          this.bundlerState = mes.state;\n          break;\n        }\n      }\n    });\n  }\n  cleanup() {\n    this.unsubscribeChannelListener();\n    this.unsubscribeGlobalListener();\n    this.iframeProtocol.cleanup();\n  }\n  updateOptions(options) {\n    if (!isEqual(this.options, options)) {\n      this.options = options;\n      this.updatePreview();\n    }\n  }\n  updatePreview(sandboxInfo = this.sandboxInfo, isInitializationCompile) {\n    var _a, _b, _c, _d;\n    this.sandboxInfo = {\n      ...this.sandboxInfo,\n      ...sandboxInfo\n    };\n    const files = this.getFiles();\n    const modules = Object.keys(files).reduce((prev, next) => ({\n      ...prev,\n      [next]: {\n        code: files[next].code,\n        path: next\n      }\n    }), {});\n    let packageJSON = JSON.parse(createPackageJSON(this.sandboxInfo.dependencies, this.sandboxInfo.devDependencies, this.sandboxInfo.entry));\n    try {\n      packageJSON = JSON.parse(files[\"/package.json\"].code);\n    } catch (e) {\n      console.error(\"Could not parse package.json file: \" + e.message);\n    }\n    const normalizedModules = Object.keys(files).reduce((prev, next) => ({\n      ...prev,\n      [next]: {\n        content: files[next].code,\n        path: next\n      }\n    }), {});\n    this.dispatch({\n      type: \"compile\",\n      codesandbox: true,\n      version: 3,\n      isInitializationCompile,\n      modules,\n      reactDevTools: this.options.reactDevTools,\n      externalResources: this.options.externalResources || [],\n      hasFileResolver: Boolean(this.options.fileResolver),\n      disableDependencyPreprocessing: this.sandboxInfo.disableDependencyPreprocessing,\n      template: this.sandboxInfo.template || getTemplate_1(packageJSON, normalizedModules),\n      showOpenInCodeSandbox: (_a = this.options.showOpenInCodeSandbox) != null ? _a : true,\n      showErrorScreen: (_b = this.options.showErrorScreen) != null ? _b : true,\n      showLoadingScreen: (_c = this.options.showLoadingScreen) != null ? _c : true,\n      skipEval: this.options.skipEval || false,\n      clearConsoleDisabled: !this.options.clearConsoleOnFirstCompile,\n      logLevel: (_d = this.options.logLevel) != null ? _d : SandpackLogLevel.Info\n    });\n  }\n  dispatch(message) {\n    this.iframeProtocol.dispatch(message);\n  }\n  listen(listener) {\n    return this.iframeProtocol.channelListen(listener);\n  }\n  getCodeSandboxURL() {\n    const files = this.getFiles();\n    const paramFiles = Object.keys(files).reduce((prev, next) => ({\n      ...prev,\n      [next.replace(\"/\", \"\")]: {\n        content: files[next].code,\n        isBinary: false\n      }\n    }), {});\n    return fetch(\"https://codesandbox.io/api/v1/sandboxes/define?json=1\", {\n      method: \"POST\",\n      body: JSON.stringify({ files: paramFiles }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then((x) => x.json()).then((res) => ({\n      sandboxId: res.sandbox_id,\n      editorUrl: `https://codesandbox.io/s/${res.sandbox_id}`,\n      embedUrl: `https://codesandbox.io/embed/${res.sandbox_id}`\n    }));\n  }\n  getFiles() {\n    const { sandboxInfo } = this;\n    if (sandboxInfo.files[\"/package.json\"] === void 0) {\n      return addPackageJSONIfNeeded(sandboxInfo.files, sandboxInfo.dependencies, sandboxInfo.devDependencies, sandboxInfo.entry);\n    }\n    return this.sandboxInfo.files;\n  }\n  initializeElement() {\n    this.iframe.style.border = \"0\";\n    this.iframe.style.width = this.options.width || \"100%\";\n    this.iframe.style.height = this.options.height || \"100%\";\n    this.iframe.style.overflow = \"hidden\";\n    if (!this.element.parentNode) {\n      throw new Error(\"Given element does not have a parent.\");\n    }\n    this.element.parentNode.replaceChild(this.iframe, this.element);\n  }\n};\n\n// src/types.ts\nvar SandpackLogLevel;\n(function(SandpackLogLevel2) {\n  SandpackLogLevel2[SandpackLogLevel2[\"None\"] = 0] = \"None\";\n  SandpackLogLevel2[SandpackLogLevel2[\"Error\"] = 10] = \"Error\";\n  SandpackLogLevel2[SandpackLogLevel2[\"Warning\"] = 20] = \"Warning\";\n  SandpackLogLevel2[SandpackLogLevel2[\"Info\"] = 30] = \"Info\";\n  SandpackLogLevel2[SandpackLogLevel2[\"Debug\"] = 40] = \"Debug\";\n})(SandpackLogLevel || (SandpackLogLevel = {}));\n\nfunction Preview(_a) {\r\n    var { className, files, presetConfig, show, children, style, frameless, codeConfig } = _a, rest = __rest(_a, [\"className\", \"files\", \"presetConfig\", \"show\", \"children\", \"style\", \"frameless\", \"codeConfig\"]);\r\n    const kids = presetConfig ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(SandpackPreview, { files: files, presetConfig: presetConfig })) : (children);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-preview\" + (className ? \" \" + className : \"\"), style: style, \"data-ch-theme\": codeConfig === null || codeConfig === void 0 ? void 0 : codeConfig.themeName }, frameless ? (kids) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(MiniBrowser, Object.assign({ loadUrl: show }, rest, { children: kids })))));\r\n}\r\nfunction SandpackPreview({ files, presetConfig, }) {\r\n    const iframeRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n    const clientRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        clientRef.current = new SandpackClient(iframeRef.current, Object.assign(Object.assign({}, presetConfig), { files: mergeFiles(presetConfig.files, files) }), {\r\n            showOpenInCodeSandbox: false,\r\n            // showErrorScreen: false,\r\n            // showLoadingScreen: false,\r\n        });\r\n    }, []);\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        if (clientRef.current) {\r\n            clientRef.current.updatePreview(Object.assign(Object.assign({}, presetConfig), { files: mergeFiles(presetConfig.files, files) }));\r\n        }\r\n    }, [files]);\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"iframe\", { ref: iframeRef });\r\n}\r\nfunction mergeFiles(csbFiles, chFiles) {\r\n    const result = Object.assign({}, csbFiles);\r\n    chFiles.forEach(file => {\r\n        result[\"/\" + file.name] = {\r\n            code: file.code.lines\r\n                .map(l => l.tokens.map(t => t.content).join(\"\"))\r\n                .join(\"\\n\"),\r\n        };\r\n    });\r\n    return result;\r\n}\n\nfunction extractPreviewSteps(children, hasPreviewSteps) {\r\n    const allChildren = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children);\r\n    const stepsChildren = hasPreviewSteps\r\n        ? allChildren.slice(0, allChildren.length / 2)\r\n        : allChildren;\r\n    const previewChildren = hasPreviewSteps\r\n        ? allChildren.slice(allChildren.length / 2)\r\n        : undefined;\r\n    return { stepsChildren, previewChildren };\r\n}\n\nfunction Spotlight(_a) {\r\n    var _b;\r\n    var { children, editorSteps, codeConfig, start = 0, presetConfig, className, style, hasPreviewSteps } = _a, rest = __rest(_a, [\"children\", \"editorSteps\", \"codeConfig\", \"start\", \"presetConfig\", \"className\", \"style\", \"hasPreviewSteps\"]);\r\n    const { stepsChildren, previewChildren } = extractPreviewSteps(children, hasPreviewSteps);\r\n    const withPreview = presetConfig || hasPreviewSteps;\r\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\r\n        stepIndex: start,\r\n        step: editorSteps[start],\r\n    });\r\n    const tab = state.step;\r\n    function onTabClick(filename) {\r\n        const newStep = updateEditorStep(state.step, filename, null);\r\n        setState(Object.assign(Object.assign({}, state), { step: newStep }));\r\n    }\r\n    const headerElement = stepsChildren[0];\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", { className: `ch-spotlight ${withPreview ? \"ch-spotlight-with-preview\" : \"\"} ${className || \"\"}`, style: style, \"data-ch-theme\": codeConfig.themeName },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-spotlight-tabs\" },\r\n            ((_b = headerElement === null || headerElement === void 0 ? void 0 : headerElement.props) === null || _b === void 0 ? void 0 : _b.children) ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, stepsChildren[0])) : null,\r\n            stepsChildren.map((children, i) => i === 0 ? null : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { key: i, onClick: () => setState({\r\n                    stepIndex: i,\r\n                    step: editorSteps[i],\r\n                }), className: \"ch-spotlight-tab\", \"data-selected\": i === state.stepIndex ? \"true\" : undefined }, children)))),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-spotlight-sticker\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerCode, Object.assign({}, rest, tab, { codeConfig: codeConfig, onTabClick: onTabClick })),\r\n            presetConfig ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Preview, { className: \"ch-spotlight-preview\", files: tab.files, presetConfig: presetConfig })) : hasPreviewSteps ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Preview, Object.assign({ className: \"ch-spotlight-preview\" }, previewChildren[state.stepIndex][\"props\"]))) : null)));\r\n}\n\nfunction debugEntries(entries) {\r\n    entries.forEach(showEntry);\r\n}\r\nfunction showEntry(entry) {\r\n    var _a;\r\n    const rootHeight = ((_a = entry.rootBounds) === null || _a === void 0 ? void 0 : _a.height) || 0;\r\n    addFlashingRect(entry.rootBounds, {\r\n        border: `${Math.min(10, rootHeight / 2)}px solid ${iodOptions.rootColor}`,\r\n        overflow: \"hidden\",\r\n        boxSizing: \"border-box\",\r\n    });\r\n    addFlashingRect(entry.boundingClientRect, {\r\n        border: `${Math.min(10, entry.boundingClientRect.height / 2)}px solid ${entry.isIntersecting\r\n            ? iodOptions.enterColor\r\n            : iodOptions.exitColor}`,\r\n        overflow: \"hidden\",\r\n        boxSizing: \"border-box\",\r\n    });\r\n    addFlashingRect(entry.intersectionRect, {\r\n        backgroundColor: iodOptions.interColor,\r\n        zIndex: 2,\r\n    });\r\n}\r\nfunction addFlashingRect(bounds, style = {}) {\r\n    const { width, left, height, top } = bounds;\r\n    const div = document.createElement(\"div\");\r\n    div.style.position = \"fixed\";\r\n    div.style.width = width + \"px\";\r\n    div.style.left = left + \"px\";\r\n    div.style.top = top + \"px\";\r\n    div.style.height = height + \"px\";\r\n    div.style.pointerEvents = \"none\";\r\n    div.style.transition = \"opacity 2s ease-in\";\r\n    Object.assign(div.style, style);\r\n    requestAnimationFrame(() => requestAnimationFrame(() => {\r\n        div.style.opacity = \"0\";\r\n    }));\r\n    div.addEventListener(\"transitionend\", () => {\r\n        document.body.removeChild(div);\r\n    });\r\n    document.body.appendChild(div);\r\n    return div;\r\n}\r\nconst iodOptions = {\r\n    rootColor: \"#9428AB\",\r\n    enterColor: \"#B35C00\",\r\n    exitColor: \"#035570\",\r\n    interColor: \"#9CAF00BB\",\r\n};\n\nconst useLayoutEffect$1 = typeof window !== \"undefined\"\r\n    ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect\r\n    : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\nfunction useWindowHeight() {\r\n    const isClient = typeof window === \"object\";\r\n    function getHeight() {\r\n        return isClient\r\n            ? document.documentElement.clientHeight\r\n            : undefined;\r\n    }\r\n    const [windowHeight, setWindowHeight] = react__WEBPACK_IMPORTED_MODULE_0__.useState(getHeight);\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        function handleResize() {\r\n            setWindowHeight(getHeight());\r\n        }\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n    useLayoutEffect$1(() => {\r\n        // FIX when a horizontal scrollbar is added after the first layout\r\n        setWindowHeight(getHeight());\r\n    }, []);\r\n    return windowHeight;\r\n}\n\nconst ObserverContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\r\nconst useLayoutEffect = typeof window !== \"undefined\"\r\n    ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect\r\n    : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\nfunction Scroller({ onStepChange, children, getRootMargin = defaultRootMargin, triggerPosition, debug = false, }) {\r\n    const [observer, setObserver] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\r\n    const vh = useWindowHeight();\r\n    useLayoutEffect(() => {\r\n        const windowHeight = vh || 0;\r\n        const handleIntersect = entries => {\r\n            if (debug || window.chDebugScroller) {\r\n                debugEntries(entries);\r\n            }\r\n            entries.forEach(entry => {\r\n                if (entry.intersectionRatio > 0) {\r\n                    const stepElement = entry.target;\r\n                    onStepChange(+stepElement.stepIndex);\r\n                }\r\n            });\r\n        };\r\n        const observer = newIntersectionObserver(handleIntersect, getRootMargin(windowHeight, triggerPosition));\r\n        setObserver(observer);\r\n        return () => observer.disconnect();\r\n    }, [vh]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(ObserverContext.Provider, { value: observer }, children));\r\n}\r\nfunction Step(_a) {\r\n    var { as = \"section\", index } = _a, props = __rest(_a, [\"as\", \"index\"]);\r\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n    const observer = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ObserverContext);\r\n    useLayoutEffect(() => {\r\n        if (observer) {\r\n            observer.observe(ref.current);\r\n        }\r\n        return () => observer && observer.unobserve(ref.current);\r\n    }, [observer]);\r\n    useLayoutEffect(() => {\r\n        const stepElement = ref.current;\r\n        stepElement.stepIndex = index;\r\n    }, [index]);\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(as, Object.assign(Object.assign({}, props), { ref }));\r\n}\r\nfunction newIntersectionObserver(handleIntersect, rootMargin) {\r\n    return new IntersectionObserver(handleIntersect, {\r\n        rootMargin,\r\n        threshold: 0.000001,\r\n        root: null,\r\n    });\r\n}\r\nfunction defaultRootMargin(vh, triggerPosition = \"50%\") {\r\n    let y = vh * 0.5;\r\n    if (triggerPosition.endsWith(\"%\")) {\r\n        const percent = parseFloat(triggerPosition.replace(\"%\", \"\"));\r\n        y = vh * (percent / 100);\r\n    }\r\n    else if (triggerPosition.endsWith(\"px\")) {\r\n        y = parseFloat(triggerPosition.replace(\"px\", \"\"));\r\n    }\r\n    if (y < 0) {\r\n        y = vh + y;\r\n    }\r\n    return `-${y - 2}px 0px -${vh - y - 2}px`;\r\n}\n\n// server-side-media-queries-for-react\r\nlet suffixCounter = 0;\r\n/**\r\n * @typedef SwapProps\r\n * @prop {[string, JSX.Element][]} match\r\n */\r\n/**\r\n * Swap between different components depending on the media queries\r\n * @param {SwapProps} props\r\n */\r\nfunction Swap({ match }) {\r\n    const queries = match.map(([q]) => q);\r\n    const { isServer, matchedIndex } = useMedia(queries);\r\n    const mainClassName = isServer\r\n        ? \"ssmq-\" + suffixCounter++\r\n        : \"\";\r\n    return isServer ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"style\", { className: mainClassName, dangerouslySetInnerHTML: {\r\n                __html: getStyle(queries, mainClassName),\r\n            } }),\r\n        match.map(([query, element]) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { key: query, className: `${mainClassName} ${getClassName(query)}` }, element))),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"script\", { className: mainClassName, dangerouslySetInnerHTML: {\r\n                __html: getScript(match, mainClassName),\r\n            } }))) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, match[matchedIndex][1])));\r\n}\r\nfunction getStyle(queries, mainClass) {\r\n    const reversedQueries = queries.slice().reverse();\r\n    const style = reversedQueries\r\n        .map(query => {\r\n        const currentStyle = `.${mainClass}.${getClassName(query)}{display:block}`;\r\n        const otherStyle = `.${mainClass}:not(.${getClassName(query)}){display: none;}`;\r\n        if (query === \"default\") {\r\n            return `${currentStyle}${otherStyle}`;\r\n        }\r\n        else {\r\n            return `@media ${query}{${currentStyle}${otherStyle}}`;\r\n        }\r\n    })\r\n        .join(\"\\n\");\r\n    return style;\r\n}\r\nfunction getScript(match, mainClass) {\r\n    const queries = match.map(([query]) => query);\r\n    const classes = queries.map(getClassName);\r\n    return `(function() {\n  var qs = ${JSON.stringify(queries)};\n  var clss = ${JSON.stringify(classes)};\n  var mainCls = \"${mainClass}\";\n\n  var scrEls = document.getElementsByTagName(\"script\");\n  var scrEl = scrEls[scrEls.length - 1];\n  var parent = scrEl.parentNode;\n\n  var el = null;\n  for (var i = 0; i < qs.length - 1; i++) {\n    if (window.matchMedia(qs[i]).matches) {\n      el = parent.querySelector(\":scope > .\" + mainCls + \".\" + clss[i]);\n      break;\n    }\n  }\n  if (!el) {\n    var defaultClass = clss.pop();\n    el = parent.querySelector(\":scope > .\" + mainCls + \".\" + defaultClass);\n  }\n  el.removeAttribute(\"class\");\n\n  parent.querySelectorAll(\":scope > .\" + mainCls).forEach(function (e) {\n    parent.removeChild(e);\n  });\n})();`;\r\n}\r\nfunction getClassName(string) {\r\n    return (\"ssmq-\" +\r\n        string\r\n            .replace(/[!\\\"#$%&'\\(\\)\\*\\+,\\.\\/:;<=>\\?\\@\\[\\\\\\]\\^`\\{\\|\\}~\\s]/g, \"\")\r\n            .toLowerCase());\r\n}\r\nfunction useMedia(queries) {\r\n    const isServer = typeof window === \"undefined\";\r\n    const allQueries = queries.slice(0, -1);\r\n    if (queries[queries.length - 1] !== \"default\") {\r\n        console.warn(\"last media query should be 'default'\");\r\n    }\r\n    const [, setValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\r\n    const mediaQueryLists = isServer\r\n        ? []\r\n        : allQueries.map(q => window.matchMedia(q));\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        const handler = () => setValue(x => x + 1);\r\n        mediaQueryLists.forEach(mql => mql.addListener(handler));\r\n        return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\r\n    }, []);\r\n    const matchedIndex = mediaQueryLists.findIndex(mql => mql.matches);\r\n    return {\r\n        isServer,\r\n        matchedIndex: matchedIndex < 0 ? queries.length - 1 : matchedIndex,\r\n    };\r\n}\n\nfunction CodeSlot() {\r\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(StaticStepContext);\r\n    if (!context) {\r\n        return null;\r\n    }\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerCodeSlot, Object.assign({}, context));\r\n}\r\nfunction InnerCodeSlot({ editorStep, setFocus }) {\r\n    const onTabClick = (filename) => {\r\n        setFocus({ fileName: filename, focus: null, id: \"\" });\r\n    };\r\n    const props = __rest(editorStep, [\"preset\", \"presetConfig\"]);\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerCode, Object.assign({}, props, { onTabClick: onTabClick }));\r\n}\r\nfunction PreviewSlot() {\r\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(StaticStepContext);\r\n    if (!context) {\r\n        return null;\r\n    }\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerPreviewSlot, Object.assign({}, context));\r\n}\r\nfunction InnerPreviewSlot({ previewStep, allProps, editorStep, }) {\r\n    const props = __rest(allProps, [\"preset\"]);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Preview, Object.assign({ className: \"ch-scrollycoding-preview\" }, props, previewStep === null || previewStep === void 0 ? void 0 : previewStep.props, { files: editorStep.files })));\r\n}\r\nconst StaticStepContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n\nfunction Scrollycoding(props) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Swap, { match: [\r\n            [\r\n                props.codeConfig.staticMediaQuery,\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(StaticScrollycoding, Object.assign({}, props)),\r\n            ],\r\n            [\"default\", react__WEBPACK_IMPORTED_MODULE_0__.createElement(DynamicScrollycoding, Object.assign({}, props))],\r\n        ] }));\r\n}\r\nfunction StaticScrollycoding(_a) {\r\n    var _b;\r\n    var { children, hasPreviewSteps, editorSteps } = _a, rest = __rest(_a, [\"children\", \"hasPreviewSteps\", \"editorSteps\"]);\r\n    const { stepsChildren, previewChildren } = extractPreviewSteps(children, hasPreviewSteps);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", { className: \"ch-scrollycoding-static\", \"data-ch-theme\": (_b = rest === null || rest === void 0 ? void 0 : rest.codeConfig) === null || _b === void 0 ? void 0 : _b.themeName }, stepsChildren.map((children, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(StaticSection, { key: i, editorStep: editorSteps[i], previewStep: previewChildren && previewChildren[i], allProps: rest }, children)))));\r\n}\r\nfunction StaticSection({ editorStep, previewStep, allProps, children, }) {\r\n    const [step, setStep] = react__WEBPACK_IMPORTED_MODULE_0__.useState(Object.assign(Object.assign({}, editorStep), allProps));\r\n    const resetFocus = () => setStep(Object.assign(Object.assign({}, editorStep), allProps));\r\n    const setFocus = ({ fileName, focus, id, }) => {\r\n        const newStep = updateEditorStep(step, fileName, focus);\r\n        setStep(Object.assign(Object.assign(Object.assign({}, step), newStep), { selectedId: id }));\r\n    };\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(StaticStepContext.Provider, { value: {\r\n            editorStep: step,\r\n            previewStep: previewStep,\r\n            allProps,\r\n            setFocus,\r\n        } },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(LinkableSection, { onActivation: setFocus, onReset: resetFocus }, children)));\r\n}\r\nfunction DynamicScrollycoding(_a) {\r\n    var { children, editorSteps, codeConfig, presetConfig, start = 0, className, style, hasPreviewSteps } = _a, rest = __rest(_a, [\"children\", \"editorSteps\", \"codeConfig\", \"presetConfig\", \"start\", \"className\", \"style\", \"hasPreviewSteps\"]);\r\n    const { stepsChildren, previewChildren } = extractPreviewSteps(children, hasPreviewSteps);\r\n    const withPreview = presetConfig || hasPreviewSteps;\r\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\r\n        stepIndex: start,\r\n        step: editorSteps[start],\r\n    });\r\n    const tab = state.step;\r\n    function onStepChange(index) {\r\n        setState({ stepIndex: index, step: editorSteps[index] });\r\n    }\r\n    function onTabClick(filename) {\r\n        const newStep = updateEditorStep(state.step, filename, null);\r\n        setState(Object.assign(Object.assign({}, state), { step: newStep }));\r\n    }\r\n    function onLinkActivation(stepIndex, filename, focus) {\r\n        const newStep = updateEditorStep(editorSteps[stepIndex], filename, focus);\r\n        setState(Object.assign(Object.assign({}, state), { stepIndex, step: newStep }));\r\n    }\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"section\", { className: `ch-scrollycoding ${withPreview ? \"ch-scrollycoding-with-preview\" : \"\"} ${className || \"\"}`, style: style, \"data-ch-theme\": codeConfig === null || codeConfig === void 0 ? void 0 : codeConfig.themeName },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-scrollycoding-content\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(Scroller, { onStepChange: onStepChange, triggerPosition: codeConfig === null || codeConfig === void 0 ? void 0 : codeConfig.triggerPosition }, stepsChildren.map((children, i) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Step, { as: \"div\", key: i, index: i, onClick: () => onStepChange(i), className: \"ch-scrollycoding-step-content\", \"data-selected\": i === state.stepIndex ? \"true\" : undefined },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(LinkableSection, { onActivation: ({ fileName, focus }) => {\r\n                        onLinkActivation(i, fileName, focus);\r\n                    }, onReset: () => {\r\n                        onStepChange(i);\r\n                    } }, children)))))),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-scrollycoding-sticker\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerCode, Object.assign({ showExpandButton: true }, rest, tab, { codeConfig: codeConfig, onTabClick: onTabClick })),\r\n            presetConfig ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Preview, { className: \"ch-scrollycoding-preview\", files: tab.files, presetConfig: presetConfig })) : hasPreviewSteps ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Preview, Object.assign({ className: \"ch-scrollycoding-preview\" }, previewChildren[state.stepIndex][\"props\"]))) : null)));\r\n}\n\nfunction Slideshow(_a) {\r\n    var { children, className, code, codeConfig, editorSteps, autoFocus, hasPreviewSteps, \r\n    // Set the initial slide index\r\n    start = 0, \r\n    // Called when the slideshow state changes and returns the current state object\r\n    onChange: onSlideshowChange = () => { }, presetConfig, style, autoPlay, loop = false } = _a, rest = __rest(_a, [\"children\", \"className\", \"code\", \"codeConfig\", \"editorSteps\", \"autoFocus\", \"hasPreviewSteps\", \"start\", \"onChange\", \"presetConfig\", \"style\", \"autoPlay\", \"loop\"]);\r\n    const { stepsChildren, previewChildren } = extractPreviewSteps(children, hasPreviewSteps);\r\n    const withPreview = presetConfig || hasPreviewSteps;\r\n    const hasNotes = stepsChildren.some((child) => { var _a; return (_a = child.props) === null || _a === void 0 ? void 0 : _a.children; });\r\n    const maxSteps = editorSteps.length - 1;\r\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(() => {\r\n        const startIndex = clamp$2(start, 0, maxSteps);\r\n        return {\r\n            stepIndex: startIndex,\r\n            step: editorSteps[startIndex],\r\n        };\r\n    });\r\n    const { stepIndex: currentIndex, step: tab } = state;\r\n    const atSlideshowEnd = currentIndex === maxSteps;\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        onSlideshowChange({ index: currentIndex });\r\n    }, [currentIndex]);\r\n    function onTabClick(filename) {\r\n        const newStep = updateEditorStep(tab, filename, null);\r\n        setState(Object.assign(Object.assign({}, state), { step: newStep }));\r\n    }\r\n    function setIndex(newIndex) {\r\n        const stepIndex = clamp$2(newIndex, 0, maxSteps);\r\n        setState({ stepIndex, step: editorSteps[stepIndex] });\r\n    }\r\n    function nextSlide() {\r\n        setState(s => {\r\n            const stepIndex = loop\r\n                ? (s.stepIndex + 1) % (maxSteps + 1)\r\n                : clamp$2(s.stepIndex + 1, 0, maxSteps);\r\n            return {\r\n                stepIndex,\r\n                step: editorSteps[stepIndex],\r\n            };\r\n        });\r\n    }\r\n    useInterval(nextSlide, autoPlay);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: `ch-slideshow ${withPreview ? \"ch-slideshow-with-preview\" : \"\"} ${className || \"\"}`, style: style, \"data-ch-theme\": codeConfig.themeName },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-slideshow-slide\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(InnerCode, Object.assign({}, rest, tab, { codeConfig: Object.assign(Object.assign({}, codeConfig), code), onTabClick: onTabClick })),\r\n            presetConfig ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Preview, { className: \"ch-slideshow-preview\", files: tab.files, presetConfig: presetConfig })) : hasPreviewSteps ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Preview, Object.assign({ className: \"ch-slideshow-preview\" }, previewChildren[currentIndex][\"props\"]))) : null),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-slideshow-notes\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-slideshow-range\" },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { onClick: () => setIndex(currentIndex - 1), disabled: currentIndex === 0 }, \"Prev\"),\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", { max: maxSteps, min: 0, step: 1, type: \"range\", value: currentIndex, onChange: e => setIndex(+e.target.value), ref: useAutoFocusRef(autoFocus), autoFocus: autoFocus }),\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { onClick: nextSlide, disabled: atSlideshowEnd }, \"Next\")),\r\n            hasNotes && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-slideshow-note\" }, stepsChildren[currentIndex])))));\r\n}\r\nfunction useAutoFocusRef(autoFocus) {\r\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\r\n        autoFocus && ref.current.focus();\r\n    }, []);\r\n    return ref;\r\n}\n\nfunction Annotation() {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, \"\\\"error: code hike remark plugin not running or annotation isn't at the right place\\\"\"));\r\n}\r\nconst annotationsMap = {\r\n    box: Box,\r\n    bg: MultilineMark,\r\n    label: Label,\r\n    link: CodeLink,\r\n    mark: Mark,\r\n    withClass: WithClass,\r\n};\r\nfunction Mark(props) {\r\n    if (props.isInline) {\r\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(InlineMark, Object.assign({}, props));\r\n    }\r\n    else {\r\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MultilineMark, Object.assign({}, props));\r\n    }\r\n}\r\nfunction MultilineMark({ children, data, style, lines, }) {\r\n    const content = getContent(lines);\r\n    const className = `ch-code-multiline-mark ` + (data !== null && data !== void 0 ? data : \"\");\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: style, className: className },\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"ch-code-multiline-mark-border\" }),\r\n        children,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CopyButton, { className: \"ch-code-button\", content: content })));\r\n}\r\nfunction getContent(lines) {\r\n    return lines\r\n        .map(l => l.annotatedGroups\r\n        .flatMap(ag => {\r\n        var _a;\r\n        return (_a = ag.prev) === null || _a === void 0 ? void 0 : _a.groups.flatMap(tg => tg.tokens.map(t => t.content));\r\n    })\r\n        .join(\"\"))\r\n        .join(\"\\n\");\r\n}\r\nfunction InlineMark({ children, data }) {\r\n    const className = \"ch-code-inline-mark \" + (data !== null && data !== void 0 ? data : \"\");\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: className, style: {\r\n            background: tryGuessColor(children) || undefined,\r\n        } }, children));\r\n}\r\nfunction tryGuessColor(children) {\r\n    var _a, _b, _c;\r\n    try {\r\n        const child = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children)[0];\r\n        const grandChild = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.children) || [])[0];\r\n        const grandGrandChild = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(((_b = grandChild === null || grandChild === void 0 ? void 0 : grandChild.props) === null || _b === void 0 ? void 0 : _b.children) || [])[0];\r\n        const { color } = ((_c = grandGrandChild === null || grandGrandChild === void 0 ? void 0 : grandGrandChild.props) === null || _c === void 0 ? void 0 : _c.style) || {};\r\n        if (color) {\r\n            return transparent(color, 0.2);\r\n        }\r\n        return undefined;\r\n    }\r\n    catch (e) {\r\n        return undefined;\r\n    }\r\n}\r\nfunction Box({ children, data }) {\r\n    const outlineColor = typeof data === \"string\" ? data : undefined;\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"ch-code-box-annotation\", style: { outlineColor } }, children));\r\n}\r\nfunction WithClass({ children, data, style, }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { style: style, className: data }, children));\r\n}\r\nfunction Label({ children, data, style }) {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-code-label-annotation\", style: style },\r\n        children,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ch-code-label-annotation-text\" }, (data === null || data === void 0 ? void 0 : data.children) || data)));\r\n}\r\nfunction CodeLink({ children, isInline, style, data, }) {\r\n    const url = (data === null || data === void 0 ? void 0 : data.url) || data;\r\n    const title = data === null || data === void 0 ? void 0 : data.title;\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", { href: url, title: title, className: isInline ? \"ch-code-inline-link\" : \"ch-code-link\", style: style }, children));\r\n}\n\nfunction InlineCode(_a) {\r\n    var { className, codeConfig, children, code } = _a, rest = __rest(_a, [\"className\", \"codeConfig\", \"children\", \"code\"]);\r\n    const { lines } = code;\r\n    const allTokens = lines.flatMap(line => line.tokens);\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", Object.assign({ \"data-ch-theme\": codeConfig.themeName, className: \"ch-inline-code not-prose\" +\r\n            (className ? \" \" + className : \"\") }, rest),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, allTokens.map((token, j) => (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", Object.assign({ key: j }, token.props), token.content))))));\r\n}\n\nconst CH = {\r\n    Code,\r\n    Section,\r\n    SectionLink,\r\n    SectionCode,\r\n    Spotlight,\r\n    Scrollycoding,\r\n    Preview,\r\n    annotations: annotationsMap,\r\n    Annotation,\r\n    Slideshow,\r\n    InlineCode,\r\n    CodeSlot,\r\n    PreviewSlot,\r\n};\r\nconst internal = {\r\n    MiniBrowser,\r\n    EditorSpring,\r\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@code-hike/mdx/dist/components.esm.mjs\n"));

/***/ }),

/***/ "./node_modules/@mdx-js/react/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@mdx-js/react/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MDXContext\": function() { return /* reexport safe */ _lib_index_js__WEBPACK_IMPORTED_MODULE_0__.MDXContext; },\n/* harmony export */   \"MDXProvider\": function() { return /* reexport safe */ _lib_index_js__WEBPACK_IMPORTED_MODULE_0__.MDXProvider; },\n/* harmony export */   \"useMDXComponents\": function() { return /* reexport safe */ _lib_index_js__WEBPACK_IMPORTED_MODULE_0__.useMDXComponents; },\n/* harmony export */   \"withMDXComponents\": function() { return /* reexport safe */ _lib_index_js__WEBPACK_IMPORTED_MODULE_0__.withMDXComponents; }\n/* harmony export */ });\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/index.js */ \"./node_modules/@mdx-js/react/lib/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUt1QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9pbmRleC5qcz9mODkzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7XG4gIE1EWENvbnRleHQsXG4gIE1EWFByb3ZpZGVyLFxuICB1c2VNRFhDb21wb25lbnRzLFxuICB3aXRoTURYQ29tcG9uZW50c1xufSBmcm9tICcuL2xpYi9pbmRleC5qcydcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/index.js\n"));

/***/ }),

/***/ "./node_modules/@mdx-js/react/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@mdx-js/react/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MDXContext\": function() { return /* binding */ MDXContext; },\n/* harmony export */   \"MDXProvider\": function() { return /* binding */ MDXProvider; },\n/* harmony export */   \"useMDXComponents\": function() { return /* binding */ useMDXComponents; },\n/* harmony export */   \"withMDXComponents\": function() { return /* binding */ withMDXComponents; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\n\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nfunction withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nfunction MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEsMkJBQTJCO0FBQ3hDLGFBQWEsc0NBQXNDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQWlEO0FBQy9EO0FBQ0EsY0FBYyw0QkFBNEI7QUFDMUM7QUFDQSxjQUFjLDhCQUE4QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUV5Qjs7QUFFekI7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG1CQUFtQixnREFBbUIsR0FBRzs7QUFFaEQ7QUFDQSxXQUFXLG9DQUFvQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7O0FBRUE7QUFDQSxhQUFhLDJCQUEyQiw2Q0FBNkM7QUFDckYsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0RBQW1CLGFBQWEsd0JBQXdCO0FBQ25FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpREFBaUQ7QUFDNUQ7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUCw0QkFBNEIsNkNBQWdCOztBQUU1QztBQUNBLFNBQVMsMENBQWE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaLEdBQUc7QUFDSDs7QUFFQSxXQUFXLFlBQVk7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNPLHNCQUFzQiwyQ0FBMkM7QUFDeEUsYUFBYSxZQUFZO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLFNBQVMsZ0RBQW1CO0FBQzVCO0FBQ0EsS0FBSyxxQkFBcUI7QUFDMUI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL3JlYWN0L2xpYi9pbmRleC5qcz9mZGRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgncmVhY3QnKS5SZWFjdE5vZGV9IFJlYWN0Tm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWR4L3R5cGVzLmpzJykuTURYQ29tcG9uZW50c30gQ29tcG9uZW50c1xuICpcbiAqIEB0eXBlZGVmIFByb3BzXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcHJvcGVydHkge0NvbXBvbmVudHMgfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgTWFwcGluZyBvZiBuYW1lcyBmb3IgSlNYIGNvbXBvbmVudHMgdG8gUmVhY3QgY29tcG9uZW50cy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQuXG4gKiBAcHJvcGVydHkge1JlYWN0Tm9kZSB8IG51bGwgfCB1bmRlZmluZWR9IFtjaGlsZHJlbl1cbiAqICAgQ2hpbGRyZW4uXG4gKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge0NvbXBvbmVudHN9IGN1cnJlbnRDb21wb25lbnRzXG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBjb250ZXh0LlxuICogQHJldHVybnMge0NvbXBvbmVudHN9XG4gKiAgIE1lcmdlZCBjb21wb25lbnRzLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqXG4gKiBAdHlwZSB7aW1wb3J0KCdyZWFjdCcpLkNvbnRleHQ8Q29tcG9uZW50cz59XG4gKiBAZGVwcmVjYXRlZFxuICogICBUaGlzIGV4cG9ydCBpcyBtYXJrZWQgYXMgYSBsZWdhY3kgZmVhdHVyZS5cbiAqICAgVGhhdCBtZWFucyBpdOKAmXMgbm8gbG9uZ2VyIHJlY29tbWVuZGVkIGZvciB1c2UgYXMgaXQgbWlnaHQgYmUgcmVtb3ZlZFxuICogICBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLlxuICpcbiAqICAgUGxlYXNlIHVzZSBgdXNlTURYQ29tcG9uZW50c2AgdG8gZ2V0IGNvbnRleHQgYmFzZWQgY29tcG9uZW50cyBhbmRcbiAqICAgYE1EWFByb3ZpZGVyYCB0byBzZXQgY29udGV4dCBiYXNlZCBjb21wb25lbnRzIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBNRFhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSlcblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5Db21wb25lbnRUeXBlPGFueT59IENvbXBvbmVudFxuICogQGRlcHJlY2F0ZWRcbiAqICAgVGhpcyBleHBvcnQgaXMgbWFya2VkIGFzIGEgbGVnYWN5IGZlYXR1cmUuXG4gKiAgIFRoYXQgbWVhbnMgaXTigJlzIG5vIGxvbmdlciByZWNvbW1lbmRlZCBmb3IgdXNlIGFzIGl0IG1pZ2h0IGJlIHJlbW92ZWRcbiAqICAgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS5cbiAqXG4gKiAgIFBsZWFzZSB1c2UgYHVzZU1EWENvbXBvbmVudHNgIHRvIGdldCBjb250ZXh0IGJhc2VkIGNvbXBvbmVudHMgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhNRFhDb21wb25lbnRzKENvbXBvbmVudCkge1xuICByZXR1cm4gYm91bmRNRFhDb21wb25lbnRcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiAmIHtjb21wb25lbnRzPzogQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9fSBwcm9wc1xuICAgKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9XG4gICAqL1xuICBmdW5jdGlvbiBib3VuZE1EWENvbXBvbmVudChwcm9wcykge1xuICAgIGNvbnN0IGFsbENvbXBvbmVudHMgPSB1c2VNRFhDb21wb25lbnRzKHByb3BzLmNvbXBvbmVudHMpXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCB7Li4ucHJvcHMsIGFsbENvbXBvbmVudHN9KVxuICB9XG59XG5cbi8qKlxuICogR2V0IGN1cnJlbnQgY29tcG9uZW50cyBmcm9tIHRoZSBNRFggQ29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge0NvbXBvbmVudHMgfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIGN1cnJlbnRcbiAqICAgY29tcG9uZW50cyBhbmQgZmlsdGVycy9tZXJnZXMvY2hhbmdlcyB0aGVtLlxuICogQHJldHVybnMge0NvbXBvbmVudHN9XG4gKiAgIEN1cnJlbnQgY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1EWENvbXBvbmVudHMoY29tcG9uZW50cykge1xuICBjb25zdCBjb250ZXh0Q29tcG9uZW50cyA9IFJlYWN0LnVzZUNvbnRleHQoTURYQ29udGV4dClcblxuICAvLyBNZW1vaXplIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHRvcC1sZXZlbCBjb250ZXh0IGNoYW5nZXNcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIC8vIEN1c3RvbSBtZXJnZSB2aWEgYSBmdW5jdGlvbiBwcm9wXG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50cyhjb250ZXh0Q29tcG9uZW50cylcbiAgICB9XG5cbiAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICB9LCBbY29udGV4dENvbXBvbmVudHMsIGNvbXBvbmVudHNdKVxufVxuXG4vKiogQHR5cGUge0NvbXBvbmVudHN9ICovXG5jb25zdCBlbXB0eU9iamVjdCA9IHt9XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0XG4gKlxuICogQHBhcmFtIHtQcm9wc30gcHJvcHNcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1EWFByb3ZpZGVyKHtjb21wb25lbnRzLCBjaGlsZHJlbiwgZGlzYWJsZVBhcmVudENvbnRleHR9KSB7XG4gIC8qKiBAdHlwZSB7Q29tcG9uZW50c30gKi9cbiAgbGV0IGFsbENvbXBvbmVudHNcblxuICBpZiAoZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY29tcG9uZW50cyh7fSlcbiAgICAgICAgOiBjb21wb25lbnRzIHx8IGVtcHR5T2JqZWN0XG4gIH0gZWxzZSB7XG4gICAgYWxsQ29tcG9uZW50cyA9IHVzZU1EWENvbXBvbmVudHMoY29tcG9uZW50cylcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIE1EWENvbnRleHQuUHJvdmlkZXIsXG4gICAge3ZhbHVlOiBhbGxDb21wb25lbnRzfSxcbiAgICBjaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@mdx-js/react/lib/index.js\n"));

/***/ }),

/***/ "./node_modules/next-mdx-remote/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/next-mdx-remote/dist/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MDXRemote\": function() { return /* binding */ MDXRemote; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _jsx_runtime_cjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-runtime.cjs */ \"./node_modules/next-mdx-remote/dist/jsx-runtime.cjs\");\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mdx-js/react */ \"./node_modules/@mdx-js/react/index.js\");\n\n\n\n\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\nif (typeof window !== 'undefined') {\n  window.requestIdleCallback =\n    window.requestIdleCallback ||\n    function (cb) {\n      var start = Date.now();\n      return setTimeout(function () {\n        cb({\n          didTimeout: false,\n          timeRemaining: function () {\n            return Math.max(0, 50 - (Date.now() - start))\n          },\n        });\n      }, 1)\n    };\n\n  window.cancelIdleCallback =\n    window.cancelIdleCallback ||\n    function (id) {\n      clearTimeout(id);\n    };\n}\n\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n/**\n * Renders compiled source from next-mdx-remote/serialize.\n */\nfunction MDXRemote({ compiledSource, frontmatter, scope, components = {}, lazy, }) {\n    const [isReadyToRender, setIsReadyToRender] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!lazy || typeof window === 'undefined');\n    // if we're on the client side and `lazy` is set to true, we hydrate the\n    // mdx content inside requestIdleCallback, allowing the page to get to\n    // interactive quicker, but the mdx content to hydrate slower.\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (lazy) {\n            const handle = window.requestIdleCallback(() => {\n                setIsReadyToRender(true);\n            });\n            return () => window.cancelIdleCallback(handle);\n        }\n    }, []);\n    const Content = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        // if we're ready to render, we can assemble the component tree and let React do its thing\n        // first we set up the scope which has to include the mdx custom\n        // create element function as well as any components we're using\n        const fullScope = Object.assign({ opts: { ..._mdx_js_react__WEBPACK_IMPORTED_MODULE_2__, ..._jsx_runtime_cjs__WEBPACK_IMPORTED_MODULE_1__.jsxRuntime } }, { frontmatter }, scope);\n        const keys = Object.keys(fullScope);\n        const values = Object.values(fullScope);\n        // now we eval the source code using a function constructor\n        // in order for this to work we need to have React, the mdx createElement,\n        // and all our components in scope for the function, which is the case here\n        // we pass the names (via keys) in as the function's args, and execute the\n        // function with the actual values.\n        const hydrateFn = Reflect.construct(Function, keys.concat(`${compiledSource}`));\n        return hydrateFn.apply(hydrateFn, values).default;\n    }, [scope, compiledSource]);\n    if (!isReadyToRender) {\n        // If we're not ready to render, return an empty div to preserve SSR'd markup\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { dangerouslySetInnerHTML: { __html: '' }, suppressHydrationWarning: true }));\n    }\n    // wrapping the content with MDXProvider will allow us to customize the standard\n    // markdown components (such as \"h1\" or \"a\") with the \"components\" object\n    const content = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__.MDXProvider, { components: components },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Content, null)));\n    // If lazy = true, we need to render a wrapping div to preserve the same markup structure that was SSR'd\n    return lazy ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, content) : content;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC1tZHgtcmVtb3RlL2Rpc3QvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0RDtBQUNiO0FBQ1Y7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1EQUFtRCxTQUFTO0FBQ2pGLGtEQUFrRCwrQ0FBUTtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsb0JBQW9CLDhDQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxRQUFRLEdBQUcsMENBQUcsS0FBSyx3REFBVSxJQUFJLElBQUksYUFBYTtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxlQUFlO0FBQ3BGO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxnQkFBZ0IsZ0RBQW1CLFVBQVUsMkJBQTJCLFlBQVksa0NBQWtDO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnREFBbUIsQ0FBQyxzREFBZSxJQUFJLHdCQUF3QjtBQUNwRixRQUFRLGdEQUFtQjtBQUMzQjtBQUNBLGtCQUFrQixnREFBbUI7QUFDckM7O0FBRXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0LW1keC1yZW1vdGUvZGlzdC9pbmRleC5qcz8yMzI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4UnVudGltZSB9IGZyb20gJy4vanN4LXJ1bnRpbWUuY2pzJztcbmltcG9ydCAqIGFzIG1keCBmcm9tICdAbWR4LWpzL3JlYWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbiAqL1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgPVxuICAgIHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrIHx8XG4gICAgZnVuY3Rpb24gKGNiKSB7XG4gICAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYih7XG4gICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9LCAxKVxuICAgIH07XG5cbiAgd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayA9XG4gICAgd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayB8fFxuICAgIGZ1bmN0aW9uIChpZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuICovXG4vKipcbiAqIFJlbmRlcnMgY29tcGlsZWQgc291cmNlIGZyb20gbmV4dC1tZHgtcmVtb3RlL3NlcmlhbGl6ZS5cbiAqL1xuZnVuY3Rpb24gTURYUmVtb3RlKHsgY29tcGlsZWRTb3VyY2UsIGZyb250bWF0dGVyLCBzY29wZSwgY29tcG9uZW50cyA9IHt9LCBsYXp5LCB9KSB7XG4gICAgY29uc3QgW2lzUmVhZHlUb1JlbmRlciwgc2V0SXNSZWFkeVRvUmVuZGVyXSA9IHVzZVN0YXRlKCFsYXp5IHx8IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKTtcbiAgICAvLyBpZiB3ZSdyZSBvbiB0aGUgY2xpZW50IHNpZGUgYW5kIGBsYXp5YCBpcyBzZXQgdG8gdHJ1ZSwgd2UgaHlkcmF0ZSB0aGVcbiAgICAvLyBtZHggY29udGVudCBpbnNpZGUgcmVxdWVzdElkbGVDYWxsYmFjaywgYWxsb3dpbmcgdGhlIHBhZ2UgdG8gZ2V0IHRvXG4gICAgLy8gaW50ZXJhY3RpdmUgcXVpY2tlciwgYnV0IHRoZSBtZHggY29udGVudCB0byBoeWRyYXRlIHNsb3dlci5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAobGF6eSkge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldElzUmVhZHlUb1JlbmRlcih0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2soaGFuZGxlKTtcbiAgICAgICAgfVxuICAgIH0sIFtdKTtcbiAgICBjb25zdCBDb250ZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIGlmIHdlJ3JlIHJlYWR5IHRvIHJlbmRlciwgd2UgY2FuIGFzc2VtYmxlIHRoZSBjb21wb25lbnQgdHJlZSBhbmQgbGV0IFJlYWN0IGRvIGl0cyB0aGluZ1xuICAgICAgICAvLyBmaXJzdCB3ZSBzZXQgdXAgdGhlIHNjb3BlIHdoaWNoIGhhcyB0byBpbmNsdWRlIHRoZSBtZHggY3VzdG9tXG4gICAgICAgIC8vIGNyZWF0ZSBlbGVtZW50IGZ1bmN0aW9uIGFzIHdlbGwgYXMgYW55IGNvbXBvbmVudHMgd2UncmUgdXNpbmdcbiAgICAgICAgY29uc3QgZnVsbFNjb3BlID0gT2JqZWN0LmFzc2lnbih7IG9wdHM6IHsgLi4ubWR4LCAuLi5qc3hSdW50aW1lIH0gfSwgeyBmcm9udG1hdHRlciB9LCBzY29wZSk7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmdWxsU2NvcGUpO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBPYmplY3QudmFsdWVzKGZ1bGxTY29wZSk7XG4gICAgICAgIC8vIG5vdyB3ZSBldmFsIHRoZSBzb3VyY2UgY29kZSB1c2luZyBhIGZ1bmN0aW9uIGNvbnN0cnVjdG9yXG4gICAgICAgIC8vIGluIG9yZGVyIGZvciB0aGlzIHRvIHdvcmsgd2UgbmVlZCB0byBoYXZlIFJlYWN0LCB0aGUgbWR4IGNyZWF0ZUVsZW1lbnQsXG4gICAgICAgIC8vIGFuZCBhbGwgb3VyIGNvbXBvbmVudHMgaW4gc2NvcGUgZm9yIHRoZSBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGNhc2UgaGVyZVxuICAgICAgICAvLyB3ZSBwYXNzIHRoZSBuYW1lcyAodmlhIGtleXMpIGluIGFzIHRoZSBmdW5jdGlvbidzIGFyZ3MsIGFuZCBleGVjdXRlIHRoZVxuICAgICAgICAvLyBmdW5jdGlvbiB3aXRoIHRoZSBhY3R1YWwgdmFsdWVzLlxuICAgICAgICBjb25zdCBoeWRyYXRlRm4gPSBSZWZsZWN0LmNvbnN0cnVjdChGdW5jdGlvbiwga2V5cy5jb25jYXQoYCR7Y29tcGlsZWRTb3VyY2V9YCkpO1xuICAgICAgICByZXR1cm4gaHlkcmF0ZUZuLmFwcGx5KGh5ZHJhdGVGbiwgdmFsdWVzKS5kZWZhdWx0O1xuICAgIH0sIFtzY29wZSwgY29tcGlsZWRTb3VyY2VdKTtcbiAgICBpZiAoIWlzUmVhZHlUb1JlbmRlcikge1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3QgcmVhZHkgdG8gcmVuZGVyLCByZXR1cm4gYW4gZW1wdHkgZGl2IHRvIHByZXNlcnZlIFNTUidkIG1hcmt1cFxuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6ICcnIH0sIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzogdHJ1ZSB9KSk7XG4gICAgfVxuICAgIC8vIHdyYXBwaW5nIHRoZSBjb250ZW50IHdpdGggTURYUHJvdmlkZXIgd2lsbCBhbGxvdyB1cyB0byBjdXN0b21pemUgdGhlIHN0YW5kYXJkXG4gICAgLy8gbWFya2Rvd24gY29tcG9uZW50cyAoc3VjaCBhcyBcImgxXCIgb3IgXCJhXCIpIHdpdGggdGhlIFwiY29tcG9uZW50c1wiIG9iamVjdFxuICAgIGNvbnN0IGNvbnRlbnQgPSAoUmVhY3QuY3JlYXRlRWxlbWVudChtZHguTURYUHJvdmlkZXIsIHsgY29tcG9uZW50czogY29tcG9uZW50cyB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRlbnQsIG51bGwpKSk7XG4gICAgLy8gSWYgbGF6eSA9IHRydWUsIHdlIG5lZWQgdG8gcmVuZGVyIGEgd3JhcHBpbmcgZGl2IHRvIHByZXNlcnZlIHRoZSBzYW1lIG1hcmt1cCBzdHJ1Y3R1cmUgdGhhdCB3YXMgU1NSJ2RcbiAgICByZXR1cm4gbGF6eSA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgY29udGVudCkgOiBjb250ZW50O1xufVxuXG5leHBvcnQgeyBNRFhSZW1vdGUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next-mdx-remote/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/next-mdx-remote/index.js":
/*!***********************************************!*\
  !*** ./node_modules/next-mdx-remote/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ \"./node_modules/next-mdx-remote/dist/index.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _dist_index_js__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _dist_index_js__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: MPL-2.0\n */\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC1tZHgtcmVtb3RlL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0LW1keC1yZW1vdGUvaW5kZXguanM/NmU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGFzaGlDb3JwLCBJbmMuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vZGlzdC9pbmRleC5qcydcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next-mdx-remote/index.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2Fopt%2Fprojects%2Fblog%2Fpages%2Fsnippets%2Findex.tsx&page=%2Fsnippets!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);